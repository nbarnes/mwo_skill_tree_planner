(function () {
'use strict';

// First element of the nodes array MUST be the root node of the skll graph

var treeSource = [
/*
==========================================
                 WEAPONS
==========================================
*/
{
  name: "Weapons",
  nodes: [{ name: "Range 1",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-2",
    rightChildId: "range-3"
  }, { name: "Range 2",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-4",
    rightChildId: "range-5"
  }, { name: "Range 3",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-5",
    rightChildId: "range-6"
  }, { name: "Range 4",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "cooldown-1",
    centerChildId: "high-explosive-1",
    rightChildId: "velocity-1"
  }, { name: "Range 5",
    attribute: "Weapon Range",
    value: "1",
    centerChildId: "cooldown-4"
  }, { name: "Range 6",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "velocity-2",
    centerChildId: "gauss-charge-1",
    rightChildId: "cooldown-2"
  }, { name: "Cooldown 1",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "cooldown-3"
  }, { name: "Velocity 1",
    attribute: "Weapon Velocity",
    value: "2",
    rightChildId: "cooldown-4"
  }, { name: "Velocity 2",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "cooldown-4"
  }, { name: "Cooldown 2",
    attribute: "Weapon Cooldown",
    value: "0.75",
    rightChildId: "cooldown-5"
  }, { name: "Cooldown 3",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-7",
    centerChildId: "missile-spread-1",
    rightChildId: "heat-gen-1"
  }, { name: "High Explosive 1",
    attribute: "Missile Crit Damage",
    value: "7.5",
    leftChildId: "heat-gen-1"
  }, { name: "Cooldown 4",
    attribute: "Weapon Cooldown",
    value: "0.75",
    centerChildId: "cooldown-6"
  }, { name: "Gauss Charge 1",
    attribute: "Gauss Held Time",
    value: "0.5",
    rightChildId: "heat-gen-2"
  }, { name: "Cooldown 5",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-2",
    centerChildId: "lbx-spread-1",
    rightChildId: "range-8"
  }, { name: "Range 7",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-9"
  }, { name: "Heat Gen 1",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "missile-spread-1",
    rightChildId: "heat-gen-3"
  }, { name: "Heat Gen 2",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "heat-gen-4",
    rightChildId: "lbx-spread-1"
  }, { name: "Range 8",
    attribute: "Weapon Range",
    value: "1",
    rightChildId: "range-10"
  }, { name: "Range 9",
    attribute: "Weapon Range",
    value: "1",
    rightChildId: "cooldown-7"
  }, { name: "Missile Spread 1",
    attribute: "Missile Spread",
    value: "2.5",
    leftChildId: "cooldown-7"
  }, { name: "Heat Gen 3",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "velocity-3",
    rightChildId: "range-11"
  }, { name: "Cooldown 6",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-11",
    centerChildId: "laser-duration-1",
    rightChildId: "range-12"
  }, { name: "Heat Gen 4",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "range-12",
    rightChildId: "velocity-4"
  }, { name: "LBX Spread 1",
    attribute: "LBX Spread",
    value: "5",
    rightChildId: "cooldown-8"
  }, { name: "Range 10",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "cooldown-8",
    rightChildId: "uac-jam-chance-1"
  }, { name: "Cooldown 7",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-5",
    rightChildId: "heat-gen-6"
  }, { name: "Velocity 3",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "heat-gen-6"
  }, { name: "Range 11",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-13",
    rightChildId: "laser-duration-1"
  }, { name: "Range 12",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "laser-duration-1",
    rightChildId: "range-14"
  }, { name: "Velocity 4",
    attribute: "Weapon Velocity",
    value: "2",
    rightChildId: "cooldown-9"
  }, { name: "Cooldown 8",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "cooldown-9",
    centerChildId: "gauss-charge-2",
    rightChildId: "heat-gen-7"
  }, { name: "UAC Jam Chance 1",
    attribute: "UAC Jam Chance",
    value: "2.5"
  }, { name: "Heat Gen 5",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "cooldown-10"
  }, { name: "Heat Gen 6",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "high-explosive-2",
    centerChildId: "laser-duration-2",
    rightChildId: "heat-gen-8"
  }, { name: "Range 13",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "heat-gen-8",
    rightChildId: "missile-rack-1"
  }, { name: "Laser Duration 1",
    attribute: "Laser Duration",
    value: "3.75",
    centerChildId: "cooldown-12"
  }, { name: "Range 14",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "magazine-capacity-1",
    rightChildId: "heat-gen-9"
  }, { name: "Cooldown 9",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-9",
    centerChildId: "laser-duration-3",
    rightChildId: "gauss-charge-2"
  }, { name: "Heat Gen 7",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    rightChildId: "cooldown-11"
  }, { name: "Cooldown 10",
    attribute: "Weapon Cooldown",
    value: "0.75",
    rightChildId: "missile-rack-2"
  }, { name: "High Explosive 2",
    attribute: "Missile Crit Damage",
    value: "7.5",
    rightChildId: "laser-duration-2"
  }, { name: "Heat Gen 8",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "laser-duration-2",
    centerChildId: "cooldown-13"
  }, { name: "Missile Rack 1",
    attribute: "Missile Ammo",
    value: "1",
    rightChildId: "cooldown-12"
  }, { name: "Magazine Capacity 1",
    attribute: "Ballistic Ammo",
    value: "8",
    leftChildId: "cooldown-12"
  }, { name: "Heat Gen 9",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "cooldown-14",
    rightChildId: "laser-duration-3"
  }, { name: "Gauss Charge 2",
    attribute: "Gauss Held Time",
    value: "0.5",
    leftChildId: "laser-duration-3"
  }, { name: "Cooldown 11",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "magazine-capacity-2"
  }, { name: "Missile Rack 2",
    attribute: "Missile Ammo",
    value: "1"
  }, { name: "Laser Duration 2",
    attribute: "Laser Duration",
    value: "3.75",
    rightChildId: "cooldown-13"
  }, { name: "Cooldown 12",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-15",
    rightChildId: "velocity-5"
  }, { name: "Laser Duration 3",
    attribute: "Laser Duration",
    value: "3.75",
    leftChildId: "cooldown-14"
  }, { name: "Magazine Capacity 2",
    attribute: "Ballistic Ammo",
    value: "8"
  }, { name: "Cooldown 13",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-10",
    rightChildId: "heat-gen-11"
  }, { name: "Range 15",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "heat-gen-11",
    rightChildId: "cooldown-15"
  }, { name: "Velocity 5",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "cooldown-15",
    rightChildId: "heat-gen-12"
  }, { name: "Cooldown 14",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-12",
    rightChildId: "cooldown-16"
  }, { name: "Heat Gen 10",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }, { name: "Heat Gen 11",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "heat-gen-13"
  }, { name: "Cooldown 15",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "missile-spread-2",
    centerChildId: "laser-duration-4",
    rightChildId: "uac-jam-chance-2"
  }, { name: "Heat Gen 12",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "heat-gen-14",
    rightChildId: "lbx-spread-2"
  }, { name: "Cooldown 16",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "lbx-spread-2"
  }, { name: "Missile Spread 2",
    attribute: "Missile Spread",
    value: "2.5"
  }, { name: "UAC Jam Chance 2",
    attribute: "UAC Jam Chance",
    value: "2.5"
  }, { name: "LBX Spread 2",
    attribute: "LBX Spread",
    value: "5"
  }, { name: "Heat Gen 13",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }, { name: "Laser Duration 4",
    attribute: "Laser Duration",
    value: "3.75"
  }, { name: "Heat Gen 14",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }]
},
/*
==========================================
                SURVIVAL
==========================================
*/
{
  name: 'Survival',
  nodes: [{ name: "Reinforced Casing 1",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "shock-absorbance-1",
    rightChildId: "ams-overload-1"
  }, { name: "Shock Absorbance 1",
    attribute: "Fall Damage",
    value: "10",
    centerChildId: "reinforced-casing-2",
    rightChildId: "skeletal-density-1"
  }, { name: "AMS Overload 1",
    attribute: "AMS Effectiveness",
    value: "1.25",
    leftChildId: "skeletal-density-1",
    centerChildId: "reinforced-casing-3"
  }, { name: "Skeletal Density 1",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-2",
    rightChildId: "reinforced-casing-3"
  }, { name: "Reinforced Casing 2",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-1",
    centerChildId: "ams-overload-2"
  }, { name: "Reinforced Casing 3",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "shock-absorbance-3",
    rightChildId: "skeletal-density-2"
  }, { name: "Armor Hardening 1",
    attribute: "Armor",
    value: "1.6",
    leftChildId: "shock-absorbance-2",
    centerChildId: "skeletal-density-3",
    rightChildId: "ams-overload-2"
  }, { name: "Skeletal Density 2",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "shock-absorbance-3",
    centerChildId: "reinforced-casing-4",
    rightChildId: "shock-absorbance-4"
  }, { name: "Shock Absorbance 2",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "armor-hardening-2",
    rightChildId: "skeletal-density-3"
  }, { name: "AMS Overload 2",
    attribute: "AMS Effectiveness",
    value: "1.25",
    leftChildId: "skeletal-density-3",
    rightChildId: "skeletal-density-4"
  }, { name: "Shock Absorbance 3",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "skeletal-density-4",
    rightChildId: "reinforced-casing-4"
  }, { name: "Shock Absorbance 4",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "reinforced-casing-4",
    rightChildId: "armor-hardening-3"
  }, { name: "Armor Hardening 2",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "reinforced-casing-5"
  }, { name: "Skeletal Density 3",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-5",
    centerChildId: "armor-hardening-5"
  }, { name: "Skeletal Density 4",
    attribute: "Internal Structure",
    value: "3.1",
    centerChildId: "skeletal-density-5"
  }, { name: "Reinforced Casing 4",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "skeletal-density-6",
    rightChildId: "reinforced-casing-7"
  }, { name: "Armor Hardening 3",
    attribute: "Armor",
    value: "1.6",
    leftChildId: "reinforced-casing-7"
  }, { name: "Reinforced Casing 5",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-4",
    rightChildId: "armor-hardening-5"
  }, { name: "Reinforced Casing 7",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "skeletal-density-6",
    rightChildId: "skeletal-density-7"
  }, { name: "Armor Hardening 4",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 5",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "reinforced-casing-6"
  }, { name: "Skeletal Density 5",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-6",
    rightChildId: "reinforced-casing-8"
  }, { name: "Skeletal Density 6",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-8"
  }, { name: "Skeletal Density 7",
    attribute: "Internal Structure",
    value: "3.1"
  }, { name: "Reinforced Casing 6",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-6",
    centerChildId: "skeletal-density-9"
  }, { name: "Reinforced Casing 8",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "skeletal-density-10",
    rightChildId: "skeletal-density-8"
  }, { name: "Armor Hardening 6",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "skeletal-density-9"
  }, { name: "Skeletal Density 8",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "skeletal-density-10"
  }, { name: "Skeletal Density 9",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "armor-hardening-7",
    rightChildId: "shock-absorbance-5"
  }, { name: "Skeletal Density 10",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "shock-absorbance-5",
    rightChildId: "armor-hardening-8"
  }, { name: "Armor Hardening 7",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Shock Absorbance 5",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "armor-hardening-9",
    rightChildId: "armor-hardening-10"
  }, { name: "Armor Hardening 8",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 9",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 10",
    attribute: "Armor",
    value: "1.6"
  }]
},
/*
==========================================
                  MOBiLITY
==========================================
*/
{
  name: 'Mobility',
  nodes: [{ name: "Kinetic Burst 1",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-yaw-1",
    rightChildId: "hard-brake-1"
  }, { name: "Torso Yaw 1",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "hard-brake-2",
    rightChildId: "kinetic-burst-2"
  }, { name: "Hard Brake 1",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-2",
    rightChildId: "torso-yaw-2"
  }, { name: "Hard Brake 2",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-1",
    rightChildId: "torso-yaw-3"
  }, { name: "Kinetic Burst 2",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-yaw-3",
    rightChildId: "hard-brake-3"
  }, { name: "Torso Yaw 2",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "hard-brake-3",
    rightChildId: "anchor-turn-1"
  }, { name: "Torso Speed 1",
    attribute: "Torso Twist Speed",
    value: "3.5"
  }, { name: "Torso Yaw 3",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "kinetic-burst-3",
    centerChildId: "torso-yaw-4"
  }, { name: "Hard Brake 3",
    attribute: "Deceleration",
    value: "3.5",
    centerChildId: "kinetic-burst-5",
    rightChildId: "kinetic-burst-4"
  }, { name: "Anchor Turn 1",
    attribute: "Turn Speed",
    value: "5"
  }, { name: "Kinetic Burst 3",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "hard-brake-4",
    rightChildId: "torso-yaw-4"
  }, { name: "Kinetic Burst 4",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-5",
    rightChildId: "kinetic-burst-6"
  }, { name: "Hard Brake 4",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-2",
    rightChildId: "torso-speed-3"
  }, { name: "Torso Yaw 4",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "torso-speed-3",
    rightChildId: "torso-pitch-1"
  }, { name: "Kinetic Burst 5",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-pitch-1",
    rightChildId: "kinetic-burst-7"
  }, { name: "Kinetic Burst 6",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-7",
    rightChildId: "hard-brake-5"
  }, { name: "Torso Speed 2",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-yaw-5"
  }, { name: "Torso Speed 3",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-pitch-2"
  }, { name: "Torso Pitch 1",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "torso-pitch-2",
    rightChildId: "torso-pitch-3"
  }, { name: "Kinetic Burst 7",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-pitch-3"
  }, { name: "Hard Brake 5",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "anchor-turn-2"
  }, { name: "Torso Yaw 5",
    attribute: "Max Torso Twist",
    value: "2",
    rightChildId: "hard-brake-6"
  }, { name: "Torso Pitch 2",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "hard-brake-6"
  }, { name: "Torso Pitch 3",
    attribute: "Max Torso Inclination",
    value: "2",
    rightChildId: "hard-brake-7"
  }, { name: "Anchor Turn 2",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "hard-brake-7"
  }, { name: "Hard Brake 6",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "anchor-turn-3",
    rightChildId: "torso-speed-4"
  }, { name: "Hard Brake 7",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-5",
    rightChildId: "anchor-turn-4"
  }, { name: "Anchor Turn 3",
    attribute: "Turn Speed",
    value: "5",
    rightChildId: "torso-pitch-4"
  }, { name: "Torso Speed 4",
    attribute: "Torso Twist Speed",
    value: "3.5",
    leftChildId: "torso-pitch-4"
  }, { name: "Torso Speed 5",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-pitch-5"
  }, { name: "Anchor Turn 4",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "torso-pitch-5"
  }, { name: "Torso Pitch 4",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "speed-tweak-1",
    centerChildId: "torso-speed-6"
  }, { name: "Torso Pitch 5",
    attribute: "Max Torso Inclination",
    value: "2",
    centerChildId: "anchor-turn-5",
    rightChildId: "speed-tweak-2"
  }, { name: "Speed Tweak 1",
    attribute: "Max Speed",
    value: "1.5",
    rightChildId: "torso-speed-6"
  }, { name: "Speed Tweak 2",
    attribute: "Max Speed",
    value: "1.5",
    leftChildId: "anchor-turn-5"
  }, { name: "Torso Speed 6",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "speed-tweak-3"
  }, { name: "Anchor Turn 5",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "speed-tweak-4"
  }, { name: "Speed Tweak 3",
    attribute: "Max Speed",
    value: "1.5",
    rightChildId: "speed-tweak-5"
  }, { name: "Speed Tweak 4",
    attribute: "Max Speed",
    value: "1.5",
    leftChildId: "speed-tweak-5"
  }, { name: "Speed Tweak 5",
    attribute: "Max Speed",
    value: "1.5"
  }]
},
/*
==========================================
                JUMP JETS
==========================================
*/
{
  name: "Jump Jets",
  nodes: [{ name: "Heat Shielding 1",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-1",
    rightChildId: "vectoring-1"
  }, { name: "Vent Calibration 1",
    attribute: "Jump Jet Burn Time",
    value: "3",
    centerChildId: "vent-calibration-2",
    rightChildId: "heat-shielding-2"
  }, { name: "Vectoring 1",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-2",
    centerChildId: "vectoring-2",
    rightChildId: "lift-speed-1"
  }, { name: "Heat Shielding 2",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-2",
    rightChildId: "vectoring-2"
  }, { name: "Lift Speed 1",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    leftChildId: "vectoring-2"
  }, { name: "Vent Calibration 2",
    attribute: "Jump Jet Burn Time",
    value: "3",
    centerChildId: "vent-calibration-3",
    rightChildId: "heat-shielding-3"
  }, { name: "Vectoring 2",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-3",
    centerChildId: "vectoring-3",
    rightChildId: "lift-speed-2"
  }, { name: "Heat Shielding 3",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-3",
    rightChildId: "vectoring-3"
  }, { name: "Lift Speed 2",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    leftChildId: "vectoring-3"
  }, { name: "Vent Calibration 3",
    attribute: "Jump Jet Burn Time",
    value: "3",
    leftChildId: "lift-speed-3",
    centerChildId: "vent-calibration-4",
    rightChildId: "heat-shielding-4"
  }, { name: "Vectoring 3",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-4",
    centerChildId: "vectoring-4"
  }, { name: "Lift Speed 3",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    rightChildId: "vent-calibration-4"
  }, { name: "Heat Shielding 4",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-4",
    rightChildId: "vectoring-4"
  }, { name: "Vent Calibration 4",
    attribute: "Jump Jet Burn Time",
    value: "3",
    leftChildId: "lift-speed-4",
    centerChildId: "vent-calibration-5",
    rightChildId: "heat-shielding-5"
  }, { name: "Vectoring 4",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-5",
    centerChildId: "vectoring-5"
  }, { name: "Lift Speed 4",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    rightChildId: "vent-calibration-5"
  }, { name: "Heat Shielding 5",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-5",
    rightChildId: "vectoring-5"
  }, { name: "Vent Calibration 5",
    attribute: "Jump Jet Burn Time",
    value: "3"
  }, { name: "Vectoring 5",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "lift-speed-5"
  }, { name: "Lift Speed 5",
    attribute: "Jump Jet Initial Boost",
    value: "3"
  }]
},
/*
==========================================
               OPERATIONS
==========================================
*/
{
  name: "Operations",
  nodes: [{ name: "Quick Ignition 1",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "speed-retention-1",
    rightChildId: "improved-gyros-1"
  }, { name: "Speed Retention 1",
    attribute: "Legged Speed",
    value: "10",
    centerChildId: "hill-climb-1",
    rightChildId: "heat-containment-1"
  }, { name: "Improved Gyros 1",
    attribute: "Tastier Gyros",
    value: "17.5",
    leftChildId: "heat-containment-1",
    centerChildId: "improved-gyros-2"
  }, { name: "Heat Containment 1",
    attribute: "Heat Capacity",
    value: "3",
    leftChildId: "hill-climb-1",
    rightChildId: "improved-gyros-2"
  }, { name: "Hill Climb 1",
    attribute: "Hill Climb",
    value: "5",
    leftChildId: "heat-containment-2",
    centerChildId: "hill-climb-2"
  }, { name: "Improved Gyros 2",
    attribute: "Tastier Gyros",
    value: "17.5",
    centerChildId: "speed-retention-2",
    rightChildId: "heat-containment-3"
  }, { name: "Heat Containment 2",
    attribute: "Heat Capacity",
    value: "3",
    leftChildId: "cool-run-1",
    centerChildId: "quick-ignition-2"
  }, { name: "Heat Containment 3",
    attribute: "Heat Capacity",
    value: "3",
    centerChildId: "quick-ignition-3",
    rightChildId: "cool-run-2"
  }, { name: "Cool Run 1",
    attribute: "Heat Dissipation",
    value: "2",
    rightChildId: "quick-ignition-2"
  }, { name: "Hill Climb 2",
    attribute: "Hill Climb",
    value: "5",
    centerChildId: "hill-climb-3",
    rightChildId: "cool-run-3"
  }, { name: "Speed Retention 2",
    attribute: "Legged Speed",
    value: "10",
    leftChildId: "cool-run-3",
    centerChildId: "improved-gyros-3"
  }, { name: "Cool Run 2",
    attribute: "Heat Dissipation",
    value: "2",
    leftChildId: "quick-ignition-3"
  }, { name: "Quick Ignition 2",
    attribute: "Startup Speed",
    value: "7",
    rightChildId: "hill-climb-3"
  }, { name: "Cool Run 3",
    attribute: "Heat Dissipation",
    value: "2",
    leftChildId: "hill-climb-3",
    rightChildId: "improved-gyros-3"
  }, { name: "Quick Ignition 3",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "improved-gyros-3"
  }, { name: "Hill Climb 3",
    attribute: "Hill Climb",
    value: "5",
    leftChildId: "heat-containment-4",
    rightChildId: "quick-ignition-4"
  }, { name: "Improved Gyros 3",
    attribute: "Tastier Gyros",
    value: "17.5",
    leftChildId: "quick-ignition-4",
    rightChildId: "heat-containment-5"
  }, { name: "Heat Containment 4",
    attribute: "Heat Capacity",
    value: "3"
  }, { name: "Quick Ignition 4",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "improved-gyros-4",
    rightChildId: "speed-retention-3"
  }, { name: "Heat Containment 5",
    attribute: "Heat Capacity",
    value: "3"
  }, { name: "Improved Gyros 4",
    attribute: "Tastier Gyros",
    value: "17.5",
    rightChildId: "quick-ignition-5"
  }, { name: "Speed Retention 3",
    attribute: "Legged Speed",
    value: "10",
    leftChildId: "quick-ignition-5"
  }, { name: "Quick Ignition 5",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "cool-run-4",
    rightChildId: "cool-run-5"
  }, { name: "Cool Run 4",
    attribute: "Heat Dissipation",
    value: "2"
  }, { name: "Cool Run 5",
    attribute: "Heat Dissipation",
    value: "2"
  }]
},
/*
==========================================
                 SENSORS
==========================================
*/
{
  name: "Sensors",
  nodes: [{ name: "Target Info Gathering 1",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "target-decay-1",
    rightChildId: "sensor-range-1"
  }, { name: "Target Decay 1",
    attribute: "Target Lock Decay",
    value: "0.7",
    leftChildId: "target-retention-1",
    centerChildId: "target-info-gathering-3",
    rightChildId: "sensor-range-2"
  }, { name: "Sensor Range 1",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "sensor-range-2",
    centerChildId: "sensor-range-3",
    rightChildId: "target-info-gathering-2"
  }, { name: "Target Retention 1",
    attribute: "Target Retention",
    value: "200"
  }, { name: "Sensor Range 2",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-info-gathering-3",
    rightChildId: "sensor-range-3"
  }, { name: "Target Info Gathering 2",
    attribute: "Target Info Speed",
    value: "7",
    rightChildId: "advanced-zoom"
  }, { name: "Target Info Gathering 3",
    attribute: "Target Info Speed",
    value: "7",
    centerChildId: "target-info-gathering-4",
    rightChildId: "target-decay-2"
  }, { name: "Sensor Range 3",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-decay-2",
    centerChildId: "target-retention-2"
  }, { name: "Advanced Zoom",
    attribute: "Zoom Magnifier",
    value: "1"
  }, { name: "Target Decay 2",
    attribute: "Target Lock Decay",
    value: "0.7"
  }, { name: "Target Info Gathering 4",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "radar-deprivation-1",
    centerChildId: "sensor-range-4"
  }, { name: "Target Retention 2",
    attribute: "Target Retention",
    value: "200",
    centerChildId: "sensor-range-5",
    rightChildId: "target-decay-3"
  }, { name: "Radar Deprivation 1",
    attribute: "Radar Deprivation",
    value: "20"
  }, { name: "Target Decay 3",
    attribute: "Target Lock Decay",
    value: "0.7",
    rightChildId: "seismic-sensor-1"
  }, { name: "Sensor Range 4",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "radar-deprivation-2",
    centerChildId: "target-info-gathering-5",
    rightChildId: "target-decay-4"
  }, { name: "Sensor Range 5",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-decay-4",
    centerChildId: "target-decay-5",
    rightChildId: "radar-deprivation-3"
  }, { name: "Seismic Sensor 1",
    attribute: "Seismic Sensor",
    value: "100"
  }, { name: "Radar Deprivation 2",
    attribute: "Radar Deprivation",
    value: "20",
    leftChildId: "enhanced-ecm-1"
  }, { name: "Target Decay 4",
    attribute: "Target Lock Decay",
    value: "0.7"
  }, { name: "Radar Deprivation 3",
    attribute: "Radar Deprivation",
    value: "20",
    rightChildId: "enhanced-ecm-2"
  }, { name: "Enhanced ECM 1",
    attribute: "ECM Range",
    value: "22.5"
  }, { name: "Target Info Gathering 5",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "seismic-sensor-2",
    rightChildId: "radar-deprivation-4"
  }, { name: "Target Decay 5",
    attribute: "Target Lock Decay",
    value: "0.7",
    rightChildId: "radar-deprivation-5"
  }, { name: "Enhanced ECM 2",
    attribute: "ECM Range",
    value: "22.5"
  }, { name: "Seismic Sensor 2",
    attribute: "Seismic Sensor",
    value: "100"
  }, { name: "Radar Deprivation 4",
    attribute: "Radar Deprivation",
    value: "20"
  }, { name: "Radar Deprivation 5",
    attribute: "Radar Deprivation",
    value: "20"
  }]
},
/*
==========================================
                AUXILIARY
==========================================
*/
{
  name: "Auxiliary",
  nodes: [{ name: "Consumable Slot 1",
    attribute: "Consumable Slots",
    value: "1",
    leftChildId: "uav-duration",
    rightChildId: "adv.-salvos-1"
  }, { name: "UAV Duration",
    attribute: "UAV Duration",
    value: "10",
    leftChildId: "uav-range-1",
    centerChildId: "capture-assist-1",
    rightChildId: "enhanced-coolshot-1"
  }, { name: "ADV. Salvos 1",
    attribute: "Artillery Strike Duration",
    value: "25",
    leftChildId: "enhanced-coolshot-1",
    centerChildId: "capture-assist-2",
    rightChildId: "adv.-salvos-2"
  }, { name: "UAV Range 1",
    attribute: "UAV Sight Range",
    value: "20",
    leftChildId: "extra-uav",
    centerChildId: "enhanced-narc-1"
  }, { name: "Enhanced Coolshot 1",
    attribute: "Coolshot Effectiveness",
    value: "25",
    leftChildId: "capture-assist-1",
    centerChildId: "enhanced-coolshot-2",
    rightChildId: "capture-assist-2"
  }, { name: "ADV. Salvos 2",
    attribute: "Artillery Strike Duration",
    value: "25",
    centerChildId: "enhanced-narc-2",
    rightChildId: "expanded-reserves"
  }, { name: "Extra UAV",
    attribute: "UAV Capacity",
    value: "1",
    leftChildId: "uav-range-2",
    centerChildId: "consumable-slot-2"
  }, { name: "Capture Assist 1",
    attribute: "Point Capture Speed",
    value: "5",
    leftChildId: "enhanced-narc-1",
    centerChildId: "capture-assist-3",
    rightChildId: "enhanced-coolshot-2"
  }, { name: "Capture Assist 2",
    attribute: "Point Capture Speed",
    value: "5",
    leftChildId: "enhanced-coolshot-2",
    centerChildId: "capture-assist-4",
    rightChildId: "enhanced-narc-2"
  }, { name: "Expanded Reserves",
    attribute: "Additional Air/Arty Strike",
    value: "1",
    centerChildId: "consumable-slot-3",
    rightChildId: "enhanced-spotting"
  }, { name: "UAV Range 2",
    attribute: "UAV Sight Range",
    value: "20"
  }, { name: "Enhanced NARC 1",
    attribute: "NARC Velocity and Duration",
    value: "10",
    rightChildId: "capture-assist-3"
  }, { name: "Enhanced Coolshot 2",
    attribute: "Coolshot Effectiveness",
    value: "25",
    leftChildId: "capture-assist-3",
    centerChildId: "coolant-reserves",
    rightChildId: "capture-assist-4"
  }, { name: "Enhanced NARC 2",
    attribute: "NARC Velocity and Duration",
    value: "10",
    leftChildId: "capture-assist-4"
  }, { name: "Enhanced Spotting",
    attribute: "Air/Arty Strike Accuracy",
    value: "20"
  }, { name: "Consumable Slot 2",
    attribute: "Additional Consumable Slot",
    value: "1"
  }, { name: "Capture Assist 3",
    attribute: "Rate of Capture",
    value: "5"
  }, { name: "Capture Assist 4",
    attribute: "Rate of Capture",
    value: "5"
  }, { name: "Consumable Slot 3",
    attribute: "Additional Consumable Slot",
    value: "1"
  }, { name: "Coolant Reserves",
    attribute: "Coolant Reserves",
    value: "1",
    leftChildId: "coolshot-cooldown",
    rightChildId: "consumable-slot-4"
  }, { name: "Coolshot Cooldown",
    attribute: "Coolshot Cooldown",
    value: "25"
  }, { name: "Consumable Slot 4",
    attribute: "Additional Consumable Slot",
    value: "1"
  }]
}];

var attributeTemplateMap = [{ attribute: "Weapon Range",
  template: "+{}%"
}, { attribute: "Laser Duration",
  template: "-{}%"
}, { attribute: "Weapon Velocity",
  template: "+{}%"
}, { attribute: "Weapon Cooldown",
  template: "-{}%"
}, { attribute: "Missile Crit Damage",
  template: "+{}%"
}, { attribute: "Gauss Held Time",
  template: "+{} sec."
}, { attribute: "Armor",
  template: "+{}%"
}, { attribute: "AMS Effectiveness",
  template: "+{}%"
}, { attribute: "Weapon Heat Gen",
  template: "-{}%"
}, { attribute: "Ballistic Ammo",
  template: "+{}"
}, { attribute: "Missile Ammo",
  template: "+{}"
}, { attribute: "Missile Spread",
  template: "+{}%"
}, { attribute: "LBX Spread",
  template: "-{}%"
}, { attribute: "Fall Damage",
  template: "-{}%"
}, { attribute: "UAC Jam Chance",
  template: "-{}%"
}, { attribute: "Crit Chance (Received)",
  template: "-{}%"
}, { attribute: "Internal Structure",
  template: "+{}%"
}, { attribute: "Acceleration",
  template: "+{}%"
}, { attribute: "Deceleration",
  template: "+{}%"
}, { attribute: "Max Torso Inclination",
  template: "+{}%"
}, { attribute: "Max Arm Inclination",
  template: "+{}%"
}, { attribute: "Torso Twist Speed",
  template: "+{}%"
}, { attribute: "Max Torso Twist",
  template: "+{}%"
}, { attribute: "Turn Speed",
  template: "+{}%"
}, { attribute: "Max Speed",
  template: "+{}%"
}, { attribute: "Jump Jet Heat Reduction",
  template: "-{}%"
}, { attribute: "Jump Jet Initial Boost",
  template: "+{}%"
}, { attribute: "Jump Jet Forward Thrust",
  template: "+{}%"
}, { attribute: "Jump Jet Burn Time",
  template: "+{}%"
}, { attribute: "Tastier Gyros",
  template: "-{}%"
}, { attribute: "Startup Speed",
  template: "-{}%"
}, { attribute: "Legged Speed",
  template: "+{}%"
}, { attribute: "Heat Capacity",
  template: "+{}%"
}, { attribute: "Hill Climb",
  template: "+{}%"
}, { attribute: "Heat Dissipation",
  template: "+{}%"
}, { attribute: "Target Info Speed",
  template: "+{}%"
}, { attribute: "Target Retention",
  template: "+{} m."
}, { attribute: "Sensor Range",
  template: "+{}%"
}, { attribute: "Target Lock Decay",
  template: "+{} sec."
}, { attribute: "Zoom Magnifier",
  template: "+{}"
}, { attribute: "Radar Deprivation",
  template: "+{}%"
}, { attribute: "Seismic Sensor",
  template: "{} m."
}, { attribute: "ECM Range",
  template: "+{}%"
}, { attribute: "Consumable Slots",
  template: "+{}"
}, { attribute: "UAV Duration",
  template: "+{} sec."
}, { attribute: "UAV Sight Range",
  template: "+{}%"
}, { attribute: "Artillery Strike Duration",
  template: "+{}%"
}, { attribute: "Coolshot Effectiveness",
  template: "+{}%"
}, { attribute: "UAV Capacity",
  template: "+{}"
}, { attribute: "Point Capture Speed",
  template: "+{}%"
}, { attribute: "NARC Velocity and Duration",
  template: "+{}%"
}, { attribute: "Additional Air/Arty Strike",
  template: "+{}"
}, { attribute: "Air/Arty Strike Accuracy",
  template: "-{}%"
}, { attribute: "Additional Consumable Slot",
  template: "+{}"
}, { attribute: "Rate of Capture",
  template: "+{}%"
}, { attribute: "Coolant Reserves",
  template: "+{}"
}, { attribute: "Coolshot Cooldown",
  template: "-{}%"
}];

var highlightedNodesArray = [];
var detachedNodesCounter = 0;

function Node(newName, newAttribute, newValue, newValueTemplate, newId, newLeftChildId, newCenterChildId, newRightChildId) {
  var selected = false;
  var highlighted = false;

  this.name = newName;
  this.attribute = newAttribute;
  this.value = newValue;
  this.valueTemplate = newValueTemplate;
  this.id = newId;

  this.leftChildId = newLeftChildId, this.centerChildId = newCenterChildId, this.rightChildId = newRightChildId;
  this.parents = [];
  this.children = [];
  this.selected = selected;
  this.highlighted = highlighted;

  this.inDetachedSubTreeValue = false;
  this.inDetachedSubTree = function () {
    return this.inDetachedSubTreeValue;
  };
  this.markAsAttached = function () {
    if (this.inDetachedSubTreeValue) {
      --detachedNodesCounter;
      this.inDetachedSubTreeValue = false;
      detachedNodesCounterUpdated();
    }
  };
  this.markAsDetached = function () {
    if (!this.inDetachedSubTreeValue) {
      ++detachedNodesCounter;
      this.inDetachedSubTreeValue = true;
      detachedNodesCounterUpdated();
    }
  };
  /*  
      // public interface
    return {
      
      inDetachedSubTree: inDetachedSubTree,
      markAsAttached: markAsAttached,
      markAsDetached: markAsDetached
  */
}

function selectNode(value, node) {
  //    console.log("nodeName " + node.name + " highlighted state is " + node.hightlighted);
  node.selected = value;
  if (value == false) {
    node.markAsAttached();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = node.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var childNode = _step.value;

        if (childNode.selected && !childNode.inDetachedSubTree()) {
          childNode.markAsDetached();
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = childNode.parents[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var parentNode = _step2.value;

              if (parentNode.selected && !parentNode.inDetachedSubTree()) {
                childNode.markAsAttached();
                break;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          if (childNode.inDetachedSubTree()) {
            propagateDetachment(childNode);
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else {
    if (!node.inDetachedSubTree()) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = node.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _childNode = _step3.value;

          if (_childNode.inDetachedSubTree()) {
            _childNode.markAsAttached();
            propagateAttachment(_childNode);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }
  updateNodeColor(node);

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = node.children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var child = _step4.value;

      updateNodeColor(child);
      //update color for other parents of children, so available ones for deselection before become locked if required.
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = child.parents[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var childParentNode = _step6.value;

          if (childParentNode != node) {
            updateNodeColor(childParentNode);
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = node.parents[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var parent = _step5.value;

      updateNodeColor(parent);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }
}

function propagateAttachment(node) {
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = node.children[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var childNode = _step7.value;

      if (childNode.inDetachedSubTree()) {
        childNode.markAsAttached();
        updateNodeColor(childNode);
        propagateAttachment(childNode);
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }
}

function propagateDetachment(node) {
  var _iteratorNormalCompletion8 = true;
  var _didIteratorError8 = false;
  var _iteratorError8 = undefined;

  try {
    for (var _iterator8 = node.children[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
      var childNode = _step8.value;

      if (childNode.selected && !childNode.inDetachedSubTree()) {
        childNode.markAsDetached();
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = childNode.parents[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var parentNode = _step9.value;

            if (parentNode.selected && !parentNode.inDetachedSubTree()) {
              childNode.markAsAttached();
              break;
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        if (childNode.inDetachedSubTree()) {
          updateNodeColor(childNode);
          propagateDetachment(childNode);
        }
      }
    }
  } catch (err) {
    _didIteratorError8 = true;
    _iteratorError8 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion8 && _iterator8.return) {
        _iterator8.return();
      }
    } finally {
      if (_didIteratorError8) {
        throw _iteratorError8;
      }
    }
  }
}

function highlightNode(node) {
  if (node) {
    node.highlighted = true;
    updateNodeColor(node);
    highlightedNodesArray.push(node);
  }
}

function markAsAttachedRecursively(currentNodes) {
  var nextLevelNodes = [];
  var _iteratorNormalCompletion10 = true;
  var _didIteratorError10 = false;
  var _iteratorError10 = undefined;

  try {
    for (var _iterator10 = currentNodes[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
      var currentNode = _step10.value;

      if (!currentNode.selected) {
        continue;
      }
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        for (var _iterator11 = currentNode.parents[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          var parentNode = _step11.value;

          if (parentNode.selected && !parentNode.inDetachedSubTree()) {
            currentNode.markAsAttached();
            nextLevelNodes = nextLevelNodes.concat(currentNode.children);
            break;
          }
        }
      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11.return) {
            _iterator11.return();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError10 = true;
    _iteratorError10 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion10 && _iterator10.return) {
        _iterator10.return();
      }
    } finally {
      if (_didIteratorError10) {
        throw _iteratorError10;
      }
    }
  }

  if (nextLevelNodes.length > 0) {
    markAsAttachedRecursively(nextLevelNodes);
  }
}

//visual methods

function updateNodeColor(node) {
  var mode = "";
  if (node.highlighted) {
    mode = node.selected ? "highlightedSelected" : "highlightedNotSelected";
  } else {
    if (node.selected) {
      if (safeToDeselect(node)) {
        mode = "selected";
      } else {
        mode = "locked";
      }
    } else {
      if (allowFreeNodeSelection == false && nodeAvailableForSelection(node) || node.parents.length == 0) {
        mode = "available";
      } else {
        mode = "unavailable";
      }
    }
  }
  if (mode.length > 0) {
    //      console.log(node.name + " mode " + mode + " selected " + node.selected + " high " + node.highlighted);
    setNodeElementColors(node, mode);
  } else {
    console.log("Can't determinate node color (mode) for " + node.name + " " + node.id);
  }
}

function nodeAvailableForSelection(node) {
  var parentIsSelected = false;
  var _iteratorNormalCompletion12 = true;
  var _didIteratorError12 = false;
  var _iteratorError12 = undefined;

  try {
    for (var _iterator12 = node.parents[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
      var parentNode = _step12.value;

      parentIsSelected = parentNode.selected && !parentNode.inDetachedSubTree() || parentIsSelected;
    }
  } catch (err) {
    _didIteratorError12 = true;
    _iteratorError12 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion12 && _iterator12.return) {
        _iterator12.return();
      }
    } finally {
      if (_didIteratorError12) {
        throw _iteratorError12;
      }
    }
  }

  parentIsSelected = parentIsSelected || node.parents.length === 0;
  return parentIsSelected;
}

function setNodeElementColors(node, state) {
  document.getElementById(node.id).querySelectorAll(".node-element").forEach(function (element) {
    removeNodeClasses(element);
    element.classList.add(state);
  });
  var borderElement = "attached";
  if (node.selected && node.inDetachedSubTree()) {
    borderElement = "detached";
  }
  document.getElementById(node.id).querySelectorAll(".hex-component").forEach(function (element) {
    element.classList.remove("attached");
    element.classList.remove("detached");
    element.classList.add(borderElement);
  });
}

function safeToDeselect(node) {
  var safeToDeselect = true;
  var _iteratorNormalCompletion13 = true;
  var _didIteratorError13 = false;
  var _iteratorError13 = undefined;

  try {
    for (var _iterator13 = node.children[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
      var child = _step13.value;

      if (child.selected) {
        // Set node in question to deselected to see if the chlid is still elegible for selection
        // based on other parents.  We"ll set it back to selected after we"re done with that check.
        node.selected = false;
        safeToDeselect = nodeAvailableForSelection(child) && safeToDeselect;
        node.selected = true;
      }
    }
  } catch (err) {
    _didIteratorError13 = true;
    _iteratorError13 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion13 && _iterator13.return) {
        _iterator13.return();
      }
    } finally {
      if (_didIteratorError13) {
        throw _iteratorError13;
      }
    }
  }

  return safeToDeselect;
}

function removeNodeClasses(nodeElement) {
  nodeElement.classList.remove("selected");
  nodeElement.classList.remove("available");
  nodeElement.classList.remove("locked");
  nodeElement.classList.remove("unavailable");
  nodeElement.classList.remove("highlightedSelected");
  nodeElement.classList.remove("highlightedNotSelected");
}

var allowFreeNodeSelection = true;
var displayAllBonuses = false;

function detachedNodesCounterUpdated() {
  if (detachedNodesCounter > 0) {
    document.getElementById("deselect-detached-nodes-button").classList.remove("hide");
  } else {
    document.getElementById("deselect-detached-nodes-button").classList.add("hide");
  }
}

document.addEventListener("DOMContentLoaded", function () {

  var maxSkillNodes = 91;
  var cbillsPerNode = 45000;
  var xpPerNode = 800;

  var SkillTree = function () {

    var activeTreeName = treeSource[0].name;
    var skillTrees = buildSkillTrees(treeSource);

    function buildSkillTrees(treeSource$$1) {
      var skillTrees = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = treeSource$$1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var treeDef = _step.value;

          var skillTree = {};
          skillTree.name = treeDef.name;
          skillTree.nodes = [];
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = treeDef.nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var nodeDef = _step2.value;

              skillTree.nodes.push(new Node(nodeDef.name, nodeDef.attribute, parseFloat(nodeDef.value), nodeDef.valueTemplate, nodeNameToId(nodeDef.name), nodeDef.leftChildId, nodeDef.centerChildId, nodeDef.rightChildId));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          var rootNode = skillTree.nodes[0];
          buildDependences(skillTree.nodes, rootNode);
          skillTrees.push(skillTree);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return skillTrees;
    }

    function buildDependences(nodesList, currentNode) {

      var childrenQuantity = 0;
      {
        if (currentNode.leftChildId != undefined) {
          ++childrenQuantity;
        }
        if (currentNode.centerChildId != undefined) {
          ++childrenQuantity;
        }
        if (currentNode.rightChildId != undefined) {
          ++childrenQuantity;
        }
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = nodesList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var subnode = _step3.value;

          if (currentNode.children.length == childrenQuantity) {
            break;
          }
          if (subnode.id == currentNode.leftChildId || subnode.id == currentNode.centerChildId || subnode.id == currentNode.rightChildId) {
            currentNode.children.push(subnode);
            subnode.parents.push(currentNode);

            buildDependences(nodesList, subnode);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    function setActiveTreeName(newName) {
      activeTreeName = newName;
    }

    function getActiveTreeName() {
      return activeTreeName;
    }

    function getTree(treeName) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = trees[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var tree = _step4.value;

          if (tree.name = treeName) {
            return tree;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }

    function getTrees() {
      return skillTrees;
    }

    function getTree(treeName) {
      if (treeName == undefined) {
        return getTree(activeTreeName);
      } else {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = skillTrees[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var tree = _step5.value;

            if (tree.name == treeName) {
              return tree;
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }
    }

    function getNode(nodeId) {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = skillTrees[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var tree = _step6.value;
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = tree.nodes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var node = _step7.value;

              if (node.id == nodeId) {
                return node;
              }
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }

    function getNodeCount(treeName) {
      var nodeCount = 0;
      if (treeName != undefined) {
        return getTree(treeName).nodes.length;
      } else {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = skillTrees[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var tree = _step8.value;

            nodeCount = getNodeCount(tree.name);
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }
      return nodeCount;
    }

    function getSelectedNodes(treeName) {
      var selectedNodes = [];

      if (treeName != undefined) {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = getTree(treeName).nodes[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var node = _step9.value;

            if (node.selected) {
              selectedNodes.push(node);
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion10 = true;
        var _didIteratorError10 = false;
        var _iteratorError10 = undefined;

        try {
          for (var _iterator10 = skillTrees[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var skillTree = _step10.value;

            selectedNodes = selectedNodes.concat(getSelectedNodes(skillTree.name));
          }
        } catch (err) {
          _didIteratorError10 = true;
          _iteratorError10 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion10 && _iterator10.return) {
              _iterator10.return();
            }
          } finally {
            if (_didIteratorError10) {
              throw _iteratorError10;
            }
          }
        }
      }
      return selectedNodes;
    }

    function childrenOf(node) {
      var childNodes = [];
      pushIfDefined(childNodes, getNode(node.leftChildId));
      pushIfDefined(childNodes, getNode(node.centerChildId));
      pushIfDefined(childNodes, getNode(node.rightChildId));
      return childNodes;
    }

    function parentsOf(node) {
      var parentNodes = [];
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        for (var _iterator11 = skillTrees[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          var tree = _step11.value;
          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = tree.nodes[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var potentialParent = _step12.value;

              if (potentialParent.leftChildId == node.id || potentialParent.centerChildId == node.id || potentialParent.rightChildId == node.id) {
                parentNodes.push(potentialParent);
              }
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12.return) {
                _iterator12.return();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11.return) {
            _iterator11.return();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }

      return parentNodes;
    }

    function pushIfDefined(collection, node) {
      if (node !== undefined) {
        collection.push(node);
      }
    }

    // public interface
    return {
      getActiveTreeName: getActiveTreeName,
      setActiveTreeName: setActiveTreeName,
      getTree: getTree,
      getTrees: getTrees,
      getNode: getNode,
      getNodeCount: getNodeCount,
      getSelectedNodes: getSelectedNodes,
      parentsOf: parentsOf,
      childrenOf: childrenOf
    };
  }();

  function buildUI(trees) {
    trees.forEach(function (tree, index) {
      buildTab(tree, index);
      buildTreeDisplay(tree);
    });
    updateNodeCounters();
    document.getElementById("node-total").textContent = maxSkillNodes;
    document.getElementById(trees[0].name.toLowerCase() + "-tab").click();
  }

  buildUI(SkillTree.getTrees());

  function buildTab(tree, index) {
    var tabHeight = 40; // matches element height defined in planner.css
    var topOffset = 50;
    var tabElement = document.createElement("div");
    tabElement.id = stringToCss(tree.name + "-tab");
    tabElement.classList.add("tab");
    tabElement.style.top = 40 * index + 55 + "px";
    tabElement.textContent = tree.name;

    var counterElement = document.createElement("div");
    counterElement.id = tree.name.toLowerCase() + "-tab-counter";
    counterElement.classList.add("tab-counter");
    counterElement.textContent = "0 / " + SkillTree.getNodeCount(tree.name);
    tabElement.appendChild(counterElement);

    tabElement.addEventListener("click", function () {
      document.querySelectorAll(".tab").forEach(function (el) {
        el.classList.remove("selected");
      });
      tabElement.classList.add("selected");
      changeSkillTree(tree.name);
      if (!displayAllBonuses) {
        updateBonuses();
      }
    });

    document.getElementById("total-nodes-display").after(tabElement);
  }

  function buildTreeDisplay(tree) {
    var treeElement = document.createElement("div");
    treeElement.id = treeNameToId(tree.name);
    treeElement.classList.add("skill-tree");
    treeElement.classList.add("hide");
    document.getElementById("graph-view").appendChild(treeElement);

    // TODO: need to do something here to sort the node array.  Probably search it each
    // time you add a node and add the children of that node to a queue to be the next loaded

    var xOffset = 65;
    var yOffset = 38;
    var leftmostNodeElement = 0;
    var rightmostNodeElement = 0;

    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
      var _loop = function _loop() {
        var node = _step13.value;


        var nodeFrameElement = buildNodeElement(node);

        // the first element in nodes is the root node, so it starts available
        if (node == tree.nodes[0]) nodeFrameElement.querySelectorAll(".node-element").forEach(function (element) {
          element.classList.add("available");
        });else {
          nodeFrameElement.querySelectorAll(".node-element").forEach(function (element) {
            element.classList.add("unavailable");
          });
        }
        nodeFrameElement.querySelectorAll(".hex-component").forEach(function (element) {
          element.classList.add("attached");
        });

        var parent = node.parents[0];
        if (parent != undefined) {
          var relativeChildPostiion = getRelativeChildPosition(parent, node.id);
          var parentElement = document.getElementById(parent.id);

          var parentTop = dimensionAsNumber(parentElement.style.top);
          var parentLeft = dimensionAsNumber(parentElement.style.left);
          if (relativeChildPostiion == "left") {
            nodeFrameElement.style.top = parentTop + yOffset + "px";
            nodeFrameElement.style.left = parentLeft - xOffset + "px";
          } else if (relativeChildPostiion == "right") {
            nodeFrameElement.style.top = parentTop + yOffset + "px";
            nodeFrameElement.style.left = parentLeft + xOffset + "px";
          } else {
            nodeFrameElement.style.top = parentTop + yOffset * 2 + "px";
            nodeFrameElement.style.left = parentLeft + "px";
          }
        } else {
          nodeFrameElement.style.top = "25px";
          nodeFrameElement.style.left = "26px";
        }

        var leftPosition = dimensionAsNumber(nodeFrameElement.style.left);
        if (leftPosition < leftmostNodeElement) {
          leftmostNodeElement = leftPosition;
        }
        if (leftPosition > rightmostNodeElement) {
          rightmostNodeElement = leftPosition;
        }

        treeElement.appendChild(nodeFrameElement);

        nodeFrameElement.addEventListener("click", function (e) {
          nodeClicked(node, e);
        });
        nodeFrameElement.addEventListener("mouseover", function (e) {
          nodeHovered(node, e);
        });
        nodeFrameElement.addEventListener("mouseout", function () {
          nodeUnHovered(node);
        });
      };

      for (var _iterator13 = tree.nodes[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError13 = true;
      _iteratorError13 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion13 && _iterator13.return) {
          _iterator13.return();
        }
      } finally {
        if (_didIteratorError13) {
          throw _iteratorError13;
        }
      }
    }

    var nodeWidth = 52; // width of a graph node, per planner.css
    var padding = 25; // "padding" here rather than in css because "absolute" positioning of the
    // node elements throws off alignment of css padding
    var treeWidth = rightmostNodeElement - leftmostNodeElement + nodeWidth + padding * 2;
    treeElement.style.width = treeWidth + "px";
    document.getElementById(treeNameToId(tree.name)).querySelectorAll(".graph-node").forEach(function (el) {
      var newLeft = dimensionAsNumber(el.style.left) + -leftmostNodeElement + padding + "px";
      el.style.left = newLeft;
    });

    var _iteratorNormalCompletion14 = true;
    var _didIteratorError14 = false;
    var _iteratorError14 = undefined;

    try {
      for (var _iterator14 = tree.nodes[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
        var _node = _step14.value;

        var parentElement = document.getElementById(_node.id);
        if (_node.leftChildId != undefined) {
          var leftChildElement = document.getElementById(_node.leftChildId);
          if (leftChildElement == null) {
            console.log("left child id results in null = " + _node.leftChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, leftChildElement, treeElement);
          }
        }
        if (_node.centerChildId != undefined) {
          var centerChildElement = document.getElementById(_node.centerChildId);
          if (centerChildElement == null) {
            console.log("center child id results in null = " + _node.centerChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, centerChildElement, treeElement);
          }
        }
        if (_node.rightChildId != undefined) {
          var rightChildElement = document.getElementById(_node.rightChildId);
          if (rightChildElement == null) {
            console.log("right child id results in null = " + _node.rightChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, rightChildElement, treeElement);
          }
        }
      }
    } catch (err) {
      _didIteratorError14 = true;
      _iteratorError14 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion14 && _iterator14.return) {
          _iterator14.return();
        }
      } finally {
        if (_didIteratorError14) {
          throw _iteratorError14;
        }
      }
    }
  }

  function buildNodeElement(node) {
    var nodeFrameElement = document.createElement("div");
    var hexTopElement = document.createElement("div");
    var nodeTextElement = document.createElement("div");
    var nodeValueElement = document.createElement("div");
    var hexBottomElement = document.createElement("div");

    nodeFrameElement.classList.add("node-element");
    hexTopElement.classList.add("node-element");
    nodeTextElement.classList.add("node-element");
    nodeValueElement.classList.add("node-element");
    hexBottomElement.classList.add("node-element");

    nodeFrameElement.classList.add("graph-node");
    nodeFrameElement.id = node.id;

    hexTopElement.classList.add("hex-top");
    hexTopElement.classList.add("hex-component");
    nodeTextElement.classList.add("hex-text");
    nodeValueElement.classList.add("hex-text");
    nodeValueElement.classList.add("hex-value");
    hexBottomElement.classList.add("hex-bottom");
    hexBottomElement.classList.add("hex-component");

    nodeTextElement.textContent = node.name;
    nodeValueElement.textContent = getValueTemplate(node.attribute)[0] + node.value + getValueTemplate(node.attribute)[1];

    nodeFrameElement.append(hexTopElement);
    nodeFrameElement.append(nodeTextElement);
    nodeFrameElement.append(nodeValueElement);
    nodeFrameElement.append(hexBottomElement);

    return nodeFrameElement;
  }

  function drawLineBetweenNodes(parentElement, childElement, treeElement) {
    var lineElement = document.createElement("div");
    lineElement.classList.add("node-connect-line");

    var parentX = dimensionAsNumber(parentElement.style.left);
    var parentY = dimensionAsNumber(parentElement.style.top);
    var childX = dimensionAsNumber(childElement.style.left);
    var childY = dimensionAsNumber(childElement.style.top);

    lineElement.style.width = childY - parentY + 15 + "px";

    var midX = (parentX + childX) / 2;
    var midY = (parentY + childY) / 2;

    var angle = Math.atan2(parentY - childY, parentX - childX) * 180 / Math.PI + 180;
    var transform = "rotate(" + angle + "deg)";

    lineElement.style.transform = transform;
    lineElement.style.top = parentY + 26 + "px";
    lineElement.style.left = parentX + 26 + "px";

    treeElement.appendChild(lineElement);
  }

  function getRelativeChildPosition(parent, childId) {
    if (parent.leftChildId == childId) {
      return "left";
    } else if (parent.centerChildId == childId) {
      return "center";
    } else if (parent.rightChildId == childId) {
      return "right";
    }
    return "child not found in getRelativeChildPosition()";
  }

  function nodeClicked(node, e) {
    var multiSelectionHappened = false;
    if (node.selected) {
      if (!allowFreeNodeSelection) {
        attemptNodeDeselection(node);
      } else {
        if (e.ctrlKey && highlightedNodesArray.length > 0) {
          var _iteratorNormalCompletion15 = true;
          var _didIteratorError15 = false;
          var _iteratorError15 = undefined;

          try {
            for (var _iterator15 = highlightedNodesArray[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
              var highlightedNode = _step15.value;

              selectNode(false, highlightedNode);
            }
          } catch (err) {
            _didIteratorError15 = true;
            _iteratorError15 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion15 && _iterator15.return) {
                _iterator15.return();
              }
            } finally {
              if (_didIteratorError15) {
                throw _iteratorError15;
              }
            }
          }

          multiSelectionHappened = true;
        } else {
          selectNode(false, node);
        }
      }
    } else {
      if (allowFreeNodeSelection) {
        if (e.ctrlKey) {
          if (highlightedNodesArray.length > 0) {
            var _iteratorNormalCompletion16 = true;
            var _didIteratorError16 = false;
            var _iteratorError16 = undefined;

            try {
              for (var _iterator16 = highlightedNodesArray[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                var _highlightedNode = _step16.value;

                //              highlightedNode.selected = true;

                //              updateNodeColor(highlightedNode);
                selectNode(true, _highlightedNode);
              }
            } catch (err) {
              _didIteratorError16 = true;
              _iteratorError16 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion16 && _iterator16.return) {
                  _iterator16.return();
                }
              } finally {
                if (_didIteratorError16) {
                  throw _iteratorError16;
                }
              }
            }

            multiSelectionHappened = true;
          }
        } else {
          if (node.parents.length > 0) {
            node.markAsDetached();
            var _iteratorNormalCompletion17 = true;
            var _didIteratorError17 = false;
            var _iteratorError17 = undefined;

            try {
              for (var _iterator17 = node.parents[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                var parentNode = _step17.value;

                if (parentNode.selected && !parentNode.inDetachedSubTree()) {
                  node.markAsAttached();
                  break;
                }
              }
            } catch (err) {
              _didIteratorError17 = true;
              _iteratorError17 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion17 && _iterator17.return) {
                  _iterator17.return();
                }
              } finally {
                if (_didIteratorError17) {
                  throw _iteratorError17;
                }
              }
            }
          }
          selectNode(true, node);
        }
      } else if (nodeAvailableForSelection(node) && SkillTree.getSelectedNodes().length < maxSkillNodes) {
        selectNode(true, node);
        //        node.selected = true;
        //        updateNodeColor(node);
      }
    }
    if (multiSelectionHappened) {
      updateTreeIntegrity(SkillTree.getActiveTreeName());
    }
    /*
        if(!multiSelectionHappened) {
          updateNodeColors(SkillTree.getActiveTreeName());
        }
    
        updateNodeColor(node);
        for (let child of node.children()) {
          updateNodeColor(child);
        }
        for (let parent of node.parents()) {
          updateNodeColor(parent);
        }
    */
    updateNodeCounters(SkillTree.getActiveTreeName());
    updateBonuses();
    revertURL();
  }

  function nodeHovered(node, e) {
    if (highlightedNodesArray.length > 0 || !e.ctrlKey) {
      return;
    }
    highlightNode(node);

    var treeName = SkillTree.getActiveTreeName();
    if (treeName == undefined) {
      return;
    } else {
      var tree = SkillTree.getTree(treeName);

      var _iteratorNormalCompletion18 = true;
      var _didIteratorError18 = false;
      var _iteratorError18 = undefined;

      try {
        for (var _iterator18 = tree.nodes[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
          var anotherNode = _step18.value;

          if (anotherNode.attribute == node.attribute && anotherNode.id != node.id) {
            highlightNode(anotherNode);
          }
        }
      } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion18 && _iterator18.return) {
            _iterator18.return();
          }
        } finally {
          if (_didIteratorError18) {
            throw _iteratorError18;
          }
        }
      }
    }
  }

  function nodeUnHovered(node) {
    if (highlightedNodesArray.length == 0) {
      return;
    }
    var _iteratorNormalCompletion19 = true;
    var _didIteratorError19 = false;
    var _iteratorError19 = undefined;

    try {
      for (var _iterator19 = highlightedNodesArray[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
        var highlightedNode = _step19.value;

        highlightedNode.highlighted = false;
        updateNodeColor(highlightedNode);
      }
    } catch (err) {
      _didIteratorError19 = true;
      _iteratorError19 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion19 && _iterator19.return) {
          _iterator19.return();
        }
      } finally {
        if (_didIteratorError19) {
          throw _iteratorError19;
        }
      }
    }

    highlightedNodesArray.length = 0;
  }

  function updateNodeColors(treeName) {
    if (treeName == undefined) {
      var _iteratorNormalCompletion20 = true;
      var _didIteratorError20 = false;
      var _iteratorError20 = undefined;

      try {
        for (var _iterator20 = SkillTree.getTrees()[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
          var tree = _step20.value;

          updateNodeColors(tree.name);
        }
      } catch (err) {
        _didIteratorError20 = true;
        _iteratorError20 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion20 && _iterator20.return) {
            _iterator20.return();
          }
        } finally {
          if (_didIteratorError20) {
            throw _iteratorError20;
          }
        }
      }
    } else {
      var _tree = SkillTree.getTree(treeName);
      var _iteratorNormalCompletion21 = true;
      var _didIteratorError21 = false;
      var _iteratorError21 = undefined;

      try {
        for (var _iterator21 = _tree.nodes[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
          var _node2 = _step21.value;

          updateNodeColor(_node2);
        }
      } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion21 && _iterator21.return) {
            _iterator21.return();
          }
        } finally {
          if (_didIteratorError21) {
            throw _iteratorError21;
          }
        }
      }
    }
  }

  function attemptNodeDeselection(node) {
    if (safeToDeselect(node)) {
      selectNode(false, node);
    }
  }
  /*
    function updateNodeDisplay(treeName) {
      if (treeName == undefined) {
        for (let tree of SkillTree.getTrees()) {
          updateNodeDisplay(tree.name);
        }
      } else {
        for (let node of SkillTree.getTres(treeName).nodes) {
          updateNodeColor(node);
        }
      }
    }
  */
  function updateNodeCounters(treeName) {
    var totalNodesSelected = SkillTree.getSelectedNodes().length;
    document.getElementById("node-selection-counter").textContent = totalNodesSelected;
    var totalCounter = document.getElementById("node-selection-counter");
    totalCounter.textContent = totalNodesSelected;
    if (totalNodesSelected > maxSkillNodes) {
      totalCounter.style.color = "red";
    } else {
      totalCounter.style.color = "inherit";
    }
    if (treeName == undefined) {
      var _iteratorNormalCompletion22 = true;
      var _didIteratorError22 = false;
      var _iteratorError22 = undefined;

      try {
        for (var _iterator22 = SkillTree.getTrees()[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
          var tree = _step22.value;

          updateNodeCounters(tree.name);
        }
      } catch (err) {
        _didIteratorError22 = true;
        _iteratorError22 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion22 && _iterator22.return) {
            _iterator22.return();
          }
        } finally {
          if (_didIteratorError22) {
            throw _iteratorError22;
          }
        }
      }
    } else {
      var tab = document.getElementById(treeName.toLowerCase() + "-tab-counter");
      var nodesSelected = SkillTree.getSelectedNodes(treeName).length;
      var nodesTotal = SkillTree.getNodeCount(treeName);
      tab.textContent = nodesSelected + " / " + nodesTotal;
    }
    var totalCbillCost = (totalNodesSelected * cbillsPerNode).toLocaleString("en-US") + " C-Bills and";
    var totalXpCost = (totalNodesSelected * xpPerNode).toLocaleString("en-US") + " XP / GXP";
    document.getElementById("cost-totals-display").innerHTML = totalCbillCost + "</br>" + totalXpCost;
  }

  function updateBonuses() {
    var bonuses = [];
    var treeName = undefined;
    if (!displayAllBonuses) {
      treeName = SkillTree.getActiveTreeName();
    }
    var nodes = SkillTree.getSelectedNodes(treeName);
    var _iteratorNormalCompletion23 = true;
    var _didIteratorError23 = false;
    var _iteratorError23 = undefined;

    try {
      for (var _iterator23 = nodes[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
        var _node3 = _step23.value;

        var bonusForAttribute = getBonusForAttribute(bonuses, _node3.attribute);
        if (bonusForAttribute != undefined) {
          bonusForAttribute.value = (bonusForAttribute.value * 10 + _node3.value * 10) / 10;
        } else {
          bonuses.push({ attribute: _node3.attribute, value: _node3.value, valueTemplate: _node3.valueTemplate });
        }
      }
    } catch (err) {
      _didIteratorError23 = true;
      _iteratorError23 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion23 && _iterator23.return) {
          _iterator23.return();
        }
      } finally {
        if (_didIteratorError23) {
          throw _iteratorError23;
        }
      }
    }

    document.getElementById("bonuses-display").innerHTML = null;
    bonuses.forEach(function (bonus, index) {
      var bonusDisplayElement = document.createElement("div");
      bonusDisplayElement.id = bonusAttributeToId(bonus.attribute);
      bonusDisplayElement.classList.add("bonus-display");
      bonusDisplayElement.textContent = bonus.attribute + " " + getValueTemplate(bonus.attribute)[0] + bonus.value + getValueTemplate(bonus.attribute)[1];
      document.getElementById("bonuses-display").append(bonusDisplayElement);
    });
    if (document.getElementById("bonuses-display").offsetHeight > 560) {
      document.querySelectorAll(".bonus-display").forEach(function (el) {
        el.style.fontSize = "12px";
      });
    }
  }

  function getBonusForAttribute(bonuses, attribute) {
    var _iteratorNormalCompletion24 = true;
    var _didIteratorError24 = false;
    var _iteratorError24 = undefined;

    try {
      for (var _iterator24 = bonuses[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
        var bonus = _step24.value;

        if (bonus.attribute == attribute) {
          return bonus;
        }
      }
    } catch (err) {
      _didIteratorError24 = true;
      _iteratorError24 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion24 && _iterator24.return) {
          _iterator24.return();
        }
      } finally {
        if (_didIteratorError24) {
          throw _iteratorError24;
        }
      }
    }
  }

  function getValueTemplate(attribute) {
    var _iteratorNormalCompletion25 = true;
    var _didIteratorError25 = false;
    var _iteratorError25 = undefined;

    try {
      for (var _iterator25 = attributeTemplateMap[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
        var mapping = _step25.value;

        if (mapping.attribute == attribute) {
          return [mapping.template.split("{}")[0], mapping.template.split("{}")[1]];
        }
      }
    } catch (err) {
      _didIteratorError25 = true;
      _iteratorError25 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion25 && _iterator25.return) {
          _iterator25.return();
        }
      } finally {
        if (_didIteratorError25) {
          throw _iteratorError25;
        }
      }
    }

    console.log("value template not found for attribute " + attribute);
  }

  function changeSkillTree(treeName) {
    SkillTree.setActiveTreeName(treeName);
    document.querySelectorAll(".tab").forEach(function (el) {
      el.classList.remove("selected");
    });
    console.log(treeName);
    getTabForTreeName(treeName).classList.add("selected");

    document.querySelectorAll(".skill-tree").forEach(function (el) {
      el.classList.add("hide");
    });
    var treeElement = document.getElementById(treeNameToId(treeName));
    treeElement.classList.remove("hide");
    var treeDisplayWidth = dimensionAsNumber(treeElement.style.width);
    var totalWidth = treeDisplayWidth + 294 + "px";
    document.getElementById("modal-overlay").style.width = totalWidth;
    document.getElementById("settings-overlay").style.width = totalWidth;
    document.getElementById("footer").style.width = totalWidth;
  }

  function getTabForTreeName(treeName) {
    return document.getElementById(stringToCss(treeName) + "-tab");
  }

  function treeNameToId(treeName) {
    return stringToCss(treeName) + "-skill-tree";
  }

  function bonusAttributeToId(attribute) {
    return stringToCss(attribute) + "bonus-display";
  }

  function nodeNameToId(nodeName) {
    return stringToCss(nodeName);
  }

  function stringToCss(string) {
    return string.replace(/ /g, "-").toLowerCase();
  }

  document.getElementById("download-image-button").addEventListener("click", function () {
    var canvas = document.getElementById("canvas");
    var treeHTML = document.getElementById(treeNameToId(SkillTree.getActiveTreeName()));
    rasterizeHTML.drawDocument(treeHTML, canvas);
  });

  document.getElementById("reset-tree-button").addEventListener("click", function () {
    resetTree(SkillTree.getActiveTreeName());
  });

  document.getElementById("reset-all-button").addEventListener("click", function () {
    var _iteratorNormalCompletion26 = true;
    var _didIteratorError26 = false;
    var _iteratorError26 = undefined;

    try {
      for (var _iterator26 = SkillTree.getTrees()[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
        var tree = _step26.value;

        resetTree(tree.name);
      }
    } catch (err) {
      _didIteratorError26 = true;
      _iteratorError26 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion26 && _iterator26.return) {
          _iterator26.return();
        }
      } finally {
        if (_didIteratorError26) {
          throw _iteratorError26;
        }
      }
    }
  });

  document.getElementById("select-tree-button").addEventListener("click", function () {
    selectAllNodes(SkillTree.getActiveTreeName());
  });

  function resetTree(treeName) {
    var tree = SkillTree.getTree(treeName);
    var _iteratorNormalCompletion27 = true;
    var _didIteratorError27 = false;
    var _iteratorError27 = undefined;

    try {
      for (var _iterator27 = tree.nodes[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
        var _node4 = _step27.value;

        _node4.selected = false;
        _node4.markAsAttached();
      }
    } catch (err) {
      _didIteratorError27 = true;
      _iteratorError27 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion27 && _iterator27.return) {
          _iterator27.return();
        }
      } finally {
        if (_didIteratorError27) {
          throw _iteratorError27;
        }
      }
    }

    updateNodeCounters(treeName);
    updateBonuses();
    updateNodeColors(treeName);
    revertURL();
  }

  function selectAllNodes(treeName) {
    var availableNodes = maxSkillNodes - SkillTree.getSelectedNodes().length;
    var tree = SkillTree.getTree(treeName);
    if (availableNodes > tree.nodes.length || allowFreeNodeSelection) {
      var _iteratorNormalCompletion28 = true;
      var _didIteratorError28 = false;
      var _iteratorError28 = undefined;

      try {
        for (var _iterator28 = tree.nodes[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
          var _node5 = _step28.value;

          _node5.selected = true;
          _node5.markAsAttached();
        }
      } catch (err) {
        _didIteratorError28 = true;
        _iteratorError28 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion28 && _iterator28.return) {
            _iterator28.return();
          }
        } finally {
          if (_didIteratorError28) {
            throw _iteratorError28;
          }
        }
      }

      updateNodeCounters(treeName);
      updateBonuses();
      updateNodeColors(treeName);
      revertURL();
    }
  }

  function loadFromRemoteId() {
    var regex = /([^//?]*)$/;
    var remoteId = regex.exec(window.location.href)[1];

    if (remoteId != undefined && remoteId != "") {
      setModalCloseability(false);
      document.getElementById("modal-overlay").classList.remove("hide");
      document.getElementById("permalink-display").textContent = "Reactor online, weapons online, sensors online....";

      fetch("https://jsonblob.com/api/jsonBlob/" + remoteId, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      }).then(function (response) {
        if (response.ok) {
          return response.json();
        } else {
          console.log("Error response - " + response);
        }
      }).then(function (json) {
        importTrees(json['trees']);
        updateNodeCounters();
        updateBonuses();
        updateNodeColors();
        changeSkillTree(json['activeTreeName']);
        document.getElementById("modal-overlay").classList.add("hide");
      });
    }
  }

  document.getElementById("permalink-button").addEventListener("click", function () {
    setModalCloseability(false);
    document.getElementById("permalink-display").textContent = "Permalink inbound on your position.";
    document.getElementById("modal-overlay").classList.remove("hide");
    fetch("https://jsonblob.com/api/jsonBlob", {
      method: "POST",
      body: serializeTrees(),
      headers: {
        "Content-Type": "application/json"
      }
    }).then(function (response) {
      var regex = /([^//]*)$/;
      var remoteId = regex.exec(response.headers.get("location"))[0];
      document.getElementById("permalink-display").textContent = pushRemoteIdToURL(remoteId);
      document.getElementById("modal-overlay").classList.remove("hide");
      setModalCloseability(true);
    }, function (error) {
      console.log(error.message);
      setModalCloseability(true);
    });
  });

  function serializeTrees() {
    var trees = SkillTree.getTrees();
    var serializedTrees = {};
    serializedTrees.trees = [];
    serializedTrees.activeTreeName = SkillTree.getActiveTreeName();
    var _iteratorNormalCompletion29 = true;
    var _didIteratorError29 = false;
    var _iteratorError29 = undefined;

    try {
      for (var _iterator29 = trees[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
        var tree = _step29.value;

        var serializedTree = {
          name: tree.name,
          nodes: []
        };
        var _iteratorNormalCompletion30 = true;
        var _didIteratorError30 = false;
        var _iteratorError30 = undefined;

        try {
          for (var _iterator30 = tree.nodes[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
            var _node6 = _step30.value;

            serializedTree.nodes.push(serializeNode(_node6));
          }
        } catch (err) {
          _didIteratorError30 = true;
          _iteratorError30 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion30 && _iterator30.return) {
              _iterator30.return();
            }
          } finally {
            if (_didIteratorError30) {
              throw _iteratorError30;
            }
          }
        }

        serializedTrees.trees.push(serializedTree);
      }
    } catch (err) {
      _didIteratorError29 = true;
      _iteratorError29 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion29 && _iterator29.return) {
          _iterator29.return();
        }
      } finally {
        if (_didIteratorError29) {
          throw _iteratorError29;
        }
      }
    }

    return JSON.stringify(serializedTrees);
  }

  function serializeNode(node) {
    var s = void 0;
    if (node.selected) {
      s = 1;
    } else {
      s = 0;
    }
    return {
      id: node.id,
      s: s
    };
  }

  function importTrees(serializedTrees) {
    var _iteratorNormalCompletion31 = true;
    var _didIteratorError31 = false;
    var _iteratorError31 = undefined;

    try {
      for (var _iterator31 = serializedTrees[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
        var serializedTree = _step31.value;

        var tree = SkillTree.getTree(serializedTree.name);
        var serializedNodes = serializedTree.nodes;
        var _iteratorNormalCompletion32 = true;
        var _didIteratorError32 = false;
        var _iteratorError32 = undefined;

        try {
          for (var _iterator32 = serializedNodes[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
            var serializedNode = _step32.value;
            var _iteratorNormalCompletion33 = true;
            var _didIteratorError33 = false;
            var _iteratorError33 = undefined;

            try {
              for (var _iterator33 = tree.nodes[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var _node7 = _step33.value;

                if (serializedNode.id == _node7.id) {
                  if (serializedNode.s == 1) {
                    _node7.selected = true;
                  } else {
                    _node7.selected = false;
                  }
                }
              }
            } catch (err) {
              _didIteratorError33 = true;
              _iteratorError33 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion33 && _iterator33.return) {
                  _iterator33.return();
                }
              } finally {
                if (_didIteratorError33) {
                  throw _iteratorError33;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError32 = true;
          _iteratorError32 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion32 && _iterator32.return) {
              _iterator32.return();
            }
          } finally {
            if (_didIteratorError32) {
              throw _iteratorError32;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError31 = true;
      _iteratorError31 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion31 && _iterator31.return) {
          _iterator31.return();
        }
      } finally {
        if (_didIteratorError31) {
          throw _iteratorError31;
        }
      }
    }
  }

  function pushRemoteIdToURL(remoteId) {
    var remoteURL = window.location.origin + window.location.pathname + "?" + remoteId;
    history.pushState({}, "", remoteURL);
    return remoteURL;
  }

  function revertURL() {
    history.pushState({}, "", window.location.origin + window.location.pathname);
  }

  // takes a boolean
  function setModalCloseability(closeability) {
    document.getElementById("modal-overlay").setAttribute("data-closeable", closeability.toString());
  }

  document.getElementById("modal-overlay").addEventListener("click", function () {
    var closeable = document.getElementById("modal-overlay").getAttribute("data-closeable");
    if (closeable == "true") {
      document.getElementById("modal-overlay").classList.add("hide");
    }
  });

  document.getElementById("permalink-display").addEventListener("click", function (event) {
    event.stopPropagation();
  });

  // strips the "px" off the end of a CSS dimension, returns the number value
  function dimensionAsNumber(dimension) {
    return parseFloat(dimension.slice(0, -2));
  }

  //  loadFromRemoteId();

  document.getElementById("settings-button").addEventListener("click", function () {
    document.getElementById("settings-overlay").classList.remove("hide");
  });
  document.getElementById("settings-overlay").addEventListener("click", function () {
    document.getElementById("settings-overlay").classList.add("hide");
  });
  document.getElementById("settings-display").addEventListener("click", function (event) {
    event.stopPropagation();
  });

  function setFreeNodeSelection(isFree) {
    allowFreeNodeSelection = isFree;
    if (!allowFreeNodeSelection) {
      var _iteratorNormalCompletion34 = true;
      var _didIteratorError34 = false;
      var _iteratorError34 = undefined;

      try {
        for (var _iterator34 = SkillTree.getTrees()[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
          var tree = _step34.value;

          updateTreeIntegrity(tree.name);
        }
      } catch (err) {
        _didIteratorError34 = true;
        _iteratorError34 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion34 && _iterator34.return) {
            _iterator34.return();
          }
        } finally {
          if (_didIteratorError34) {
            throw _iteratorError34;
          }
        }
      }
    }
    var text = "Free selection (ctrl)";
    if (allowFreeNodeSelection) {
      text = "Strict selection";
    }
    document.getElementById("settings-selection-type-button").textContent = text;
  }

  document.getElementById("settings-selection-type-button").addEventListener("click", function (event) {
    setFreeNodeSelection(!allowFreeNodeSelection);
    event.stopPropagation();
  });

  function updateTreeIntegrity(treeName) {
    var tree = SkillTree.getTree(treeName);

    tree.nodes.forEach(function (node) {
      if (node.selected) {
        node.markAsDetached();
      }
    });
    tree.nodes[0].markAsAttached();
    if (tree.nodes[0].selected) {
      markAsAttachedRecursively(tree.nodes[0].children);
    }

    updateNodeColors(treeName);
  }

  document.getElementById("settings-show-bonus-mode-button").addEventListener("click", function (event) {
    changeBonusMode();
    event.stopPropagation();
  });

  function changeBonusMode() {
    displayAllBonuses = !displayAllBonuses;

    var text = "Show all bonuses";
    if (displayAllBonuses) {
      text = "Show bonuses from active tab";
    }
    document.getElementById("settings-show-bonus-mode-button").textContent = text;
    updateBonuses();
  }

  detachedNodesCounterUpdated();
  document.getElementById("deselect-detached-nodes-button").addEventListener("click", function (event) {
    var _iteratorNormalCompletion35 = true;
    var _didIteratorError35 = false;
    var _iteratorError35 = undefined;

    try {
      for (var _iterator35 = SkillTree.getTrees()[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
        var tree = _step35.value;

        var treeHadDetachedNodes = false;
        tree.nodes.forEach(function (node) {
          if (node.inDetachedSubTree()) {
            node.selected = false;
            node.markAsAttached();
            treeHadDetachedNodes = true;
          }
        });
        if (treeHadDetachedNodes) {
          updateNodeColors(tree.name);
        }
      }
    } catch (err) {
      _didIteratorError35 = true;
      _iteratorError35 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion35 && _iterator35.return) {
          _iterator35.return();
        }
      } finally {
        if (_didIteratorError35) {
          throw _iteratorError35;
        }
      }
    }

    updateNodeCounters();
    updateBonuses();
    //    event.stopPropagation();
  });

  document.getElementById("settings-show-tooltips-button").addEventListener("click", function (event) {
    event.stopPropagation();
  });
});

//import { Node, selectNode, highlightNode, markAsAttachedRecursively, updateNodeColor, nodeAvailableForSelection, safeToDeselect } from './node';

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsidHJlZS5qcyIsIm5vZGUuanMiLCJwbGFubmVyLmpzIiwibWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaXJzdCBlbGVtZW50IG9mIHRoZSBub2RlcyBhcnJheSBNVVNUIGJlIHRoZSByb290IG5vZGUgb2YgdGhlIHNrbGwgZ3JhcGhcblxuZXhwb3J0IGNvbnN0IHRyZWVTb3VyY2UgPSBbXG4gIC8qXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICAgICAgIFdFQVBPTlNcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICovXG4gIHtcbiAgICBuYW1lOiBcIldlYXBvbnNcIixcbiAgICBub2RlczogW1xuICAgICAgeyBuYW1lOiBcIlJhbmdlIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInJhbmdlLTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJhbmdlLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJSYW5nZSAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJyYW5nZS00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyYW5nZS01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFuZ2UtNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwicmFuZ2UtNlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlJhbmdlIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImNvb2xkb3duLTFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJoaWdoLWV4cGxvc2l2ZS0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ2ZWxvY2l0eS0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJjb29sZG93bi00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgNlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidmVsb2NpdHktMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImdhdXNzLWNoYXJnZS0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJjb29sZG93bi0yXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkNvb2xkb3duIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBDb29sZG93blwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImNvb2xkb3duLTNcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiVmVsb2NpdHkgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFZlbG9jaXR5XCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTRcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiVmVsb2NpdHkgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFZlbG9jaXR5XCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiY29vbGRvd24tNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2xkb3duIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBDb29sZG93blwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJjb29sZG93bi01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ29vbGRvd24gM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIENvb2xkb3duXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFuZ2UtN1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcIm1pc3NpbGUtc3ByZWFkLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIaWdoIEV4cGxvc2l2ZSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNaXNzaWxlIENyaXQgRGFtYWdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjcuNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWdlbi0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ29vbGRvd24gNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIENvb2xkb3duXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJjb29sZG93bi02XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiR2F1c3MgQ2hhcmdlIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkdhdXNzIEhlbGQgVGltZVwiLFxuICAgICAgICB2YWx1ZTogXCIwLjVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sZG93biA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWdlbi0yXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwibGJ4LXNwcmVhZC0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyYW5nZS04XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgN1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFuZ2UtOVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgR2VuIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBIZWF0IEdlblwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcIm1pc3NpbGUtc3ByZWFkLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IEdlbiAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gSGVhdCBHZW5cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWdlbi00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJsYngtc3ByZWFkLTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJSYW5nZSA4XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwicmFuZ2UtMTBcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJSYW5nZSA5XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY29vbGRvd24tN1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIk1pc3NpbGUgU3ByZWFkIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1pc3NpbGUgU3ByZWFkXCIsXG4gICAgICAgIHZhbHVlOiBcIjIuNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sZG93bi03XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiSGVhdCBHZW4gM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidmVsb2NpdHktM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwicmFuZ2UtMTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sZG93biA2XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJyYW5nZS0xMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImxhc2VyLWR1cmF0aW9uLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJhbmdlLTEyXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiSGVhdCBHZW4gNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFuZ2UtMTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInZlbG9jaXR5LTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJMQlggU3ByZWFkIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkxCWCBTcHJlYWRcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY29vbGRvd24tOFwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJSYW5nZSAxMFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiY29vbGRvd24tOFwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidWFjLWphbS1jaGFuY2UtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2xkb3duIDdcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBDb29sZG93blwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhlYXQtZ2VuLTVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTZcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJWZWxvY2l0eSAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gVmVsb2NpdHlcIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWdlbi02XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgMTFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInJhbmdlLTEzXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJsYXNlci1kdXJhdGlvbi0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgMTJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImxhc2VyLWR1cmF0aW9uLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJhbmdlLTE0XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVsb2NpdHkgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFZlbG9jaXR5XCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTlcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sZG93biA4XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sZG93bi05XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiZ2F1c3MtY2hhcmdlLTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTdcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJVQUMgSmFtIENoYW5jZSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJVQUMgSmFtIENoYW5jZVwiLFxuICAgICAgICB2YWx1ZTogXCIyLjVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IEdlbiA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gSGVhdCBHZW5cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sZG93bi0xMFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgR2VuIDZcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBIZWF0IEdlblwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhpZ2gtZXhwbG9zaXZlLTJcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJsYXNlci1kdXJhdGlvbi0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LWdlbi04XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgMTNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhlYXQtZ2VuLThcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcIm1pc3NpbGUtcmFjay0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiTGFzZXIgRHVyYXRpb24gMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTGFzZXIgRHVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy43NVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImNvb2xkb3duLTEyXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFuZ2UgMTRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcIm1hZ2F6aW5lLWNhcGFjaXR5LTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtZ2VuLTlcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sZG93biA5XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWdlbi05XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwibGFzZXItZHVyYXRpb24tM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiZ2F1c3MtY2hhcmdlLTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiSGVhdCBHZW4gN1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTExXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkNvb2xkb3duIDEwXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwibWlzc2lsZS1yYWNrLTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiSGlnaCBFeHBsb3NpdmUgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWlzc2lsZSBDcml0IERhbWFnZVwiLFxuICAgICAgICB2YWx1ZTogXCI3LjVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImxhc2VyLWR1cmF0aW9uLTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiSGVhdCBHZW4gOFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwibGFzZXItZHVyYXRpb24tMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImNvb2xkb3duLTEzXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIk1pc3NpbGUgUmFjayAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNaXNzaWxlIEFtbW9cIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY29vbGRvd24tMTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiTWFnYXppbmUgQ2FwYWNpdHkgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQmFsbGlzdGljIEFtbW9cIixcbiAgICAgICAgdmFsdWU6IFwiOFwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sZG93bi0xMlwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJIZWF0IEdlbiA5XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gSGVhdCBHZW5cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImNvb2xkb3duLTE0XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJsYXNlci1kdXJhdGlvbi0zXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkdhdXNzIENoYXJnZSAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJHYXVzcyBIZWxkIFRpbWVcIixcbiAgICAgICAgdmFsdWU6IFwiMC41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImxhc2VyLWR1cmF0aW9uLTNcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiQ29vbGRvd24gMTFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBDb29sZG93blwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcIm1hZ2F6aW5lLWNhcGFjaXR5LTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiTWlzc2lsZSBSYWNrIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1pc3NpbGUgQW1tb1wiLFxuICAgICAgICB2YWx1ZTogXCIxXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkxhc2VyIER1cmF0aW9uIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkxhc2VyIER1cmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNzVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTEzXCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkNvb2xkb3duIDEyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJyYW5nZS0xNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidmVsb2NpdHktNVwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJMYXNlciBEdXJhdGlvbiAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJMYXNlciBEdXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImNvb2xkb3duLTE0XCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIk1hZ2F6aW5lIENhcGFjaXR5IDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkJhbGxpc3RpYyBBbW1vXCIsXG4gICAgICAgIHZhbHVlOiBcIjhcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiQ29vbGRvd24gMTNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBDb29sZG93blwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhlYXQtZ2VuLTEwXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LWdlbi0xMVwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJSYW5nZSAxNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGVhdC1nZW4tMTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTE1XCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIlZlbG9jaXR5IDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBWZWxvY2l0eVwiLFxuICAgICAgICB2YWx1ZTogXCIyXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImNvb2xkb3duLTE1XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LWdlbi0xMlwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJDb29sZG93biAxNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIENvb2xkb3duXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGVhdC1nZW4tMTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNvb2xkb3duLTE2XCJcbiAgICAgIH0sXG5cdCAgeyBuYW1lOiBcIkhlYXQgR2VuIDEwXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gSGVhdCBHZW5cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJIZWF0IEdlbiAxMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJoZWF0LWdlbi0xM1wiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJDb29sZG93biAxNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIENvb2xkb3duXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwibWlzc2lsZS1zcHJlYWQtMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImxhc2VyLWR1cmF0aW9uLTRcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInVhYy1qYW0tY2hhbmNlLTJcIlxuICAgICAgfSxcblx0ICB7IG5hbWU6IFwiSGVhdCBHZW4gMTJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIldlYXBvbiBIZWF0IEdlblwiLFxuICAgICAgICB2YWx1ZTogXCIwLjc1XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiaGVhdC1nZW4tMTRcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImxieC1zcHJlYWQtMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2xkb3duIDE2XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJsYngtc3ByZWFkLTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJNaXNzaWxlIFNwcmVhZCAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNaXNzaWxlIFNwcmVhZFwiLFxuICAgICAgICB2YWx1ZTogXCIyLjVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJVQUMgSmFtIENoYW5jZSAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJVQUMgSmFtIENoYW5jZVwiLFxuICAgICAgICB2YWx1ZTogXCIyLjVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJMQlggU3ByZWFkIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkxCWCBTcHJlYWRcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgR2VuIDEzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJXZWFwb24gSGVhdCBHZW5cIixcbiAgICAgICAgdmFsdWU6IFwiMC43NVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkxhc2VyIER1cmF0aW9uIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkxhc2VyIER1cmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNzVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IEdlbiAxNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiV2VhcG9uIEhlYXQgR2VuXCIsXG4gICAgICAgIHZhbHVlOiBcIjAuNzVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgLypcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAgICAgICBTVVJWSVZBTFxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgKi9cbiAge1xuICAgIG5hbWU6ICdTdXJ2aXZhbCcsXG4gICAgbm9kZXM6IFtcbiAgICAgIHsgbmFtZTogXCJSZWluZm9yY2VkIENhc2luZyAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJDcml0IENoYW5jZSAoUmVjZWl2ZWQpXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwic2hvY2stYWJzb3JiYW5jZS0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJhbXMtb3ZlcmxvYWQtMVwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlNob2NrIEFic29yYmFuY2UgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiRmFsbCBEYW1hZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMTBcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTFcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJBTVMgT3ZlcmxvYWQgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQU1TIEVmZmVjdGl2ZW5lc3NcIixcbiAgICAgICAgdmFsdWU6IFwiMS4yNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy0zXCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2tlbGV0YWwgRGVuc2l0eSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLTNcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJSZWluZm9yY2VkIENhc2luZyAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJDcml0IENoYW5jZSAoUmVjZWl2ZWQpXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiYXJtb3ItaGFyZGVuaW5nLTFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJhbXMtb3ZlcmxvYWQtMlwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlJlaW5mb3JjZWQgQ2FzaW5nIDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNyaXQgQ2hhbmNlIChSZWNlaXZlZClcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNob2NrLWFic29yYmFuY2UtM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwic2tlbGV0YWwtZGVuc2l0eS0yXCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiQXJtb3IgSGFyZGVuaW5nIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFybW9yXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJzaG9jay1hYnNvcmJhbmNlLTJcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImFtcy1vdmVybG9hZC0yXCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2tlbGV0YWwgRGVuc2l0eSAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInNob2NrLWFic29yYmFuY2UtM1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLTRcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNob2NrLWFic29yYmFuY2UtNFwiXG4gICAgICB9LFxuXHQgIHsgbmFtZTogXCJTaG9jayBBYnNvcmJhbmNlIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkZhbGwgRGFtYWdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjEwXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImFybW9yLWhhcmRlbmluZy0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTNcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJBTVMgT3ZlcmxvYWQgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQU1TIEVmZmVjdGl2ZW5lc3NcIixcbiAgICAgICAgdmFsdWU6IFwiMS4yNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktNFwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlNob2NrIEFic29yYmFuY2UgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiRmFsbCBEYW1hZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMTBcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwic2tlbGV0YWwtZGVuc2l0eS00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy00XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2hvY2sgQWJzb3JiYW5jZSA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJGYWxsIERhbWFnZVwiLFxuICAgICAgICB2YWx1ZTogXCIxMFwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJhcm1vci1oYXJkZW5pbmctM1wiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIkFybW9yIEhhcmRlbmluZyAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBcm1vclwiLFxuICAgICAgICB2YWx1ZTogXCIxLjZcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLTVcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJTa2VsZXRhbCBEZW5zaXR5IDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkludGVybmFsIFN0cnVjdHVyZVwiLFxuICAgICAgICB2YWx1ZTogXCIzLjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmVpbmZvcmNlZC1jYXNpbmctNVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImFybW9yLWhhcmRlbmluZy01XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2tlbGV0YWwgRGVuc2l0eSA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwic2tlbGV0YWwtZGVuc2l0eS01XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiUmVpbmZvcmNlZCBDYXNpbmcgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQ3JpdCBDaGFuY2UgKFJlY2VpdmVkKVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwic2tlbGV0YWwtZGVuc2l0eS02XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy03XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiQXJtb3IgSGFyZGVuaW5nIDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFybW9yXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy03XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiUmVpbmZvcmNlZCBDYXNpbmcgNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQ3JpdCBDaGFuY2UgKFJlY2VpdmVkKVwiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImFybW9yLWhhcmRlbmluZy00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJhcm1vci1oYXJkZW5pbmctNVwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlJlaW5mb3JjZWQgQ2FzaW5nIDdcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNyaXQgQ2hhbmNlIChSZWNlaXZlZClcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTZcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktN1wiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIkFybW9yIEhhcmRlbmluZyA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBcm1vclwiLFxuICAgICAgICB2YWx1ZTogXCIxLjZcIlxuICAgICAgfSxcbiAgXHQgIHsgbmFtZTogXCJBcm1vciBIYXJkZW5pbmcgNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQXJtb3JcIixcbiAgICAgICAgdmFsdWU6IFwiMS42XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyZWluZm9yY2VkLWNhc2luZy02XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2tlbGV0YWwgRGVuc2l0eSA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLTZcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJlaW5mb3JjZWQtY2FzaW5nLThcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJTa2VsZXRhbCBEZW5zaXR5IDZcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkludGVybmFsIFN0cnVjdHVyZVwiLFxuICAgICAgICB2YWx1ZTogXCIzLjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmVpbmZvcmNlZC1jYXNpbmctOFwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlNrZWxldGFsIERlbnNpdHkgN1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSW50ZXJuYWwgU3RydWN0dXJlXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuMVwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlJlaW5mb3JjZWQgQ2FzaW5nIDZcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNyaXQgQ2hhbmNlIChSZWNlaXZlZClcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJhcm1vci1oYXJkZW5pbmctNlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktOVwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlJlaW5mb3JjZWQgQ2FzaW5nIDhcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNyaXQgQ2hhbmNlIChSZWNlaXZlZClcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktMTBcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktOFwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIkFybW9yIEhhcmRlbmluZyA2XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBcm1vclwiLFxuICAgICAgICB2YWx1ZTogXCIxLjZcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNrZWxldGFsLWRlbnNpdHktOVwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIlNrZWxldGFsIERlbnNpdHkgOFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSW50ZXJuYWwgU3RydWN0dXJlXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuMVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJza2VsZXRhbC1kZW5zaXR5LTEwXCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2tlbGV0YWwgRGVuc2l0eSA5XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImFybW9yLWhhcmRlbmluZy03XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJzaG9jay1hYnNvcmJhbmNlLTVcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJTa2VsZXRhbCBEZW5zaXR5IDEwXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICAgICAgdmFsdWU6IFwiMy4xXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInNob2NrLWFic29yYmFuY2UtNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiYXJtb3ItaGFyZGVuaW5nLThcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJBcm1vciBIYXJkZW5pbmcgN1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQXJtb3JcIixcbiAgICAgICAgdmFsdWU6IFwiMS42XCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiU2hvY2sgQWJzb3JiYW5jZSA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJGYWxsIERhbWFnZVwiLFxuICAgICAgICB2YWx1ZTogXCIxMFwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJhcm1vci1oYXJkZW5pbmctOVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiYXJtb3ItaGFyZGVuaW5nLTEwXCJcbiAgICAgIH0sXG5cdCAgICB7IG5hbWU6IFwiQXJtb3IgSGFyZGVuaW5nIDhcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFybW9yXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNlwiXG4gICAgICB9LFxuXHQgICAgeyBuYW1lOiBcIkFybW9yIEhhcmRlbmluZyA5XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBcm1vclwiLFxuICAgICAgICB2YWx1ZTogXCIxLjZcIlxuICAgICAgfSxcblx0ICAgIHsgbmFtZTogXCJBcm1vciBIYXJkZW5pbmcgMTBcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFybW9yXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNlwiXG4gICAgICB9LFxuICAgIF1cbiAgfSxcbiAgLypcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAgICAgICAgIE1PQmlMSVRZXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAqL1xuICB7XG4gICAgbmFtZTogJ01vYmlsaXR5JyxcbiAgICBub2RlczogW1xuICAgICAgeyBuYW1lOiBcIktpbmV0aWMgQnVyc3QgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWNjZWxlcmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0b3Jzby15YXctMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaGFyZC1icmFrZS0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gWWF3IDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBUb3JzbyBUd2lzdFwiLFxuICAgICAgICB2YWx1ZTogXCIyXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhhcmQtYnJha2UtMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwia2luZXRpYy1idXJzdC0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiSGFyZCBCcmFrZSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJEZWNlbGVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImtpbmV0aWMtYnVyc3QtMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28teWF3LTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIYXJkIEJyYWtlIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkRlY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidG9yc28tc3BlZWQtMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28teWF3LTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJLaW5ldGljIEJ1cnN0IDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFjY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidG9yc28teWF3LTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhhcmQtYnJha2UtM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFlhdyAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNYXggVG9yc28gVHdpc3RcIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoYXJkLWJyYWtlLTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImFuY2hvci10dXJuLTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUb3JzbyBTcGVlZCAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUb3JzbyBUd2lzdCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gWWF3IDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBUb3JzbyBUd2lzdFwiLFxuICAgICAgICB2YWx1ZTogXCIyXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImtpbmV0aWMtYnVyc3QtM1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInRvcnNvLXlhdy00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiSGFyZCBCcmFrZSAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJEZWNlbGVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwia2luZXRpYy1idXJzdC01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJraW5ldGljLWJ1cnN0LTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJBbmNob3IgVHVybiAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUdXJuIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjVcIixcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiS2luZXRpYyBCdXJzdCAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBY2NlbGVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhhcmQtYnJha2UtNFwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28teWF3LTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJLaW5ldGljIEJ1cnN0IDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFjY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwia2luZXRpYy1idXJzdC01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJraW5ldGljLWJ1cnN0LTZcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIYXJkIEJyYWtlIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkRlY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidG9yc28tc3BlZWQtMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28tc3BlZWQtM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFlhdyA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNYXggVG9yc28gVHdpc3RcIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0b3Jzby1zcGVlZC0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0b3Jzby1waXRjaC0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiS2luZXRpYyBCdXJzdCA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBY2NlbGVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInRvcnNvLXBpdGNoLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImtpbmV0aWMtYnVyc3QtN1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIktpbmV0aWMgQnVyc3QgNlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWNjZWxlcmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJraW5ldGljLWJ1cnN0LTdcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhhcmQtYnJha2UtNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFNwZWVkIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRvcnNvIFR3aXN0IFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28teWF3LTVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUb3JzbyBTcGVlZCAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUb3JzbyBUd2lzdCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInRvcnNvLXBpdGNoLTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUb3JzbyBQaXRjaCAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNYXggVG9yc28gSW5jbGluYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0b3Jzby1waXRjaC0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0b3Jzby1waXRjaC0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiS2luZXRpYyBCdXJzdCA3XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBY2NlbGVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInRvcnNvLXBpdGNoLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIYXJkIEJyYWtlIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkRlY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiYW5jaG9yLXR1cm4tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFlhdyA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJNYXggVG9yc28gVHdpc3RcIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaGFyZC1icmFrZS02XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gUGl0Y2ggMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWF4IFRvcnNvIEluY2xpbmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGFyZC1icmFrZS02XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gUGl0Y2ggM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWF4IFRvcnNvIEluY2xpbmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhhcmQtYnJha2UtN1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkFuY2hvciBUdXJuIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlR1cm4gU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoYXJkLWJyYWtlLTdcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIYXJkIEJyYWtlIDZcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkRlY2VsZXJhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiYW5jaG9yLXR1cm4tM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28tc3BlZWQtNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhhcmQgQnJha2UgN1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiRGVjZWxlcmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0b3Jzby1zcGVlZC01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJhbmNob3ItdHVybi00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQW5jaG9yIFR1cm4gM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVHVybiBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI1XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0b3Jzby1waXRjaC00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gU3BlZWQgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVG9yc28gVHdpc3QgU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiMy41XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInRvcnNvLXBpdGNoLTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUb3JzbyBTcGVlZCA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUb3JzbyBUd2lzdCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIzLjVcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInRvcnNvLXBpdGNoLTVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJBbmNob3IgVHVybiA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUdXJuIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidG9yc28tcGl0Y2gtNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFBpdGNoIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBUb3JzbyBJbmNsaW5hdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIyXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInNwZWVkLXR3ZWFrLTFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJ0b3Jzby1zcGVlZC02XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVG9yc28gUGl0Y2ggNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWF4IFRvcnNvIEluY2xpbmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJhbmNob3ItdHVybi01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJzcGVlZC10d2Vhay0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU3BlZWQgVHdlYWsgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWF4IFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidG9yc28tc3BlZWQtNlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNwZWVkIFR3ZWFrIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIxLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiYW5jaG9yLXR1cm4tNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRvcnNvIFNwZWVkIDZcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRvcnNvIFR3aXN0IFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjMuNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwic3BlZWQtdHdlYWstM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkFuY2hvciBUdXJuIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlR1cm4gU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJzcGVlZC10d2Vhay00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU3BlZWQgVHdlYWsgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTWF4IFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjEuNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwic3BlZWQtdHdlYWstNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNwZWVkIFR3ZWFrIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIxLjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwic3BlZWQtdHdlYWstNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNwZWVkIFR3ZWFrIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk1heCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIxLjVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgLypcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAgICAgICBKVU1QIEpFVFNcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICovXG4gIHtcbiAgICBuYW1lOiBcIkp1bXAgSmV0c1wiLFxuICAgIG5vZGVzOiBbXG4gICAgICB7IG5hbWU6IFwiSGVhdCBTaGllbGRpbmcgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSGVhdCBSZWR1Y3Rpb25cIixcbiAgICAgICAgdmFsdWU6IFwiNlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ2ZW50LWNhbGlicmF0aW9uLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInZlY3RvcmluZy0xXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVudCBDYWxpYnJhdGlvbiAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBCdXJuIFRpbWVcIixcbiAgICAgICAgdmFsdWU6IFwiM1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInZlbnQtY2FsaWJyYXRpb24tMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaGVhdC1zaGllbGRpbmctMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlZlY3RvcmluZyAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBGb3J3YXJkIFRocnVzdFwiLFxuICAgICAgICB2YWx1ZTogXCIyNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LXNoaWVsZGluZy0yXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwidmVjdG9yaW5nLTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImxpZnQtc3BlZWQtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgU2hpZWxkaW5nIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEhlYXQgUmVkdWN0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjZcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidmVudC1jYWxpYnJhdGlvbi0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ2ZWN0b3JpbmctMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkxpZnQgU3BlZWQgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSW5pdGlhbCBCb29zdFwiLFxuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInZlY3RvcmluZy0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVudCBDYWxpYnJhdGlvbiAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBCdXJuIFRpbWVcIixcbiAgICAgICAgdmFsdWU6IFwiM1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInZlbnQtY2FsaWJyYXRpb24tM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaGVhdC1zaGllbGRpbmctM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlZlY3RvcmluZyAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBGb3J3YXJkIFRocnVzdFwiLFxuICAgICAgICB2YWx1ZTogXCIyNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LXNoaWVsZGluZy0zXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwidmVjdG9yaW5nLTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImxpZnQtc3BlZWQtMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgU2hpZWxkaW5nIDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEhlYXQgUmVkdWN0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjZcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidmVudC1jYWxpYnJhdGlvbi0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ2ZWN0b3JpbmctM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkxpZnQgU3BlZWQgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSW5pdGlhbCBCb29zdFwiLFxuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInZlY3RvcmluZy0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVudCBDYWxpYnJhdGlvbiAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBCdXJuIFRpbWVcIixcbiAgICAgICAgdmFsdWU6IFwiM1wiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJsaWZ0LXNwZWVkLTNcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJ2ZW50LWNhbGlicmF0aW9uLTRcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImhlYXQtc2hpZWxkaW5nLTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJWZWN0b3JpbmcgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgRm9yd2FyZCBUaHJ1c3RcIixcbiAgICAgICAgdmFsdWU6IFwiMjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGVhdC1zaGllbGRpbmctNFwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInZlY3RvcmluZy00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiTGlmdCBTcGVlZCAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBJbml0aWFsIEJvb3N0XCIsXG4gICAgICAgIHZhbHVlOiBcIjNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInZlbnQtY2FsaWJyYXRpb24tNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgU2hpZWxkaW5nIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEhlYXQgUmVkdWN0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjZcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidmVudC1jYWxpYnJhdGlvbi00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ2ZWN0b3JpbmctNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlZlbnQgQ2FsaWJyYXRpb24gNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgQnVybiBUaW1lXCIsXG4gICAgICAgIHZhbHVlOiBcIjNcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwibGlmdC1zcGVlZC00XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwidmVudC1jYWxpYnJhdGlvbi01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LXNoaWVsZGluZy01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVjdG9yaW5nIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEZvcndhcmQgVGhydXN0XCIsXG4gICAgICAgIHZhbHVlOiBcIjI1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhlYXQtc2hpZWxkaW5nLTVcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJ2ZWN0b3JpbmctNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkxpZnQgU3BlZWQgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSW5pdGlhbCBCb29zdFwiLFxuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ2ZW50LWNhbGlicmF0aW9uLTVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IFNoaWVsZGluZyA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJKdW1wIEpldCBIZWF0IFJlZHVjdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCI2XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInZlbnQtY2FsaWJyYXRpb24tNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwidmVjdG9yaW5nLTVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJWZW50IENhbGlicmF0aW9uIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEJ1cm4gVGltZVwiLFxuICAgICAgICB2YWx1ZTogXCIzXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVmVjdG9yaW5nIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkp1bXAgSmV0IEZvcndhcmQgVGhydXN0XCIsXG4gICAgICAgIHZhbHVlOiBcIjI1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImxpZnQtc3BlZWQtNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkxpZnQgU3BlZWQgNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSW5pdGlhbCBCb29zdFwiLFxuICAgICAgICB2YWx1ZTogXCIzXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIC8qXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICAgICBPUEVSQVRJT05TXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAqL1xuICB7XG4gICAgbmFtZTogXCJPcGVyYXRpb25zXCIsXG4gICAgbm9kZXM6IFtcbiAgICAgIHsgbmFtZTogXCJRdWljayBJZ25pdGlvbiAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJTdGFydHVwIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwic3BlZWQtcmV0ZW50aW9uLTFcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImltcHJvdmVkLWd5cm9zLTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJTcGVlZCBSZXRlbnRpb24gMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTGVnZ2VkIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjEwXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiaGlsbC1jbGltYi0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LWNvbnRhaW5tZW50LTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJJbXByb3ZlZCBHeXJvcyAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXN0aWVyIEd5cm9zXCIsXG4gICAgICAgIHZhbHVlOiBcIjE3LjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGVhdC1jb250YWlubWVudC0xXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiaW1wcm92ZWQtZ3lyb3MtMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgQ29udGFpbm1lbnQgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGVhdCBDYXBhY2l0eVwiLFxuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhpbGwtY2xpbWItMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaW1wcm92ZWQtZ3lyb3MtMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhpbGwgQ2xpbWIgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGlsbCBDbGltYlwiLFxuICAgICAgICB2YWx1ZTogXCI1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImhlYXQtY29udGFpbm1lbnQtMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImhpbGwtY2xpbWItMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkltcHJvdmVkIEd5cm9zIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRhc3RpZXIgR3lyb3NcIixcbiAgICAgICAgdmFsdWU6IFwiMTcuNVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNwZWVkLXJldGVudGlvbi0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoZWF0LWNvbnRhaW5tZW50LTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IENvbnRhaW5tZW50IDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkhlYXQgQ2FwYWNpdHlcIixcbiAgICAgICAgdmFsdWU6IFwiM1wiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sLXJ1bi0xXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwicXVpY2staWduaXRpb24tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhlYXQgQ29udGFpbm1lbnQgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGVhdCBDYXBhY2l0eVwiLFxuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwicXVpY2staWduaXRpb24tM1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY29vbC1ydW4tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2wgUnVuIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkhlYXQgRGlzc2lwYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwicXVpY2staWduaXRpb24tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkhpbGwgQ2xpbWIgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGlsbCBDbGltYlwiLFxuICAgICAgICB2YWx1ZTogXCI1XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiaGlsbC1jbGltYi0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJjb29sLXJ1bi0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU3BlZWQgUmV0ZW50aW9uIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkxlZ2dlZCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCIxMFwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sLXJ1bi0zXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiaW1wcm92ZWQtZ3lyb3MtM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2wgUnVuIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkhlYXQgRGlzc2lwYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJxdWljay1pZ25pdGlvbi0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUXVpY2sgSWduaXRpb24gMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU3RhcnR1cCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI3XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJoaWxsLWNsaW1iLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sIFJ1biAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJIZWF0IERpc3NpcGF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjJcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaGlsbC1jbGltYi0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJpbXByb3ZlZC1neXJvcy0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUXVpY2sgSWduaXRpb24gM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU3RhcnR1cCBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI3XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImltcHJvdmVkLWd5cm9zLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIaWxsIENsaW1iIDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkhpbGwgQ2xpbWJcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJoZWF0LWNvbnRhaW5tZW50LTRcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInF1aWNrLWlnbml0aW9uLTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJJbXByb3ZlZCBHeXJvcyAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXN0aWVyIEd5cm9zXCIsXG4gICAgICAgIHZhbHVlOiBcIjE3LjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicXVpY2staWduaXRpb24tNFwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiaGVhdC1jb250YWlubWVudC01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiSGVhdCBDb250YWlubWVudCA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJIZWF0IENhcGFjaXR5XCIsXG4gICAgICAgIHZhbHVlOiBcIjNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJRdWljayBJZ25pdGlvbiA0XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJTdGFydHVwIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiaW1wcm92ZWQtZ3lyb3MtNFwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwic3BlZWQtcmV0ZW50aW9uLTNcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJIZWF0IENvbnRhaW5tZW50IDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkhlYXQgQ2FwYWNpdHlcIixcbiAgICAgICAgdmFsdWU6IFwiM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkltcHJvdmVkIEd5cm9zIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRhc3RpZXIgR3lyb3NcIixcbiAgICAgICAgdmFsdWU6IFwiMTcuNVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwicXVpY2staWduaXRpb24tNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNwZWVkIFJldGVudGlvbiAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJMZWdnZWQgU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiMTBcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicXVpY2staWduaXRpb24tNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlF1aWNrIElnbml0aW9uIDVcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlN0YXJ0dXAgU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiN1wiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sLXJ1bi00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJjb29sLXJ1bi01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ29vbCBSdW4gNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGVhdCBEaXNzaXBhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIyXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ29vbCBSdW4gNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiSGVhdCBEaXNzaXBhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIyXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIC8qXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICAgICAgIFNFTlNPUlNcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICovXG4gIHtcbiAgICBuYW1lOiBcIlNlbnNvcnNcIixcbiAgICBub2RlczogW1xuICAgICAgeyBuYW1lOiBcIlRhcmdldCBJbmZvIEdhdGhlcmluZyAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgSW5mbyBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI3XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInRhcmdldC1kZWNheS0xXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJzZW5zb3ItcmFuZ2UtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRhcmdldCBEZWNheSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgTG9jayBEZWNheVwiLFxuICAgICAgICB2YWx1ZTogXCIwLjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidGFyZ2V0LXJldGVudGlvbi0xXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwidGFyZ2V0LWluZm8tZ2F0aGVyaW5nLTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNlbnNvci1yYW5nZS0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU2Vuc29yIFJhbmdlIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlNlbnNvciBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCI3XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInNlbnNvci1yYW5nZS0yXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwic2Vuc29yLXJhbmdlLTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInRhcmdldC1pbmZvLWdhdGhlcmluZy0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVGFyZ2V0IFJldGVudGlvbiAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgUmV0ZW50aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjIwMFwiLFxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJTZW5zb3IgUmFuZ2UgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU2Vuc29yIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidGFyZ2V0LWluZm8tZ2F0aGVyaW5nLTNcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNlbnNvci1yYW5nZS0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVGFyZ2V0IEluZm8gR2F0aGVyaW5nIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRhcmdldCBJbmZvIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImFkdmFuY2VkLXpvb21cIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUYXJnZXQgSW5mbyBHYXRoZXJpbmcgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVGFyZ2V0IEluZm8gU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiN1wiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInRhcmdldC1pbmZvLWdhdGhlcmluZy00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0YXJnZXQtZGVjYXktMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNlbnNvciBSYW5nZSAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJTZW5zb3IgUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiN1wiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0YXJnZXQtZGVjYXktMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInRhcmdldC1yZXRlbnRpb24tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkFkdmFuY2VkIFpvb21cIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlpvb20gTWFnbmlmaWVyXCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUYXJnZXQgRGVjYXkgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVGFyZ2V0IExvY2sgRGVjYXlcIixcbiAgICAgICAgdmFsdWU6IFwiMC43XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVGFyZ2V0IEluZm8gR2F0aGVyaW5nIDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRhcmdldCBJbmZvIFNwZWVkXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFkYXItZGVwcml2YXRpb24tMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNlbnNvci1yYW5nZS00XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVGFyZ2V0IFJldGVudGlvbiAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgUmV0ZW50aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjIwMFwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInNlbnNvci1yYW5nZS01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0YXJnZXQtZGVjYXktM1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlJhZGFyIERlcHJpdmF0aW9uIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlJhZGFyIERlcHJpdmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjIwXCIsXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRhcmdldCBEZWNheSAzXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgTG9jayBEZWNheVwiLFxuICAgICAgICB2YWx1ZTogXCIwLjdcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInNlaXNtaWMtc2Vuc29yLTFcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJTZW5zb3IgUmFuZ2UgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU2Vuc29yIFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjdcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwicmFkYXItZGVwcml2YXRpb24tMlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInRhcmdldC1pbmZvLWdhdGhlcmluZy01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJ0YXJnZXQtZGVjYXktNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlNlbnNvciBSYW5nZSA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJTZW5zb3IgUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiN1wiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJ0YXJnZXQtZGVjYXktNFwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcInRhcmdldC1kZWNheS01XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyYWRhci1kZXByaXZhdGlvbi0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU2Vpc21pYyBTZW5zb3IgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU2Vpc21pYyBTZW5zb3JcIixcbiAgICAgICAgdmFsdWU6IFwiMTAwXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFkYXIgRGVwcml2YXRpb24gMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiUmFkYXIgRGVwcml2YXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMjBcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiZW5oYW5jZWQtZWNtLTFcIixcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiVGFyZ2V0IERlY2F5IDRcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlRhcmdldCBMb2NrIERlY2F5XCIsXG4gICAgICAgIHZhbHVlOiBcIjAuN1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlJhZGFyIERlcHJpdmF0aW9uIDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlJhZGFyIERlcHJpdmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjIwXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJlbmhhbmNlZC1lY20tMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkVuaGFuY2VkIEVDTSAxXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJFQ00gUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMjIuNVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlRhcmdldCBJbmZvIEdhdGhlcmluZyA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJUYXJnZXQgSW5mbyBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI3XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInNlaXNtaWMtc2Vuc29yLTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcInJhZGFyLWRlcHJpdmF0aW9uLTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJUYXJnZXQgRGVjYXkgNVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVGFyZ2V0IExvY2sgRGVjYXlcIixcbiAgICAgICAgdmFsdWU6IFwiMC43XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJyYWRhci1kZXByaXZhdGlvbi01XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiRW5oYW5jZWQgRUNNIDJcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkVDTSBSYW5nZVwiLFxuICAgICAgICB2YWx1ZTogXCIyMi41XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiU2Vpc21pYyBTZW5zb3IgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiU2Vpc21pYyBTZW5zb3JcIixcbiAgICAgICAgdmFsdWU6IFwiMTAwXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiUmFkYXIgRGVwcml2YXRpb24gNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiUmFkYXIgRGVwcml2YXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMjBcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJSYWRhciBEZXByaXZhdGlvbiA1XCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJSYWRhciBEZXByaXZhdGlvblwiLFxuICAgICAgICB2YWx1ZTogXCIyMFwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICAvKlxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgICAgICAgIEFVWElMSUFSWVxuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgKi9cbiAge1xuICAgIG5hbWU6IFwiQXV4aWxpYXJ5XCIsXG4gICAgbm9kZXM6IFtcbiAgICAgIHsgbmFtZTogXCJDb25zdW1hYmxlIFNsb3QgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQ29uc3VtYWJsZSBTbG90c1wiLFxuICAgICAgICB2YWx1ZTogXCIxXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInVhdi1kdXJhdGlvblwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiYWR2Li1zYWx2b3MtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlVBViBEdXJhdGlvblwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVUFWIER1cmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjEwXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcInVhdi1yYW5nZS0xXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiY2FwdHVyZS1hc3Npc3QtMVwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiZW5oYW5jZWQtY29vbHNob3QtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkFEVi4gU2Fsdm9zIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkFydGlsbGVyeSBTdHJpa2UgRHVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiZW5oYW5jZWQtY29vbHNob3QtMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImNhcHR1cmUtYXNzaXN0LTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImFkdi4tc2Fsdm9zLTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJVQVYgUmFuZ2UgMVwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVUFWIFNpZ2h0IFJhbmdlXCIsXG4gICAgICAgIHZhbHVlOiBcIjIwXCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImV4dHJhLXVhdlwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImVuaGFuY2VkLW5hcmMtMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkVuaGFuY2VkIENvb2xzaG90IDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNvb2xzaG90IEVmZmVjdGl2ZW5lc3NcIixcbiAgICAgICAgdmFsdWU6IFwiMjVcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiY2FwdHVyZS1hc3Npc3QtMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImVuaGFuY2VkLWNvb2xzaG90LTJcIixcbiAgICAgICAgcmlnaHRDaGlsZElkOiBcImNhcHR1cmUtYXNzaXN0LTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJBRFYuIFNhbHZvcyAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBcnRpbGxlcnkgU3RyaWtlIER1cmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjI1XCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiZW5oYW5jZWQtbmFyYy0yXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJleHBhbmRlZC1yZXNlcnZlc1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkV4dHJhIFVBVlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiVUFWIENhcGFjaXR5XCIsXG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwidWF2LXJhbmdlLTJcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJjb25zdW1hYmxlLXNsb3QtMlwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNhcHR1cmUgQXNzaXN0IDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlBvaW50IENhcHR1cmUgU3BlZWRcIixcbiAgICAgICAgdmFsdWU6IFwiNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJlbmhhbmNlZC1uYXJjLTFcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJjYXB0dXJlLWFzc2lzdC0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJlbmhhbmNlZC1jb29sc2hvdC0yXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ2FwdHVyZSBBc3Npc3QgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiUG9pbnQgQ2FwdHVyZSBTcGVlZFwiLFxuICAgICAgICB2YWx1ZTogXCI1XCIsXG4gICAgICAgIGxlZnRDaGlsZElkOiBcImVuaGFuY2VkLWNvb2xzaG90LTJcIixcbiAgICAgICAgY2VudGVyQ2hpbGRJZDogXCJjYXB0dXJlLWFzc2lzdC00XCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJlbmhhbmNlZC1uYXJjLTJcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJFeHBhbmRlZCBSZXNlcnZlc1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWRkaXRpb25hbCBBaXIvQXJ0eSBTdHJpa2VcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBjZW50ZXJDaGlsZElkOiBcImNvbnN1bWFibGUtc2xvdC0zXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJlbmhhbmNlZC1zcG90dGluZ1wiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIlVBViBSYW5nZSAyXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJVQVYgU2lnaHQgUmFuZ2VcIixcbiAgICAgICAgdmFsdWU6IFwiMjBcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJFbmhhbmNlZCBOQVJDIDFcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIk5BUkMgVmVsb2NpdHkgYW5kIER1cmF0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBcIjEwXCIsXG4gICAgICAgIHJpZ2h0Q2hpbGRJZDogXCJjYXB0dXJlLWFzc2lzdC0zXCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiRW5oYW5jZWQgQ29vbHNob3QgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQ29vbHNob3QgRWZmZWN0aXZlbmVzc1wiLFxuICAgICAgICB2YWx1ZTogXCIyNVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjYXB0dXJlLWFzc2lzdC0zXCIsXG4gICAgICAgIGNlbnRlckNoaWxkSWQ6IFwiY29vbGFudC1yZXNlcnZlc1wiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY2FwdHVyZS1hc3Npc3QtNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkVuaGFuY2VkIE5BUkMgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiTkFSQyBWZWxvY2l0eSBhbmQgRHVyYXRpb25cIixcbiAgICAgICAgdmFsdWU6IFwiMTBcIixcbiAgICAgICAgbGVmdENoaWxkSWQ6IFwiY2FwdHVyZS1hc3Npc3QtNFwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkVuaGFuY2VkIFNwb3R0aW5nXCIsXG4gICAgICAgIGF0dHJpYnV0ZTogXCJBaXIvQXJ0eSBTdHJpa2UgQWNjdXJhY3lcIixcbiAgICAgICAgdmFsdWU6IFwiMjBcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb25zdW1hYmxlIFNsb3QgMlwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWRkaXRpb25hbCBDb25zdW1hYmxlIFNsb3RcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNhcHR1cmUgQXNzaXN0IDNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIlJhdGUgb2YgQ2FwdHVyZVwiLFxuICAgICAgICB2YWx1ZTogXCI1XCJcbiAgICAgIH0sXG4gICAgICB7IG5hbWU6IFwiQ2FwdHVyZSBBc3Npc3QgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiUmF0ZSBvZiBDYXB0dXJlXCIsXG4gICAgICAgIHZhbHVlOiBcIjVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb25zdW1hYmxlIFNsb3QgM1wiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWRkaXRpb25hbCBDb25zdW1hYmxlIFNsb3RcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiXG4gICAgICB9LFxuICAgICAgeyBuYW1lOiBcIkNvb2xhbnQgUmVzZXJ2ZXNcIixcbiAgICAgICAgYXR0cmlidXRlOiBcIkNvb2xhbnQgUmVzZXJ2ZXNcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBsZWZ0Q2hpbGRJZDogXCJjb29sc2hvdC1jb29sZG93blwiLFxuICAgICAgICByaWdodENoaWxkSWQ6IFwiY29uc3VtYWJsZS1zbG90LTRcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb29sc2hvdCBDb29sZG93blwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQ29vbHNob3QgQ29vbGRvd25cIixcbiAgICAgICAgdmFsdWU6IFwiMjVcIlxuICAgICAgfSxcbiAgICAgIHsgbmFtZTogXCJDb25zdW1hYmxlIFNsb3QgNFwiLFxuICAgICAgICBhdHRyaWJ1dGU6IFwiQWRkaXRpb25hbCBDb25zdW1hYmxlIFNsb3RcIixcbiAgICAgICAgdmFsdWU6IFwiMVwiXG4gICAgICB9XG4gICAgXVxuICB9XG5dXG5cbmV4cG9ydCBjb25zdCBhdHRyaWJ1dGVUZW1wbGF0ZU1hcCA9IFtcbiAgeyBhdHRyaWJ1dGU6IFwiV2VhcG9uIFJhbmdlXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkxhc2VyIER1cmF0aW9uXCIsXG4gICAgdGVtcGxhdGU6IFwiLXt9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIldlYXBvbiBWZWxvY2l0eVwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJXZWFwb24gQ29vbGRvd25cIixcbiAgICB0ZW1wbGF0ZTogXCIte30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiTWlzc2lsZSBDcml0IERhbWFnZVwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJHYXVzcyBIZWxkIFRpbWVcIixcbiAgICB0ZW1wbGF0ZTogXCIre30gc2VjLlwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkFybW9yXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkFNUyBFZmZlY3RpdmVuZXNzXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIldlYXBvbiBIZWF0IEdlblwiLFxuICAgIHRlbXBsYXRlOiBcIi17fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJCYWxsaXN0aWMgQW1tb1wiLFxuICAgIHRlbXBsYXRlOiBcIit7fVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIk1pc3NpbGUgQW1tb1wiLFxuICAgIHRlbXBsYXRlOiBcIit7fVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIk1pc3NpbGUgU3ByZWFkXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkxCWCBTcHJlYWRcIixcbiAgICB0ZW1wbGF0ZTogXCIte30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiRmFsbCBEYW1hZ2VcIixcbiAgICB0ZW1wbGF0ZTogXCIte30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiVUFDIEphbSBDaGFuY2VcIixcbiAgICB0ZW1wbGF0ZTogXCIte30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiQ3JpdCBDaGFuY2UgKFJlY2VpdmVkKVwiLFxuICAgIHRlbXBsYXRlOiBcIi17fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJJbnRlcm5hbCBTdHJ1Y3R1cmVcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiQWNjZWxlcmF0aW9uXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkRlY2VsZXJhdGlvblwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJNYXggVG9yc28gSW5jbGluYXRpb25cIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiTWF4IEFybSBJbmNsaW5hdGlvblwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJUb3JzbyBUd2lzdCBTcGVlZFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJNYXggVG9yc28gVHdpc3RcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiVHVybiBTcGVlZFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJNYXggU3BlZWRcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSGVhdCBSZWR1Y3Rpb25cIixcbiAgICB0ZW1wbGF0ZTogXCIte30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiSnVtcCBKZXQgSW5pdGlhbCBCb29zdFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJKdW1wIEpldCBGb3J3YXJkIFRocnVzdFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJKdW1wIEpldCBCdXJuIFRpbWVcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiVGFzdGllciBHeXJvc1wiLFxuICAgIHRlbXBsYXRlOiBcIi17fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJTdGFydHVwIFNwZWVkXCIsXG4gICAgdGVtcGxhdGU6IFwiLXt9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkxlZ2dlZCBTcGVlZFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJIZWF0IENhcGFjaXR5XCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkhpbGwgQ2xpbWJcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiSGVhdCBEaXNzaXBhdGlvblwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJUYXJnZXQgSW5mbyBTcGVlZFwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJUYXJnZXQgUmV0ZW50aW9uXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9IG0uXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiU2Vuc29yIFJhbmdlXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIlRhcmdldCBMb2NrIERlY2F5XCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9IHNlYy5cIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJab29tIE1hZ25pZmllclwiLFxuICAgIHRlbXBsYXRlOiBcIit7fVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIlJhZGFyIERlcHJpdmF0aW9uXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIlNlaXNtaWMgU2Vuc29yXCIsXG4gICAgdGVtcGxhdGU6IFwie30gbS5cIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJFQ00gUmFuZ2VcIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiQ29uc3VtYWJsZSBTbG90c1wiLFxuICAgIHRlbXBsYXRlOiBcIit7fVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIlVBViBEdXJhdGlvblwiLFxuICAgIHRlbXBsYXRlOiBcIit7fSBzZWMuXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiVUFWIFNpZ2h0IFJhbmdlXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkFydGlsbGVyeSBTdHJpa2UgRHVyYXRpb25cIixcbiAgICB0ZW1wbGF0ZTogXCIre30lXCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiQ29vbHNob3QgRWZmZWN0aXZlbmVzc1wiLFxuICAgIHRlbXBsYXRlOiBcIit7fSVcIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJVQVYgQ2FwYWNpdHlcIixcbiAgICB0ZW1wbGF0ZTogXCIre31cIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJQb2ludCBDYXB0dXJlIFNwZWVkXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIk5BUkMgVmVsb2NpdHkgYW5kIER1cmF0aW9uXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkFkZGl0aW9uYWwgQWlyL0FydHkgU3RyaWtlXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9XCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiQWlyL0FydHkgU3RyaWtlIEFjY3VyYWN5XCIsXG4gICAgdGVtcGxhdGU6IFwiLXt9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkFkZGl0aW9uYWwgQ29uc3VtYWJsZSBTbG90XCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9XCJcbiAgfSxcbiAgeyBhdHRyaWJ1dGU6IFwiUmF0ZSBvZiBDYXB0dXJlXCIsXG4gICAgdGVtcGxhdGU6IFwiK3t9JVwiXG4gIH0sXG4gIHsgYXR0cmlidXRlOiBcIkNvb2xhbnQgUmVzZXJ2ZXNcIixcbiAgICB0ZW1wbGF0ZTogXCIre31cIlxuICB9LFxuICB7IGF0dHJpYnV0ZTogXCJDb29sc2hvdCBDb29sZG93blwiLFxuICAgIHRlbXBsYXRlOiBcIi17fSVcIlxuICB9XG5dXG4iLCJpbXBvcnQgeyBkZXRhY2hlZE5vZGVzQ291bnRlclVwZGF0ZWQsIGFsbG93RnJlZU5vZGVTZWxlY3Rpb24gfSBmcm9tIFwiLi9wbGFubmVyLmpzXCJcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVkTm9kZXNBcnJheSA9IFtdO1xuZXhwb3J0IHZhciBkZXRhY2hlZE5vZGVzQ291bnRlciA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKG5ld05hbWUsIG5ld0F0dHJpYnV0ZSwgbmV3VmFsdWUsIG5ld1ZhbHVlVGVtcGxhdGUsIG5ld0lkLCBuZXdMZWZ0Q2hpbGRJZCwgbmV3Q2VudGVyQ2hpbGRJZCwgbmV3UmlnaHRDaGlsZElkKSB7XG4gIHZhciBzZWxlY3RlZCA9IGZhbHNlO1xuICBsZXQgaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblxuICB0aGlzLm5hbWUgPSBuZXdOYW1lO1xuICB0aGlzLmF0dHJpYnV0ZSA9IG5ld0F0dHJpYnV0ZTtcbiAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICB0aGlzLnZhbHVlVGVtcGxhdGUgPSBuZXdWYWx1ZVRlbXBsYXRlXG4gIHRoaXMuaWQgPSBuZXdJZDtcblxuICB0aGlzLmxlZnRDaGlsZElkID0gbmV3TGVmdENoaWxkSWQsXG4gIHRoaXMuY2VudGVyQ2hpbGRJZCA9IG5ld0NlbnRlckNoaWxkSWQsXG4gIHRoaXMucmlnaHRDaGlsZElkID0gbmV3UmlnaHRDaGlsZElkO1xuICB0aGlzLnBhcmVudHMgPSBbXTtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gIHRoaXMuaGlnaGxpZ2h0ZWQgPSBoaWdobGlnaHRlZDtcbiAgXG4gIHRoaXMuaW5EZXRhY2hlZFN1YlRyZWVWYWx1ZSA9IGZhbHNlO1xuICB0aGlzLmluRGV0YWNoZWRTdWJUcmVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5EZXRhY2hlZFN1YlRyZWVWYWx1ZTtcbiAgfVxuICB0aGlzLm1hcmtBc0F0dGFjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYodGhpcy5pbkRldGFjaGVkU3ViVHJlZVZhbHVlKSB7XG4gICAgICAtLWRldGFjaGVkTm9kZXNDb3VudGVyO1xuICAgICAgdGhpcy5pbkRldGFjaGVkU3ViVHJlZVZhbHVlID0gZmFsc2U7XG4gICAgICBkZXRhY2hlZE5vZGVzQ291bnRlclVwZGF0ZWQoKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5tYXJrQXNEZXRhY2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKCF0aGlzLmluRGV0YWNoZWRTdWJUcmVlVmFsdWUpIHtcbiAgICAgICsrZGV0YWNoZWROb2Rlc0NvdW50ZXI7XG4gICAgICB0aGlzLmluRGV0YWNoZWRTdWJUcmVlVmFsdWUgPSB0cnVlO1xuICAgICAgZGV0YWNoZWROb2Rlc0NvdW50ZXJVcGRhdGVkKCk7XG4gICAgfVxuICB9XG4vKiAgXG4gICAgLy8gcHVibGljIGludGVyZmFjZVxuICByZXR1cm4ge1xuICAgIFxuICAgIGluRGV0YWNoZWRTdWJUcmVlOiBpbkRldGFjaGVkU3ViVHJlZSxcbiAgICBtYXJrQXNBdHRhY2hlZDogbWFya0FzQXR0YWNoZWQsXG4gICAgbWFya0FzRGV0YWNoZWQ6IG1hcmtBc0RldGFjaGVkXG4qL1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0Tm9kZSh2YWx1ZSwgbm9kZSkge1xuLy8gICAgY29uc29sZS5sb2coXCJub2RlTmFtZSBcIiArIG5vZGUubmFtZSArIFwiIGhpZ2hsaWdodGVkIHN0YXRlIGlzIFwiICsgbm9kZS5oaWdodGxpZ2h0ZWQpO1xuICBub2RlLnNlbGVjdGVkID0gdmFsdWU7XG4gIGlmKHZhbHVlID09IGZhbHNlKSB7XG4gICAgbm9kZS5tYXJrQXNBdHRhY2hlZCgpO1xuICAgIGZvciAobGV0IGNoaWxkTm9kZSBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGROb2RlLnNlbGVjdGVkICYmICFjaGlsZE5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgICBjaGlsZE5vZGUubWFya0FzRGV0YWNoZWQoKTtcbiAgICAgICAgZm9yIChsZXQgcGFyZW50Tm9kZSBvZiBjaGlsZE5vZGUucGFyZW50cykge1xuICAgICAgICAgIGlmIChwYXJlbnROb2RlLnNlbGVjdGVkICYmICFwYXJlbnROb2RlLmluRGV0YWNoZWRTdWJUcmVlKCkpIHtcbiAgICAgICAgICAgIGNoaWxkTm9kZS5tYXJrQXNBdHRhY2hlZCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZE5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgICAgIHByb3BhZ2F0ZURldGFjaG1lbnQoY2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoIW5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgZm9yKGxldCBjaGlsZE5vZGUgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBpZihjaGlsZE5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgICAgIGNoaWxkTm9kZS5tYXJrQXNBdHRhY2hlZCgpO1xuICAgICAgICAgIHByb3BhZ2F0ZUF0dGFjaG1lbnQoY2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB1cGRhdGVOb2RlQ29sb3Iobm9kZSk7XG5cbiAgZm9yIChsZXQgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgIHVwZGF0ZU5vZGVDb2xvcihjaGlsZCk7XG4gICAgLy91cGRhdGUgY29sb3IgZm9yIG90aGVyIHBhcmVudHMgb2YgY2hpbGRyZW4sIHNvIGF2YWlsYWJsZSBvbmVzIGZvciBkZXNlbGVjdGlvbiBiZWZvcmUgYmVjb21lIGxvY2tlZCBpZiByZXF1aXJlZC5cbiAgICBmb3IgKGxldCBjaGlsZFBhcmVudE5vZGUgb2YgY2hpbGQucGFyZW50cykge1xuICAgICAgaWYoY2hpbGRQYXJlbnROb2RlICE9IG5vZGUpIHtcbiAgICAgICAgdXBkYXRlTm9kZUNvbG9yKGNoaWxkUGFyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBmb3IgKGxldCBwYXJlbnQgb2Ygbm9kZS5wYXJlbnRzKSB7XG4gICAgdXBkYXRlTm9kZUNvbG9yKHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcGFnYXRlQXR0YWNobWVudChub2RlKSB7XG4gIGZvciAobGV0IGNoaWxkTm9kZSBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkTm9kZS5pbkRldGFjaGVkU3ViVHJlZSgpKSB7XG4gICAgICBjaGlsZE5vZGUubWFya0FzQXR0YWNoZWQoKTtcbiAgICAgIHVwZGF0ZU5vZGVDb2xvcihjaGlsZE5vZGUpO1xuICAgICAgcHJvcGFnYXRlQXR0YWNobWVudChjaGlsZE5vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9wYWdhdGVEZXRhY2htZW50KG5vZGUpIHtcbiAgZm9yIChsZXQgY2hpbGROb2RlIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICBpZiAoY2hpbGROb2RlLnNlbGVjdGVkICYmICFjaGlsZE5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgY2hpbGROb2RlLm1hcmtBc0RldGFjaGVkKCk7XG4gICAgICBmb3IgKGxldCBwYXJlbnROb2RlIG9mIGNoaWxkTm9kZS5wYXJlbnRzKSB7XG4gICAgICAgIGlmIChwYXJlbnROb2RlLnNlbGVjdGVkICYmICFwYXJlbnROb2RlLmluRGV0YWNoZWRTdWJUcmVlKCkpIHtcbiAgICAgICAgICBjaGlsZE5vZGUubWFya0FzQXR0YWNoZWQoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkTm9kZS5pbkRldGFjaGVkU3ViVHJlZSgpKSB7XG4gICAgICAgIHVwZGF0ZU5vZGVDb2xvcihjaGlsZE5vZGUpO1xuICAgICAgICBwcm9wYWdhdGVEZXRhY2htZW50KGNoaWxkTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoaWdobGlnaHROb2RlKG5vZGUpIHtcbiAgaWYobm9kZSkge1xuICAgIG5vZGUuaGlnaGxpZ2h0ZWQgPSB0cnVlO1xuICAgIHVwZGF0ZU5vZGVDb2xvcihub2RlKTtcbiAgICBoaWdobGlnaHRlZE5vZGVzQXJyYXkucHVzaChub2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya0FzQXR0YWNoZWRSZWN1cnNpdmVseShjdXJyZW50Tm9kZXMpXG57XG4gIGxldCBuZXh0TGV2ZWxOb2RlcyA9IFtdO1xuICBmb3IgKGxldCBjdXJyZW50Tm9kZSBvZiBjdXJyZW50Tm9kZXMpIHtcbiAgICBpZiAoIWN1cnJlbnROb2RlLnNlbGVjdGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgcGFyZW50Tm9kZSBvZiBjdXJyZW50Tm9kZS5wYXJlbnRzKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZS5zZWxlY3RlZCAmJiAhcGFyZW50Tm9kZS5pbkRldGFjaGVkU3ViVHJlZSgpKSB7XG4gICAgICAgIGN1cnJlbnROb2RlLm1hcmtBc0F0dGFjaGVkKCk7XG4gICAgICAgIG5leHRMZXZlbE5vZGVzID0gbmV4dExldmVsTm9kZXMuY29uY2F0KGN1cnJlbnROb2RlLmNoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChuZXh0TGV2ZWxOb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgbWFya0FzQXR0YWNoZWRSZWN1cnNpdmVseShuZXh0TGV2ZWxOb2Rlcyk7XG4gIH1cbn1cblxuLy92aXN1YWwgbWV0aG9kc1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTm9kZUNvbG9yKG5vZGUpIHtcbiAgdmFyIG1vZGUgPSBcIlwiO1xuICBpZiAobm9kZS5oaWdobGlnaHRlZClcbiAge1xuICAgIG1vZGUgPSBub2RlLnNlbGVjdGVkID8gXCJoaWdobGlnaHRlZFNlbGVjdGVkXCIgOiBcImhpZ2hsaWdodGVkTm90U2VsZWN0ZWRcIjtcbiAgfSBlbHNlIHtcbiAgICBpZiAobm9kZS5zZWxlY3RlZCkge1xuICAgICAgaWYgKHNhZmVUb0Rlc2VsZWN0KG5vZGUpKSB7XG4gICAgICAgIG1vZGUgPSBcInNlbGVjdGVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlID0gXCJsb2NrZWRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChhbGxvd0ZyZWVOb2RlU2VsZWN0aW9uID09IGZhbHNlICYmIG5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24obm9kZSkpIHx8IG5vZGUucGFyZW50cy5sZW5ndGggPT0gMCkge1xuICAgICAgICBtb2RlID0gXCJhdmFpbGFibGVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGUgPSBcInVuYXZhaWxhYmxlXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmKG1vZGUubGVuZ3RoID4gMCkge1xuLy8gICAgICBjb25zb2xlLmxvZyhub2RlLm5hbWUgKyBcIiBtb2RlIFwiICsgbW9kZSArIFwiIHNlbGVjdGVkIFwiICsgbm9kZS5zZWxlY3RlZCArIFwiIGhpZ2ggXCIgKyBub2RlLmhpZ2hsaWdodGVkKTtcbiAgICBzZXROb2RlRWxlbWVudENvbG9ycyhub2RlLCBtb2RlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhcIkNhbid0IGRldGVybWluYXRlIG5vZGUgY29sb3IgKG1vZGUpIGZvciBcIiArIG5vZGUubmFtZSArIFwiIFwiICsgbm9kZS5pZCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgcGFyZW50SXNTZWxlY3RlZCA9IGZhbHNlO1xuICBmb3IgKGxldCBwYXJlbnROb2RlIG9mIG5vZGUucGFyZW50cykge1xuICAgIHBhcmVudElzU2VsZWN0ZWQgPSAocGFyZW50Tm9kZS5zZWxlY3RlZCAmJiAhcGFyZW50Tm9kZS5pbkRldGFjaGVkU3ViVHJlZSgpKSB8fCBwYXJlbnRJc1NlbGVjdGVkO1xuICB9XG4gIHBhcmVudElzU2VsZWN0ZWQgPSBwYXJlbnRJc1NlbGVjdGVkIHx8IChub2RlLnBhcmVudHMubGVuZ3RoID09PSAwKTtcbiAgcmV0dXJuIHBhcmVudElzU2VsZWN0ZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE5vZGVFbGVtZW50Q29sb3JzKG5vZGUsIHN0YXRlKSB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGUuaWQpLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubm9kZS1lbGVtZW50XCIpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJlbW92ZU5vZGVDbGFzc2VzKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChzdGF0ZSk7XG4gIH0pO1xuICBsZXQgYm9yZGVyRWxlbWVudCA9IFwiYXR0YWNoZWRcIjtcbiAgaWYobm9kZS5zZWxlY3RlZCAmJiBub2RlLmluRGV0YWNoZWRTdWJUcmVlKCkpIHtcbiAgICBib3JkZXJFbGVtZW50ID0gXCJkZXRhY2hlZFwiO1xuICB9XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGUuaWQpLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaGV4LWNvbXBvbmVudFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhdHRhY2hlZFwiKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkZXRhY2hlZFwiKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoYm9yZGVyRWxlbWVudCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FmZVRvRGVzZWxlY3Qobm9kZSkge1xuICB2YXIgc2FmZVRvRGVzZWxlY3QgPSB0cnVlO1xuICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkLnNlbGVjdGVkKSB7XG4gICAgICAvLyBTZXQgbm9kZSBpbiBxdWVzdGlvbiB0byBkZXNlbGVjdGVkIHRvIHNlZSBpZiB0aGUgY2hsaWQgaXMgc3RpbGwgZWxlZ2libGUgZm9yIHNlbGVjdGlvblxuICAgICAgLy8gYmFzZWQgb24gb3RoZXIgcGFyZW50cy4gIFdlXCJsbCBzZXQgaXQgYmFjayB0byBzZWxlY3RlZCBhZnRlciB3ZVwicmUgZG9uZSB3aXRoIHRoYXQgY2hlY2suXG4gICAgICBub2RlLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBzYWZlVG9EZXNlbGVjdCA9IG5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24oY2hpbGQpICYmIHNhZmVUb0Rlc2VsZWN0O1xuICAgICAgbm9kZS5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBzYWZlVG9EZXNlbGVjdDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9kZUNsYXNzZXMobm9kZUVsZW1lbnQpIHtcbiAgbm9kZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICBub2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYXZhaWxhYmxlXCIpO1xuICBub2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibG9ja2VkXCIpO1xuICBub2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidW5hdmFpbGFibGVcIik7XG4gIG5vZGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWdobGlnaHRlZFNlbGVjdGVkXCIpO1xuICBub2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlnaGxpZ2h0ZWROb3RTZWxlY3RlZFwiKTtcbn1cbiIsImltcG9ydCB7IHRyZWVTb3VyY2UsIGF0dHJpYnV0ZVRlbXBsYXRlTWFwIH0gZnJvbSBcIi4vdHJlZS5qc1wiXG5pbXBvcnQgeyBOb2RlLCBzZWxlY3ROb2RlLCBoaWdobGlnaHROb2RlLCBtYXJrQXNBdHRhY2hlZFJlY3Vyc2l2ZWx5LCB1cGRhdGVOb2RlQ29sb3IsIG5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24sIHNhZmVUb0Rlc2VsZWN0LCBoaWdobGlnaHRlZE5vZGVzQXJyYXksIGRldGFjaGVkTm9kZXNDb3VudGVyIH0gZnJvbSBcIi4vbm9kZS5qc1wiXG5cbmV4cG9ydCB2YXIgYWxsb3dGcmVlTm9kZVNlbGVjdGlvbiA9IHRydWU7XG52YXIgZGlzcGxheUFsbEJvbnVzZXMgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaGVkTm9kZXNDb3VudGVyVXBkYXRlZCgpIHtcbiAgaWYgKGRldGFjaGVkTm9kZXNDb3VudGVyID4gMCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzZWxlY3QtZGV0YWNoZWQtbm9kZXMtYnV0dG9uXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzZWxlY3QtZGV0YWNoZWQtbm9kZXMtYnV0dG9uXCIpLmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICB9XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuXG4gIGxldCBtYXhTa2lsbE5vZGVzID0gOTE7XG4gIGxldCBjYmlsbHNQZXJOb2RlID0gNDUwMDA7XG4gIGxldCB4cFBlck5vZGUgPSA4MDA7XG5cbiAgbGV0IFNraWxsVHJlZSA9IChmdW5jdGlvbigpIHtcblxuICAgIHZhciBhY3RpdmVUcmVlTmFtZSA9IHRyZWVTb3VyY2VbMF0ubmFtZTtcbiAgICBsZXQgc2tpbGxUcmVlcyA9IGJ1aWxkU2tpbGxUcmVlcyh0cmVlU291cmNlKTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkU2tpbGxUcmVlcyh0cmVlU291cmNlKSB7XG4gICAgICBsZXQgc2tpbGxUcmVlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgdHJlZURlZiBvZiB0cmVlU291cmNlKSB7XG4gICAgICAgIGxldCBza2lsbFRyZWUgPSB7fVxuICAgICAgICBza2lsbFRyZWUubmFtZSA9IHRyZWVEZWYubmFtZTtcbiAgICAgICAgc2tpbGxUcmVlLm5vZGVzID0gW107XG4gICAgICAgIGZvciAobGV0IG5vZGVEZWYgb2YgdHJlZURlZi5ub2Rlcykge1xuICAgICAgICAgIHNraWxsVHJlZS5ub2Rlcy5wdXNoKG5ldyBOb2RlKG5vZGVEZWYubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlRGVmLmF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG5vZGVEZWYudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZWYudmFsdWVUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlTmFtZVRvSWQobm9kZURlZi5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlRGVmLmxlZnRDaGlsZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVEZWYuY2VudGVyQ2hpbGRJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlRGVmLnJpZ2h0Q2hpbGRJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJvb3ROb2RlID0gc2tpbGxUcmVlLm5vZGVzWzBdO1xuICAgICAgICBidWlsZERlcGVuZGVuY2VzKHNraWxsVHJlZS5ub2Rlcywgcm9vdE5vZGUpO1xuICAgICAgICBza2lsbFRyZWVzLnB1c2goc2tpbGxUcmVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBza2lsbFRyZWVzO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBidWlsZERlcGVuZGVuY2VzKG5vZGVzTGlzdCwgY3VycmVudE5vZGUpIHtcblxuICAgICAgdmFyIGNoaWxkcmVuUXVhbnRpdHkgPSAwO1xuICAgICAge1xuICAgICAgICBpZiAoY3VycmVudE5vZGUubGVmdENoaWxkSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgKytjaGlsZHJlblF1YW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50Tm9kZS5jZW50ZXJDaGlsZElkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICsrY2hpbGRyZW5RdWFudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudE5vZGUucmlnaHRDaGlsZElkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICsrY2hpbGRyZW5RdWFudGl0eTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBzdWJub2RlIG9mIG5vZGVzTGlzdCkge1xuICAgICAgICBpZiAoY3VycmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IGNoaWxkcmVuUXVhbnRpdHkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZihzdWJub2RlLmlkID09IGN1cnJlbnROb2RlLmxlZnRDaGlsZElkIHx8IHN1Ym5vZGUuaWQgPT0gY3VycmVudE5vZGUuY2VudGVyQ2hpbGRJZCB8fCBzdWJub2RlLmlkID09IGN1cnJlbnROb2RlLnJpZ2h0Q2hpbGRJZCkge1xuICAgICAgICAgIGN1cnJlbnROb2RlLmNoaWxkcmVuLnB1c2goc3Vibm9kZSk7XG4gICAgICAgICAgc3Vibm9kZS5wYXJlbnRzLnB1c2goY3VycmVudE5vZGUpO1xuICAgICAgICAgIFxuICAgICAgICAgIGJ1aWxkRGVwZW5kZW5jZXMobm9kZXNMaXN0LCBzdWJub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFjdGl2ZVRyZWVOYW1lKG5ld05hbWUpIHtcbiAgICAgIGFjdGl2ZVRyZWVOYW1lID0gbmV3TmFtZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVUcmVlTmFtZSgpIHtcbiAgICAgIHJldHVybiBhY3RpdmVUcmVlTmFtZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUcmVlKHRyZWVOYW1lKSB7XG4gICAgICBmb3IgKGxldCB0cmVlIG9mIHRyZWVzKSB7XG4gICAgICAgIGlmICh0cmVlLm5hbWUgPSB0cmVlTmFtZSkge1xuICAgICAgICAgIHJldHVybiB0cmVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VHJlZXMoKSB7XG4gICAgICByZXR1cm4gc2tpbGxUcmVlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUcmVlKHRyZWVOYW1lKSB7XG4gICAgICBpZiAodHJlZU5hbWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBnZXRUcmVlKGFjdGl2ZVRyZWVOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IHRyZWUgb2Ygc2tpbGxUcmVlcykge1xuICAgICAgICAgIGlmICh0cmVlLm5hbWUgPT0gdHJlZU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE5vZGUobm9kZUlkKSB7XG4gICAgICBmb3IgKGxldCB0cmVlIG9mIHNraWxsVHJlZXMpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiB0cmVlLm5vZGVzKSB7XG4gICAgICAgICAgaWYgKG5vZGUuaWQgPT0gbm9kZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXROb2RlQ291bnQodHJlZU5hbWUpIHtcbiAgICAgIHZhciBub2RlQ291bnQgPSAwO1xuICAgICAgaWYgKHRyZWVOYW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZ2V0VHJlZSh0cmVlTmFtZSkubm9kZXMubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgdHJlZSBvZiBza2lsbFRyZWVzKSB7XG4gICAgICAgICAgbm9kZUNvdW50ID0gZ2V0Tm9kZUNvdW50KHRyZWUubmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlQ291bnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0ZWROb2Rlcyh0cmVlTmFtZSkge1xuICAgICAgbGV0IHNlbGVjdGVkTm9kZXMgPSBbXTtcblxuICAgICAgaWYgKHRyZWVOYW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIGdldFRyZWUodHJlZU5hbWUpLm5vZGVzKSB7XG4gICAgICAgICAgaWYgKG5vZGUuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IHNraWxsVHJlZSBvZiBza2lsbFRyZWVzKSB7XG4gICAgICAgICAgc2VsZWN0ZWROb2RlcyA9IHNlbGVjdGVkTm9kZXMuY29uY2F0KGdldFNlbGVjdGVkTm9kZXMoc2tpbGxUcmVlLm5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdGVkTm9kZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hpbGRyZW5PZihub2RlKSB7XG4gICAgICBsZXQgY2hpbGROb2RlcyA9IFtdO1xuICAgICAgcHVzaElmRGVmaW5lZChjaGlsZE5vZGVzLCBnZXROb2RlKG5vZGUubGVmdENoaWxkSWQpKTtcbiAgICAgIHB1c2hJZkRlZmluZWQoY2hpbGROb2RlcywgZ2V0Tm9kZShub2RlLmNlbnRlckNoaWxkSWQpKTtcbiAgICAgIHB1c2hJZkRlZmluZWQoY2hpbGROb2RlcywgZ2V0Tm9kZShub2RlLnJpZ2h0Q2hpbGRJZCkpO1xuICAgICAgcmV0dXJuIGNoaWxkTm9kZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50c09mKG5vZGUpIHtcbiAgICAgIGxldCBwYXJlbnROb2RlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgdHJlZSBvZiBza2lsbFRyZWVzKSB7XG4gICAgICAgIGZvciAobGV0IHBvdGVudGlhbFBhcmVudCBvZiB0cmVlLm5vZGVzKSB7XG4gICAgICAgICAgaWYgKHBvdGVudGlhbFBhcmVudC5sZWZ0Q2hpbGRJZCA9PSBub2RlLmlkIHx8IHBvdGVudGlhbFBhcmVudC5jZW50ZXJDaGlsZElkID09IG5vZGUuaWQgfHwgcG90ZW50aWFsUGFyZW50LnJpZ2h0Q2hpbGRJZCA9PSBub2RlLmlkKSB7XG4gICAgICAgICAgICBwYXJlbnROb2Rlcy5wdXNoKHBvdGVudGlhbFBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50Tm9kZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaElmRGVmaW5lZChjb2xsZWN0aW9uLCBub2RlKSB7XG4gICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbGxlY3Rpb24ucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwdWJsaWMgaW50ZXJmYWNlXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEFjdGl2ZVRyZWVOYW1lOiBnZXRBY3RpdmVUcmVlTmFtZSxcbiAgICAgIHNldEFjdGl2ZVRyZWVOYW1lOiBzZXRBY3RpdmVUcmVlTmFtZSxcbiAgICAgIGdldFRyZWU6IGdldFRyZWUsXG4gICAgICBnZXRUcmVlczogZ2V0VHJlZXMsXG4gICAgICBnZXROb2RlOiBnZXROb2RlLFxuICAgICAgZ2V0Tm9kZUNvdW50OiBnZXROb2RlQ291bnQsXG4gICAgICBnZXRTZWxlY3RlZE5vZGVzOiBnZXRTZWxlY3RlZE5vZGVzLFxuICAgICAgcGFyZW50c09mOiBwYXJlbnRzT2YsXG4gICAgICBjaGlsZHJlbk9mOiBjaGlsZHJlbk9mXG4gICAgfVxuXG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gYnVpbGRVSSh0cmVlcykge1xuICAgIHRyZWVzLmZvckVhY2goZnVuY3Rpb24odHJlZSwgaW5kZXgpIHtcbiAgICAgIGJ1aWxkVGFiKHRyZWUsIGluZGV4KTtcbiAgICAgIGJ1aWxkVHJlZURpc3BsYXkodHJlZSk7XG4gICAgfSk7XG4gICAgdXBkYXRlTm9kZUNvdW50ZXJzKCk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2RlLXRvdGFsXCIpLnRleHRDb250ZW50ID0gbWF4U2tpbGxOb2RlcztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlc1swXS5uYW1lLnRvTG93ZXJDYXNlKCkgKyBcIi10YWJcIikuY2xpY2soKTtcbiAgfVxuXG4gIGJ1aWxkVUkoU2tpbGxUcmVlLmdldFRyZWVzKCkpO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkVGFiKHRyZWUsIGluZGV4KSB7XG4gICAgbGV0IHRhYkhlaWdodCA9IDQwOyAvLyBtYXRjaGVzIGVsZW1lbnQgaGVpZ2h0IGRlZmluZWQgaW4gcGxhbm5lci5jc3NcbiAgICBsZXQgdG9wT2Zmc2V0ID0gNTA7XG4gICAgbGV0IHRhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhYkVsZW1lbnQuaWQgPSBzdHJpbmdUb0Nzcyh0cmVlLm5hbWUgKyBcIi10YWJcIik7XG4gICAgdGFiRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFiXCIpO1xuICAgIHRhYkVsZW1lbnQuc3R5bGUudG9wID0gKDQwICogaW5kZXgpICsgNTUgKyBcInB4XCI7XG4gICAgdGFiRWxlbWVudC50ZXh0Q29udGVudCA9IHRyZWUubmFtZTtcblxuICAgIGxldCBjb3VudGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY291bnRlckVsZW1lbnQuaWQgPSB0cmVlLm5hbWUudG9Mb3dlckNhc2UoKSArIFwiLXRhYi1jb3VudGVyXCI7XG4gICAgY291bnRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYi1jb3VudGVyXCIpO1xuICAgIGNvdW50ZXJFbGVtZW50LnRleHRDb250ZW50ID0gXCIwIC8gXCIgKyBTa2lsbFRyZWUuZ2V0Tm9kZUNvdW50KHRyZWUubmFtZSk7XG4gICAgdGFiRWxlbWVudC5hcHBlbmRDaGlsZChjb3VudGVyRWxlbWVudCk7XG5cbiAgICB0YWJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiXCIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcbiAgICAgIH0pO1xuICAgICAgdGFiRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICBjaGFuZ2VTa2lsbFRyZWUodHJlZS5uYW1lKTtcbiAgICAgIGlmICghZGlzcGxheUFsbEJvbnVzZXMpIHtcbiAgICAgICAgdXBkYXRlQm9udXNlcygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b3RhbC1ub2Rlcy1kaXNwbGF5XCIpLmFmdGVyKHRhYkVsZW1lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRUcmVlRGlzcGxheSh0cmVlKSB7XG4gICAgbGV0IHRyZWVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0cmVlRWxlbWVudC5pZCA9IHRyZWVOYW1lVG9JZCh0cmVlLm5hbWUpO1xuICAgIHRyZWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJza2lsbC10cmVlXCIpO1xuICAgIHRyZWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3JhcGgtdmlld1wiKS5hcHBlbmRDaGlsZCh0cmVlRWxlbWVudCk7XG5cbiAgICAvLyBUT0RPOiBuZWVkIHRvIGRvIHNvbWV0aGluZyBoZXJlIHRvIHNvcnQgdGhlIG5vZGUgYXJyYXkuICBQcm9iYWJseSBzZWFyY2ggaXQgZWFjaFxuICAgIC8vIHRpbWUgeW91IGFkZCBhIG5vZGUgYW5kIGFkZCB0aGUgY2hpbGRyZW4gb2YgdGhhdCBub2RlIHRvIGEgcXVldWUgdG8gYmUgdGhlIG5leHQgbG9hZGVkXG5cbiAgICBsZXQgeE9mZnNldCA9IDY1O1xuICAgIGxldCB5T2Zmc2V0ID0gMzg7XG4gICAgdmFyIGxlZnRtb3N0Tm9kZUVsZW1lbnQgPSAwO1xuICAgIHZhciByaWdodG1vc3ROb2RlRWxlbWVudCA9IDA7XG5cbiAgICBmb3IgKGxldCBub2RlIG9mIHRyZWUubm9kZXMpIHtcblxuICAgICAgbGV0IG5vZGVGcmFtZUVsZW1lbnQgPSBidWlsZE5vZGVFbGVtZW50KG5vZGUpO1xuXG4gICAgICAvLyB0aGUgZmlyc3QgZWxlbWVudCBpbiBub2RlcyBpcyB0aGUgcm9vdCBub2RlLCBzbyBpdCBzdGFydHMgYXZhaWxhYmxlXG4gICAgICBpZiAobm9kZSA9PSB0cmVlLm5vZGVzWzBdKVxuICAgICAgICBub2RlRnJhbWVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubm9kZS1lbGVtZW50XCIpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImF2YWlsYWJsZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbm9kZUZyYW1lRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5vZGUtZWxlbWVudFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ1bmF2YWlsYWJsZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBub2RlRnJhbWVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaGV4LWNvbXBvbmVudFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYXR0YWNoZWRcIik7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHBhcmVudCA9IG5vZGUucGFyZW50c1swXTtcbiAgICAgIGlmIChwYXJlbnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCByZWxhdGl2ZUNoaWxkUG9zdGlpb24gPSBnZXRSZWxhdGl2ZUNoaWxkUG9zaXRpb24ocGFyZW50LCBub2RlLmlkKTtcbiAgICAgICAgbGV0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnQuaWQpO1xuXG4gICAgICAgIGxldCBwYXJlbnRUb3AgPSBkaW1lbnNpb25Bc051bWJlcihwYXJlbnRFbGVtZW50LnN0eWxlLnRvcCk7XG4gICAgICAgIGxldCBwYXJlbnRMZWZ0ID0gZGltZW5zaW9uQXNOdW1iZXIocGFyZW50RWxlbWVudC5zdHlsZS5sZWZ0KTtcbiAgICAgICAgaWYgKHJlbGF0aXZlQ2hpbGRQb3N0aWlvbiA9PSBcImxlZnRcIikge1xuICAgICAgICAgIG5vZGVGcmFtZUVsZW1lbnQuc3R5bGUudG9wID0gcGFyZW50VG9wICsgeU9mZnNldCArIFwicHhcIjtcbiAgICAgICAgICBub2RlRnJhbWVFbGVtZW50LnN0eWxlLmxlZnQgPSBwYXJlbnRMZWZ0IC0geE9mZnNldCArIFwicHhcIjtcbiAgICAgICAgfSBlbHNlIGlmIChyZWxhdGl2ZUNoaWxkUG9zdGlpb24gPT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgbm9kZUZyYW1lRWxlbWVudC5zdHlsZS50b3AgPSBwYXJlbnRUb3AgKyB5T2Zmc2V0ICsgXCJweFwiO1xuICAgICAgICAgIG5vZGVGcmFtZUVsZW1lbnQuc3R5bGUubGVmdCA9IHBhcmVudExlZnQgKyB4T2Zmc2V0ICsgXCJweFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGVGcmFtZUVsZW1lbnQuc3R5bGUudG9wID0gcGFyZW50VG9wICsgKHlPZmZzZXQgKiAyKSArIFwicHhcIjtcbiAgICAgICAgICBub2RlRnJhbWVFbGVtZW50LnN0eWxlLmxlZnQgPSBwYXJlbnRMZWZ0ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlRnJhbWVFbGVtZW50LnN0eWxlLnRvcCA9IFwiMjVweFwiO1xuICAgICAgICBub2RlRnJhbWVFbGVtZW50LnN0eWxlLmxlZnQgPSBcIjI2cHhcIjtcbiAgICAgIH1cblxuICAgICAgbGV0IGxlZnRQb3NpdGlvbiA9IGRpbWVuc2lvbkFzTnVtYmVyKG5vZGVGcmFtZUVsZW1lbnQuc3R5bGUubGVmdCk7XG4gICAgICBpZiAobGVmdFBvc2l0aW9uIDwgbGVmdG1vc3ROb2RlRWxlbWVudCkge1xuICAgICAgICBsZWZ0bW9zdE5vZGVFbGVtZW50ID0gbGVmdFBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKGxlZnRQb3NpdGlvbiA+IHJpZ2h0bW9zdE5vZGVFbGVtZW50KSB7XG4gICAgICAgIHJpZ2h0bW9zdE5vZGVFbGVtZW50ID0gbGVmdFBvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICB0cmVlRWxlbWVudC5hcHBlbmRDaGlsZChub2RlRnJhbWVFbGVtZW50KTtcblxuICAgICAgbm9kZUZyYW1lRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICBub2RlQ2xpY2tlZChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgICAgbm9kZUZyYW1lRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgbm9kZUhvdmVyZWQobm9kZSwgZSk7XG4gICAgICB9KTtcbiAgICAgIG5vZGVGcmFtZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBub2RlVW5Ib3ZlcmVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG5vZGVXaWR0aCA9IDUyOyAvLyB3aWR0aCBvZiBhIGdyYXBoIG5vZGUsIHBlciBwbGFubmVyLmNzc1xuICAgIGxldCBwYWRkaW5nID0gMjU7IC8vIFwicGFkZGluZ1wiIGhlcmUgcmF0aGVyIHRoYW4gaW4gY3NzIGJlY2F1c2UgXCJhYnNvbHV0ZVwiIHBvc2l0aW9uaW5nIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGUgZWxlbWVudHMgdGhyb3dzIG9mZiBhbGlnbm1lbnQgb2YgY3NzIHBhZGRpbmdcbiAgICBsZXQgdHJlZVdpZHRoID0gcmlnaHRtb3N0Tm9kZUVsZW1lbnQgLSBsZWZ0bW9zdE5vZGVFbGVtZW50ICsgbm9kZVdpZHRoICsgKHBhZGRpbmcgKiAyKTtcbiAgICB0cmVlRWxlbWVudC5zdHlsZS53aWR0aCA9IHRyZWVXaWR0aCArIFwicHhcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlTmFtZVRvSWQodHJlZS5uYW1lKSkucXVlcnlTZWxlY3RvckFsbChcIi5ncmFwaC1ub2RlXCIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBsZXQgbmV3TGVmdCA9IGRpbWVuc2lvbkFzTnVtYmVyKGVsLnN0eWxlLmxlZnQpICsgKC1sZWZ0bW9zdE5vZGVFbGVtZW50KSArIHBhZGRpbmcgKyBcInB4XCI7XG4gICAgICBlbC5zdHlsZS5sZWZ0ID0gbmV3TGVmdDtcbiAgICB9KTtcblxuICAgIGZvciAobGV0IG5vZGUgb2YgdHJlZS5ub2Rlcykge1xuICAgICAgbGV0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLmlkKTtcbiAgICAgIGlmIChub2RlLmxlZnRDaGlsZElkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgbGVmdENoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5vZGUubGVmdENoaWxkSWQpO1xuICAgICAgICBpZiAobGVmdENoaWxkRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJsZWZ0IGNoaWxkIGlkIHJlc3VsdHMgaW4gbnVsbCA9IFwiICsgbm9kZS5sZWZ0Q2hpbGRJZCArIFwiIGZvciBwYXJlbnQgXCIgKyBwYXJlbnRFbGVtZW50LmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmF3TGluZUJldHdlZW5Ob2RlcyhwYXJlbnRFbGVtZW50LCBsZWZ0Q2hpbGRFbGVtZW50LCB0cmVlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNlbnRlckNoaWxkSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBjZW50ZXJDaGlsZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLmNlbnRlckNoaWxkSWQpO1xuICAgICAgICBpZiAoY2VudGVyQ2hpbGRFbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImNlbnRlciBjaGlsZCBpZCByZXN1bHRzIGluIG51bGwgPSBcIiArIG5vZGUuY2VudGVyQ2hpbGRJZCArIFwiIGZvciBwYXJlbnQgXCIgKyBwYXJlbnRFbGVtZW50LmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmF3TGluZUJldHdlZW5Ob2RlcyhwYXJlbnRFbGVtZW50LCBjZW50ZXJDaGlsZEVsZW1lbnQsIHRyZWVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUucmlnaHRDaGlsZElkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcmlnaHRDaGlsZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChub2RlLnJpZ2h0Q2hpbGRJZCk7XG4gICAgICAgIGlmIChyaWdodENoaWxkRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJyaWdodCBjaGlsZCBpZCByZXN1bHRzIGluIG51bGwgPSBcIiArIG5vZGUucmlnaHRDaGlsZElkICsgXCIgZm9yIHBhcmVudCBcIiArIHBhcmVudEVsZW1lbnQuaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYXdMaW5lQmV0d2Vlbk5vZGVzKHBhcmVudEVsZW1lbnQsIHJpZ2h0Q2hpbGRFbGVtZW50LCB0cmVlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZE5vZGVFbGVtZW50KG5vZGUpIHtcbiAgICBsZXQgbm9kZUZyYW1lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbGV0IGhleFRvcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxldCBub2RlVGV4dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxldCBub2RlVmFsdWVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsZXQgaGV4Qm90dG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICBub2RlRnJhbWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJub2RlLWVsZW1lbnRcIik7XG4gICAgaGV4VG9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9kZS1lbGVtZW50XCIpO1xuICAgIG5vZGVUZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9kZS1lbGVtZW50XCIpO1xuICAgIG5vZGVWYWx1ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vZGUtZWxlbWVudFwiKTtcbiAgICBoZXhCb3R0b21FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJub2RlLWVsZW1lbnRcIik7XG5cbiAgICBub2RlRnJhbWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJncmFwaC1ub2RlXCIpO1xuICAgIG5vZGVGcmFtZUVsZW1lbnQuaWQgPSBub2RlLmlkO1xuXG4gICAgaGV4VG9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGV4LXRvcFwiKTtcbiAgICBoZXhUb3BFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoZXgtY29tcG9uZW50XCIpO1xuICAgIG5vZGVUZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGV4LXRleHRcIik7XG4gICAgbm9kZVZhbHVlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGV4LXRleHRcIik7XG4gICAgbm9kZVZhbHVlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGV4LXZhbHVlXCIpO1xuICAgIGhleEJvdHRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhleC1ib3R0b21cIik7XG4gICAgaGV4Qm90dG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGV4LWNvbXBvbmVudFwiKTtcblxuICAgIG5vZGVUZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IG5vZGUubmFtZTtcbiAgICBub2RlVmFsdWVFbGVtZW50LnRleHRDb250ZW50ID0gZ2V0VmFsdWVUZW1wbGF0ZShub2RlLmF0dHJpYnV0ZSlbMF0gKyBub2RlLnZhbHVlICsgZ2V0VmFsdWVUZW1wbGF0ZShub2RlLmF0dHJpYnV0ZSlbMV07XG5cbiAgICBub2RlRnJhbWVFbGVtZW50LmFwcGVuZChoZXhUb3BFbGVtZW50KTtcbiAgICBub2RlRnJhbWVFbGVtZW50LmFwcGVuZChub2RlVGV4dEVsZW1lbnQpO1xuICAgIG5vZGVGcmFtZUVsZW1lbnQuYXBwZW5kKG5vZGVWYWx1ZUVsZW1lbnQpO1xuICAgIG5vZGVGcmFtZUVsZW1lbnQuYXBwZW5kKGhleEJvdHRvbUVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIG5vZGVGcmFtZUVsZW1lbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3TGluZUJldHdlZW5Ob2RlcyhwYXJlbnRFbGVtZW50LCBjaGlsZEVsZW1lbnQsIHRyZWVFbGVtZW50KSB7XG4gICAgbGV0IGxpbmVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsaW5lRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9kZS1jb25uZWN0LWxpbmVcIik7XG5cbiAgICBsZXQgcGFyZW50WCA9IGRpbWVuc2lvbkFzTnVtYmVyKHBhcmVudEVsZW1lbnQuc3R5bGUubGVmdCk7XG4gICAgbGV0IHBhcmVudFkgPSBkaW1lbnNpb25Bc051bWJlcihwYXJlbnRFbGVtZW50LnN0eWxlLnRvcCk7XG4gICAgbGV0IGNoaWxkWCA9IGRpbWVuc2lvbkFzTnVtYmVyKGNoaWxkRWxlbWVudC5zdHlsZS5sZWZ0KTtcbiAgICBsZXQgY2hpbGRZID0gZGltZW5zaW9uQXNOdW1iZXIoY2hpbGRFbGVtZW50LnN0eWxlLnRvcCk7XG5cbiAgICBsaW5lRWxlbWVudC5zdHlsZS53aWR0aCA9IGNoaWxkWSAtIHBhcmVudFkgKyAxNSArIFwicHhcIjtcblxuICAgIGxldCBtaWRYID0gKHBhcmVudFggKyBjaGlsZFgpIC8gMjtcbiAgICBsZXQgbWlkWSA9IChwYXJlbnRZICsgY2hpbGRZKSAvIDI7XG5cbiAgICBsZXQgYW5nbGUgID0gKE1hdGguYXRhbjIocGFyZW50WSAtIGNoaWxkWSwgcGFyZW50WCAtIGNoaWxkWCkgKiAxODAgLyBNYXRoLlBJKSArIDE4MDtcbiAgICBsZXQgdHJhbnNmb3JtID0gXCJyb3RhdGUoXCIgKyAoYW5nbGUpICsgXCJkZWcpXCI7XG5cbiAgICBsaW5lRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbGluZUVsZW1lbnQuc3R5bGUudG9wID0gKHBhcmVudFkgKyAyNikgKyBcInB4XCI7XG4gICAgbGluZUVsZW1lbnQuc3R5bGUubGVmdCA9IChwYXJlbnRYICsgMjYpICsgXCJweFwiO1xuXG4gICAgdHJlZUVsZW1lbnQuYXBwZW5kQ2hpbGQobGluZUVsZW1lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVsYXRpdmVDaGlsZFBvc2l0aW9uKHBhcmVudCwgY2hpbGRJZCkge1xuICAgIGlmIChwYXJlbnQubGVmdENoaWxkSWQgPT0gY2hpbGRJZCkge1xuICAgICAgcmV0dXJuIFwibGVmdFwiO1xuICAgIH0gZWxzZSBpZiAocGFyZW50LmNlbnRlckNoaWxkSWQgPT0gY2hpbGRJZCkge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfSBlbHNlIGlmIChwYXJlbnQucmlnaHRDaGlsZElkID09IGNoaWxkSWQpIHtcbiAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgfVxuICAgIHJldHVybiBcImNoaWxkIG5vdCBmb3VuZCBpbiBnZXRSZWxhdGl2ZUNoaWxkUG9zaXRpb24oKVwiXG4gIH1cblxuXG4gIGZ1bmN0aW9uIG5vZGVDbGlja2VkKG5vZGUsIGUpIHtcbiAgICB2YXIgbXVsdGlTZWxlY3Rpb25IYXBwZW5lZCA9IGZhbHNlO1xuICAgIGlmIChub2RlLnNlbGVjdGVkKSB7XG4gICAgICBpZighYWxsb3dGcmVlTm9kZVNlbGVjdGlvbikge1xuICAgICAgICBhdHRlbXB0Tm9kZURlc2VsZWN0aW9uKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGUuY3RybEtleSAmJiBoaWdobGlnaHRlZE5vZGVzQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvciAobGV0IGhpZ2hsaWdodGVkTm9kZSBvZiBoaWdobGlnaHRlZE5vZGVzQXJyYXkpIHtcbiAgICAgICAgICAgIHNlbGVjdE5vZGUoZmFsc2UsIGhpZ2hsaWdodGVkTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG11bHRpU2VsZWN0aW9uSGFwcGVuZWQgPSB0cnVlO1xuICAgICAgICB9XG5cdFx0XHQgIGVsc2Uge1xuICAgICAgICAgIHNlbGVjdE5vZGUoZmFsc2UsIG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhbGxvd0ZyZWVOb2RlU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICBpZihoaWdobGlnaHRlZE5vZGVzQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaGlnaGxpZ2h0ZWROb2RlIG9mIGhpZ2hsaWdodGVkTm9kZXNBcnJheSkge1xuLy8gICAgICAgICAgICAgIGhpZ2hsaWdodGVkTm9kZS5zZWxlY3RlZCA9IHRydWU7XG5cbi8vICAgICAgICAgICAgICB1cGRhdGVOb2RlQ29sb3IoaGlnaGxpZ2h0ZWROb2RlKTtcbiAgICAgICAgICAgICAgc2VsZWN0Tm9kZSh0cnVlLCBoaWdobGlnaHRlZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbXVsdGlTZWxlY3Rpb25IYXBwZW5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmKG5vZGUucGFyZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBub2RlLm1hcmtBc0RldGFjaGVkKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBwYXJlbnROb2RlIG9mIG5vZGUucGFyZW50cykge1xuICAgICAgICAgICAgICBpZiAocGFyZW50Tm9kZS5zZWxlY3RlZCAmJiAhcGFyZW50Tm9kZS5pbkRldGFjaGVkU3ViVHJlZSgpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5tYXJrQXNBdHRhY2hlZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGVjdE5vZGUodHJ1ZSwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZUF2YWlsYWJsZUZvclNlbGVjdGlvbihub2RlKSAmJiAoU2tpbGxUcmVlLmdldFNlbGVjdGVkTm9kZXMoKS5sZW5ndGggPCBtYXhTa2lsbE5vZGVzKSkge1xuICAgICAgICBzZWxlY3ROb2RlKHRydWUsIG5vZGUpO1xuLy8gICAgICAgIG5vZGUuc2VsZWN0ZWQgPSB0cnVlO1xuLy8gICAgICAgIHVwZGF0ZU5vZGVDb2xvcihub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG11bHRpU2VsZWN0aW9uSGFwcGVuZWQpIHtcbiAgICAgIHVwZGF0ZVRyZWVJbnRlZ3JpdHkoU2tpbGxUcmVlLmdldEFjdGl2ZVRyZWVOYW1lKCkpO1xuICAgIH1cbi8qXG4gICAgaWYoIW11bHRpU2VsZWN0aW9uSGFwcGVuZWQpIHtcbiAgICAgIHVwZGF0ZU5vZGVDb2xvcnMoU2tpbGxUcmVlLmdldEFjdGl2ZVRyZWVOYW1lKCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZU5vZGVDb2xvcihub2RlKTtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKCkpIHtcbiAgICAgIHVwZGF0ZU5vZGVDb2xvcihjaGlsZCk7XG4gICAgfVxuICAgIGZvciAobGV0IHBhcmVudCBvZiBub2RlLnBhcmVudHMoKSkge1xuICAgICAgdXBkYXRlTm9kZUNvbG9yKHBhcmVudCk7XG4gICAgfVxuKi9cbiAgICB1cGRhdGVOb2RlQ291bnRlcnMoU2tpbGxUcmVlLmdldEFjdGl2ZVRyZWVOYW1lKCkpO1xuICAgIHVwZGF0ZUJvbnVzZXMoKTtcbiAgICByZXZlcnRVUkwoKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gbm9kZUhvdmVyZWQobm9kZSwgZSkge1xuICAgIGlmKGhpZ2hsaWdodGVkTm9kZXNBcnJheS5sZW5ndGggPiAwIHx8ICFlLmN0cmxLZXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGlnaGxpZ2h0Tm9kZShub2RlKTtcblxuICAgIGxldCB0cmVlTmFtZSA9IFNraWxsVHJlZS5nZXRBY3RpdmVUcmVlTmFtZSgpO1xuICAgIGlmICh0cmVlTmFtZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdHJlZSA9IFNraWxsVHJlZS5nZXRUcmVlKHRyZWVOYW1lKTtcbiAgICAgIFxuICAgICAgZm9yIChsZXQgYW5vdGhlck5vZGUgb2YgdHJlZS5ub2Rlcykge1xuICAgICAgICBpZihhbm90aGVyTm9kZS5hdHRyaWJ1dGUgPT0gbm9kZS5hdHRyaWJ1dGUgJiYgYW5vdGhlck5vZGUuaWQgIT0gbm9kZS5pZCkge1xuICAgICAgICAgIGhpZ2hsaWdodE5vZGUoYW5vdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9kZVVuSG92ZXJlZChub2RlKSB7XG4gICAgaWYoaGlnaGxpZ2h0ZWROb2Rlc0FycmF5Lmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIGhpZ2hsaWdodGVkTm9kZSBvZiBoaWdobGlnaHRlZE5vZGVzQXJyYXkpIHtcbiAgICAgIGhpZ2hsaWdodGVkTm9kZS5oaWdobGlnaHRlZCA9IGZhbHNlO1xuICAgICAgdXBkYXRlTm9kZUNvbG9yKGhpZ2hsaWdodGVkTm9kZSk7XG4gICAgfVxuICAgIGhpZ2hsaWdodGVkTm9kZXNBcnJheS5sZW5ndGggPSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTm9kZUNvbG9ycyh0cmVlTmFtZSkge1xuICAgIGlmICh0cmVlTmFtZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IHRyZWUgb2YgU2tpbGxUcmVlLmdldFRyZWVzKCkpIHtcbiAgICAgICAgdXBkYXRlTm9kZUNvbG9ycyh0cmVlLm5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdHJlZSA9IFNraWxsVHJlZS5nZXRUcmVlKHRyZWVOYW1lKTtcbiAgICAgIGZvciAobGV0IG5vZGUgb2YgdHJlZS5ub2Rlcykge1xuICAgICAgICB1cGRhdGVOb2RlQ29sb3Iobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0ZW1wdE5vZGVEZXNlbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKHNhZmVUb0Rlc2VsZWN0KG5vZGUpKSB7XG4gICAgICBzZWxlY3ROb2RlKGZhbHNlLCBub2RlKTtcbiAgICB9XG4gIH1cbi8qXG4gIGZ1bmN0aW9uIHVwZGF0ZU5vZGVEaXNwbGF5KHRyZWVOYW1lKSB7XG4gICAgaWYgKHRyZWVOYW1lID09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChsZXQgdHJlZSBvZiBTa2lsbFRyZWUuZ2V0VHJlZXMoKSkge1xuICAgICAgICB1cGRhdGVOb2RlRGlzcGxheSh0cmVlLm5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBub2RlIG9mIFNraWxsVHJlZS5nZXRUcmVzKHRyZWVOYW1lKS5ub2Rlcykge1xuICAgICAgICB1cGRhdGVOb2RlQ29sb3Iobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4qL1xuICBmdW5jdGlvbiB1cGRhdGVOb2RlQ291bnRlcnModHJlZU5hbWUpIHtcbiAgICBsZXQgdG90YWxOb2Rlc1NlbGVjdGVkID0gU2tpbGxUcmVlLmdldFNlbGVjdGVkTm9kZXMoKS5sZW5ndGg7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2RlLXNlbGVjdGlvbi1jb3VudGVyXCIpLnRleHRDb250ZW50ID0gdG90YWxOb2Rlc1NlbGVjdGVkO1xuICAgIGxldCB0b3RhbENvdW50ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vZGUtc2VsZWN0aW9uLWNvdW50ZXJcIik7XG4gICAgdG90YWxDb3VudGVyLnRleHRDb250ZW50ID0gdG90YWxOb2Rlc1NlbGVjdGVkO1xuICAgIGlmKHRvdGFsTm9kZXNTZWxlY3RlZCA+IG1heFNraWxsTm9kZXMpIHtcbiAgICAgIHRvdGFsQ291bnRlci5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdGFsQ291bnRlci5zdHlsZS5jb2xvciA9IFwiaW5oZXJpdFwiO1xuICAgIH1cbiAgICBpZiAodHJlZU5hbWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCB0cmVlIG9mIFNraWxsVHJlZS5nZXRUcmVlcygpKSB7XG4gICAgICAgIHVwZGF0ZU5vZGVDb3VudGVycyh0cmVlLm5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodHJlZU5hbWUudG9Mb3dlckNhc2UoKSArIFwiLXRhYi1jb3VudGVyXCIpO1xuICAgICAgbGV0IG5vZGVzU2VsZWN0ZWQgPSBTa2lsbFRyZWUuZ2V0U2VsZWN0ZWROb2Rlcyh0cmVlTmFtZSkubGVuZ3RoO1xuICAgICAgbGV0IG5vZGVzVG90YWwgPSBTa2lsbFRyZWUuZ2V0Tm9kZUNvdW50KHRyZWVOYW1lKTtcbiAgICAgIHRhYi50ZXh0Q29udGVudCA9IG5vZGVzU2VsZWN0ZWQgKyBcIiAvIFwiICsgbm9kZXNUb3RhbDtcbiAgICB9XG4gICAgbGV0IHRvdGFsQ2JpbGxDb3N0ID0gKHRvdGFsTm9kZXNTZWxlY3RlZCAqIGNiaWxsc1Blck5vZGUpLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIikgKyBcIiBDLUJpbGxzIGFuZFwiO1xuICAgIGxldCB0b3RhbFhwQ29zdCA9ICh0b3RhbE5vZGVzU2VsZWN0ZWQgKiB4cFBlck5vZGUpLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIikgKyBcIiBYUCAvIEdYUFwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29zdC10b3RhbHMtZGlzcGxheVwiKS5pbm5lckhUTUwgPSB0b3RhbENiaWxsQ29zdCArIFwiPC9icj5cIiArIHRvdGFsWHBDb3N0O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQm9udXNlcygpIHtcbiAgICBsZXQgYm9udXNlcyA9IFtdO1xuICAgIGxldCB0cmVlTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoIWRpc3BsYXlBbGxCb251c2VzKSB7XG4gICAgICB0cmVlTmFtZSA9IFNraWxsVHJlZS5nZXRBY3RpdmVUcmVlTmFtZSgpO1xuICAgIH1cbiAgICBsZXQgbm9kZXMgPSBTa2lsbFRyZWUuZ2V0U2VsZWN0ZWROb2Rlcyh0cmVlTmFtZSk7XG4gICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgbGV0IGJvbnVzRm9yQXR0cmlidXRlID0gZ2V0Qm9udXNGb3JBdHRyaWJ1dGUoYm9udXNlcywgbm9kZS5hdHRyaWJ1dGUpO1xuICAgICAgaWYgKGJvbnVzRm9yQXR0cmlidXRlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBib251c0ZvckF0dHJpYnV0ZS52YWx1ZSA9ICgoYm9udXNGb3JBdHRyaWJ1dGUudmFsdWUgKiAxMCkgKyAobm9kZS52YWx1ZSAqIDEwKSkgLyAxMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvbnVzZXMucHVzaCh7YXR0cmlidXRlOiBub2RlLmF0dHJpYnV0ZSwgdmFsdWU6IG5vZGUudmFsdWUsIHZhbHVlVGVtcGxhdGU6IG5vZGUudmFsdWVUZW1wbGF0ZX0pO1xuICAgICAgfVxuICAgIH1cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvbnVzZXMtZGlzcGxheVwiKS5pbm5lckhUTUwgPSBudWxsO1xuICAgIGJvbnVzZXMuZm9yRWFjaChmdW5jdGlvbihib251cywgaW5kZXgpIHtcbiAgICAgIGxldCBib251c0Rpc3BsYXlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJvbnVzRGlzcGxheUVsZW1lbnQuaWQgPSBib251c0F0dHJpYnV0ZVRvSWQoYm9udXMuYXR0cmlidXRlKTtcbiAgICAgIGJvbnVzRGlzcGxheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImJvbnVzLWRpc3BsYXlcIik7XG4gICAgICBib251c0Rpc3BsYXlFbGVtZW50LnRleHRDb250ZW50ID0gYm9udXMuYXR0cmlidXRlICsgXCIgXCIgKyBnZXRWYWx1ZVRlbXBsYXRlKGJvbnVzLmF0dHJpYnV0ZSlbMF0gKyBib251cy52YWx1ZSArIGdldFZhbHVlVGVtcGxhdGUoYm9udXMuYXR0cmlidXRlKVsxXTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9udXNlcy1kaXNwbGF5XCIpLmFwcGVuZChib251c0Rpc3BsYXlFbGVtZW50KTtcblxuICAgIH0pO1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJvbnVzZXMtZGlzcGxheVwiKS5vZmZzZXRIZWlnaHQgPiA1NjApIHtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYm9udXMtZGlzcGxheVwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5zdHlsZS5mb250U2l6ZT0gXCIxMnB4XCI7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCb251c0ZvckF0dHJpYnV0ZShib251c2VzLCBhdHRyaWJ1dGUpIHtcbiAgICBmb3IgKGxldCBib251cyBvZiBib251c2VzKSB7XG4gICAgICBpZiAoYm9udXMuYXR0cmlidXRlID09IGF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gYm9udXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVUZW1wbGF0ZShhdHRyaWJ1dGUpIHtcbiAgICBmb3IgKGxldCBtYXBwaW5nIG9mIGF0dHJpYnV0ZVRlbXBsYXRlTWFwKSB7XG4gICAgICBpZiAobWFwcGluZy5hdHRyaWJ1dGUgPT0gYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiBbIG1hcHBpbmcudGVtcGxhdGUuc3BsaXQoXCJ7fVwiKVswXSwgbWFwcGluZy50ZW1wbGF0ZS5zcGxpdChcInt9XCIpWzFdIF07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwidmFsdWUgdGVtcGxhdGUgbm90IGZvdW5kIGZvciBhdHRyaWJ1dGUgXCIgKyBhdHRyaWJ1dGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hhbmdlU2tpbGxUcmVlKHRyZWVOYW1lKSB7XG4gICAgU2tpbGxUcmVlLnNldEFjdGl2ZVRyZWVOYW1lKHRyZWVOYW1lKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYlwiKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHRyZWVOYW1lKTtcbiAgICBnZXRUYWJGb3JUcmVlTmFtZSh0cmVlTmFtZSkuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC10cmVlXCIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICB9KTtcbiAgICBsZXQgdHJlZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cmVlTmFtZVRvSWQodHJlZU5hbWUpKTtcbiAgICB0cmVlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcbiAgICBsZXQgdHJlZURpc3BsYXlXaWR0aCA9IGRpbWVuc2lvbkFzTnVtYmVyKHRyZWVFbGVtZW50LnN0eWxlLndpZHRoKTtcbiAgICBsZXQgdG90YWxXaWR0aCA9ICh0cmVlRGlzcGxheVdpZHRoICsgMjk0KSArIFwicHhcIlxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5zdHlsZS53aWR0aCA9IHRvdGFsV2lkdGg7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXR0aW5ncy1vdmVybGF5XCIpLnN0eWxlLndpZHRoID0gdG90YWxXaWR0aDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvb3RlclwiKS5zdHlsZS53aWR0aCA9IHRvdGFsV2lkdGg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYWJGb3JUcmVlTmFtZSh0cmVlTmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzdHJpbmdUb0Nzcyh0cmVlTmFtZSkgKyBcIi10YWJcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlTmFtZVRvSWQodHJlZU5hbWUpIHtcbiAgICAgcmV0dXJuIHN0cmluZ1RvQ3NzKHRyZWVOYW1lKSArIFwiLXNraWxsLXRyZWVcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvbnVzQXR0cmlidXRlVG9JZChhdHRyaWJ1dGUpIHtcbiAgICAgcmV0dXJuIHN0cmluZ1RvQ3NzKGF0dHJpYnV0ZSkgKyBcImJvbnVzLWRpc3BsYXlcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVOYW1lVG9JZChub2RlTmFtZSkge1xuICAgIHJldHVybiBzdHJpbmdUb0Nzcyhub2RlTmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdUb0NzcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyAvZywgXCItXCIpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRvd25sb2FkLWltYWdlLWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xuICAgIGxldCB0cmVlSFRNTCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRyZWVOYW1lVG9JZChTa2lsbFRyZWUuZ2V0QWN0aXZlVHJlZU5hbWUoKSkpO1xuICAgIHJhc3Rlcml6ZUhUTUwuZHJhd0RvY3VtZW50KHRyZWVIVE1MLCBjYW52YXMpO1xuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc2V0LXRyZWUtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXNldFRyZWUoU2tpbGxUcmVlLmdldEFjdGl2ZVRyZWVOYW1lKCkpO1xuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc2V0LWFsbC1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgIGZvciAobGV0IHRyZWUgb2YgU2tpbGxUcmVlLmdldFRyZWVzKCkpIHtcbiAgICAgIHJlc2V0VHJlZSh0cmVlLm5hbWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3QtdHJlZS1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGVjdEFsbE5vZGVzKFNraWxsVHJlZS5nZXRBY3RpdmVUcmVlTmFtZSgpKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcmVzZXRUcmVlKHRyZWVOYW1lKSB7XG4gICAgbGV0IHRyZWUgPSBTa2lsbFRyZWUuZ2V0VHJlZSh0cmVlTmFtZSk7XG4gICAgZm9yIChsZXQgbm9kZSBvZiB0cmVlLm5vZGVzKSB7XG4gICAgICBub2RlLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBub2RlLm1hcmtBc0F0dGFjaGVkKCk7XG4gICAgfVxuICAgIHVwZGF0ZU5vZGVDb3VudGVycyh0cmVlTmFtZSk7XG4gICAgdXBkYXRlQm9udXNlcygpO1xuICAgIHVwZGF0ZU5vZGVDb2xvcnModHJlZU5hbWUpO1xuICAgIHJldmVydFVSTCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0QWxsTm9kZXModHJlZU5hbWUpIHtcbiAgICBsZXQgYXZhaWxhYmxlTm9kZXMgPSBtYXhTa2lsbE5vZGVzIC0gU2tpbGxUcmVlLmdldFNlbGVjdGVkTm9kZXMoKS5sZW5ndGg7XG4gICAgbGV0IHRyZWUgPSBTa2lsbFRyZWUuZ2V0VHJlZSh0cmVlTmFtZSk7XG4gICAgaWYgKGF2YWlsYWJsZU5vZGVzID4gdHJlZS5ub2Rlcy5sZW5ndGggfHwgYWxsb3dGcmVlTm9kZVNlbGVjdGlvbikge1xuICAgICAgZm9yIChsZXQgbm9kZSBvZiB0cmVlLm5vZGVzKSB7XG4gICAgICAgIG5vZGUuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBub2RlLm1hcmtBc0F0dGFjaGVkKCk7XG4gICAgICB9XG4gICAgICB1cGRhdGVOb2RlQ291bnRlcnModHJlZU5hbWUpO1xuICAgICAgdXBkYXRlQm9udXNlcygpO1xuICAgICAgdXBkYXRlTm9kZUNvbG9ycyh0cmVlTmFtZSk7XG4gICAgICByZXZlcnRVUkwoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkRnJvbVJlbW90ZUlkKCkge1xuICAgIGxldCByZWdleCA9IC8oW14vLz9dKikkLztcbiAgICBsZXQgcmVtb3RlSWQgPSByZWdleC5leGVjKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVsxXTtcblxuICAgIGlmICgocmVtb3RlSWQgIT0gdW5kZWZpbmVkKSAmJiAocmVtb3RlSWQgIT0gXCJcIikpIHtcbiAgICAgIHNldE1vZGFsQ2xvc2VhYmlsaXR5KGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGVybWFsaW5rLWRpc3BsYXlcIikudGV4dENvbnRlbnQgPSBcIlJlYWN0b3Igb25saW5lLCB3ZWFwb25zIG9ubGluZSwgc2Vuc29ycyBvbmxpbmUuLi4uXCI7XG5cbiAgICAgIGZldGNoKFwiaHR0cHM6Ly9qc29uYmxvYi5jb20vYXBpL2pzb25CbG9iL1wiICsgcmVtb3RlSWQsIHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciByZXNwb25zZSAtIFwiICsgcmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICBpbXBvcnRUcmVlcyhqc29uWyd0cmVlcyddKTtcbiAgICAgICAgdXBkYXRlTm9kZUNvdW50ZXJzKCk7XG4gICAgICAgIHVwZGF0ZUJvbnVzZXMoKTtcbiAgICAgICAgdXBkYXRlTm9kZUNvbG9ycygpO1xuICAgICAgICBjaGFuZ2VTa2lsbFRyZWUoanNvblsnYWN0aXZlVHJlZU5hbWUnXSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZXJtYWxpbmstYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICBzZXRNb2RhbENsb3NlYWJpbGl0eShmYWxzZSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZXJtYWxpbmstZGlzcGxheVwiKS50ZXh0Q29udGVudCA9IFwiUGVybWFsaW5rIGluYm91bmQgb24geW91ciBwb3NpdGlvbi5cIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsLW92ZXJsYXlcIikuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XG4gICAgZmV0Y2goXCJodHRwczovL2pzb25ibG9iLmNvbS9hcGkvanNvbkJsb2JcIiwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGJvZHk6IHNlcmlhbGl6ZVRyZWVzKCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9XG4gICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgbGV0IHJlZ2V4ID0gLyhbXi8vXSopJC87XG4gICAgICBsZXQgcmVtb3RlSWQgPSByZWdleC5leGVjKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwibG9jYXRpb25cIikpWzBdO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZXJtYWxpbmstZGlzcGxheVwiKS50ZXh0Q29udGVudCA9IHB1c2hSZW1vdGVJZFRvVVJMKHJlbW90ZUlkKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcbiAgICAgIHNldE1vZGFsQ2xvc2VhYmlsaXR5KHRydWUpO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgIHNldE1vZGFsQ2xvc2VhYmlsaXR5KHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBzZXJpYWxpemVUcmVlcygpIHtcbiAgICBsZXQgdHJlZXMgPSBTa2lsbFRyZWUuZ2V0VHJlZXMoKTtcbiAgICBsZXQgc2VyaWFsaXplZFRyZWVzID0ge307XG4gICAgc2VyaWFsaXplZFRyZWVzLnRyZWVzID0gW107XG4gICAgc2VyaWFsaXplZFRyZWVzLmFjdGl2ZVRyZWVOYW1lID0gU2tpbGxUcmVlLmdldEFjdGl2ZVRyZWVOYW1lKCk7XG4gICAgZm9yIChsZXQgdHJlZSBvZiB0cmVlcykge1xuICAgICAgbGV0IHNlcmlhbGl6ZWRUcmVlID0ge1xuICAgICAgICBuYW1lOiB0cmVlLm5hbWUsXG4gICAgICAgIG5vZGVzOiBbXVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgbm9kZSBvZiB0cmVlLm5vZGVzKSB7XG4gICAgICAgIHNlcmlhbGl6ZWRUcmVlLm5vZGVzLnB1c2goc2VyaWFsaXplTm9kZShub2RlKSk7XG4gICAgICB9XG4gICAgICBzZXJpYWxpemVkVHJlZXMudHJlZXMucHVzaChzZXJpYWxpemVkVHJlZSk7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzZXJpYWxpemVkVHJlZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplTm9kZShub2RlKSB7XG4gICAgbGV0IHM7XG4gICAgaWYgKG5vZGUuc2VsZWN0ZWQpIHtcbiAgICAgIHMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBub2RlLmlkLFxuICAgICAgczogc1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGltcG9ydFRyZWVzKHNlcmlhbGl6ZWRUcmVlcykge1xuICAgIGZvciAobGV0IHNlcmlhbGl6ZWRUcmVlIG9mIHNlcmlhbGl6ZWRUcmVlcykge1xuICAgICAgbGV0IHRyZWUgPSBTa2lsbFRyZWUuZ2V0VHJlZShzZXJpYWxpemVkVHJlZS5uYW1lKTtcbiAgICAgIGxldCBzZXJpYWxpemVkTm9kZXMgPSBzZXJpYWxpemVkVHJlZS5ub2RlcztcbiAgICAgIGZvciAobGV0IHNlcmlhbGl6ZWROb2RlIG9mIHNlcmlhbGl6ZWROb2Rlcykge1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIHRyZWUubm9kZXMpIHtcbiAgICAgICAgICBpZiAoc2VyaWFsaXplZE5vZGUuaWQgPT0gbm9kZS5pZCkge1xuICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWROb2RlLnMgPT0gMSkge1xuICAgICAgICAgICAgICBub2RlLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGUuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoUmVtb3RlSWRUb1VSTChyZW1vdGVJZCkge1xuICAgIGxldCByZW1vdGVVUkwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgXCI/XCIgKyByZW1vdGVJZFxuICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCByZW1vdGVVUkwpO1xuICAgIHJldHVybiByZW1vdGVVUkw7XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRVUkwoKSB7XG4gICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICB9XG5cbiAgLy8gdGFrZXMgYSBib29sZWFuXG4gIGZ1bmN0aW9uIHNldE1vZGFsQ2xvc2VhYmlsaXR5KGNsb3NlYWJpbGl0eSkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RhbC1vdmVybGF5XCIpLnNldEF0dHJpYnV0ZShcImRhdGEtY2xvc2VhYmxlXCIsIGNsb3NlYWJpbGl0eS50b1N0cmluZygpKTtcbiAgfVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNsb3NlYWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWwtb3ZlcmxheVwiKS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNsb3NlYWJsZVwiKTtcbiAgICBpZiAoY2xvc2VhYmxlID09IFwidHJ1ZVwiKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsLW92ZXJsYXlcIikuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gICAgfVxuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBlcm1hbGluay1kaXNwbGF5XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcblxuICAvLyBzdHJpcHMgdGhlIFwicHhcIiBvZmYgdGhlIGVuZCBvZiBhIENTUyBkaW1lbnNpb24sIHJldHVybnMgdGhlIG51bWJlciB2YWx1ZVxuICBmdW5jdGlvbiBkaW1lbnNpb25Bc051bWJlcihkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChkaW1lbnNpb24uc2xpY2UoMCwgLTIpKTtcbiAgfVxuXG4vLyAgbG9hZEZyb21SZW1vdGVJZCgpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2V0dGluZ3MtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLW92ZXJsYXlcIikuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XG4gIH0pO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLW92ZXJsYXlcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLW92ZXJsYXlcIikuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gIH0pO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLWRpc3BsYXlcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICBcbiAgZnVuY3Rpb24gc2V0RnJlZU5vZGVTZWxlY3Rpb24oaXNGcmVlKVxuICB7XG4gICAgYWxsb3dGcmVlTm9kZVNlbGVjdGlvbiA9IGlzRnJlZTtcbiAgICBpZiAoIWFsbG93RnJlZU5vZGVTZWxlY3Rpb24pIHtcbiAgICAgIGZvciAobGV0IHRyZWUgb2YgU2tpbGxUcmVlLmdldFRyZWVzKCkpXG4gICAgICAgIHVwZGF0ZVRyZWVJbnRlZ3JpdHkodHJlZS5uYW1lKTtcbiAgICB9XG4gICAgdmFyIHRleHQgPSBcIkZyZWUgc2VsZWN0aW9uIChjdHJsKVwiO1xuICAgIGlmKGFsbG93RnJlZU5vZGVTZWxlY3Rpb24pIHtcbiAgICAgIHRleHQgPSBcIlN0cmljdCBzZWxlY3Rpb25cIjtcbiAgICB9XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXR0aW5ncy1zZWxlY3Rpb24tdHlwZS1idXR0b25cIikudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG4gIFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLXNlbGVjdGlvbi10eXBlLWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBzZXRGcmVlTm9kZVNlbGVjdGlvbighYWxsb3dGcmVlTm9kZVNlbGVjdGlvbik7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICBcbiAgZnVuY3Rpb24gdXBkYXRlVHJlZUludGVncml0eSh0cmVlTmFtZSkge1xuICAgIGxldCB0cmVlID0gU2tpbGxUcmVlLmdldFRyZWUodHJlZU5hbWUpO1xuICAgIFxuICAgIHRyZWUubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgIGlmIChub2RlLnNlbGVjdGVkKSB7XG4gICAgICAgIG5vZGUubWFya0FzRGV0YWNoZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0cmVlLm5vZGVzWzBdLm1hcmtBc0F0dGFjaGVkKCk7XG4gICAgaWYgKHRyZWUubm9kZXNbMF0uc2VsZWN0ZWQpIHtcbiAgICAgIG1hcmtBc0F0dGFjaGVkUmVjdXJzaXZlbHkodHJlZS5ub2Rlc1swXS5jaGlsZHJlbik7XG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZU5vZGVDb2xvcnModHJlZU5hbWUpO1xuICB9XG4gIFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNldHRpbmdzLXNob3ctYm9udXMtbW9kZS1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY2hhbmdlQm9udXNNb2RlKCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICBcbiAgZnVuY3Rpb24gY2hhbmdlQm9udXNNb2RlKCkge1xuICAgIGRpc3BsYXlBbGxCb251c2VzID0gIWRpc3BsYXlBbGxCb251c2VzO1xuICAgIFxuICAgIHZhciB0ZXh0ID0gXCJTaG93IGFsbCBib251c2VzXCI7XG4gICAgaWYoZGlzcGxheUFsbEJvbnVzZXMpIHtcbiAgICAgIHRleHQgPSBcIlNob3cgYm9udXNlcyBmcm9tIGFjdGl2ZSB0YWJcIjtcbiAgICB9XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXR0aW5ncy1zaG93LWJvbnVzLW1vZGUtYnV0dG9uXCIpLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB1cGRhdGVCb251c2VzKCk7XG4gIH1cbiAgXG4gIGRldGFjaGVkTm9kZXNDb3VudGVyVXBkYXRlZCgpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2VsZWN0LWRldGFjaGVkLW5vZGVzLWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBmb3IgKGxldCB0cmVlIG9mIFNraWxsVHJlZS5nZXRUcmVlcygpKSB7XG4gICAgICB2YXIgdHJlZUhhZERldGFjaGVkTm9kZXMgPSBmYWxzZTtcbiAgICAgIHRyZWUubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKXtcbiAgICAgICAgaWYgKG5vZGUuaW5EZXRhY2hlZFN1YlRyZWUoKSkge1xuICAgICAgICAgIG5vZGUuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBub2RlLm1hcmtBc0F0dGFjaGVkKCk7XG4gICAgICAgICAgdHJlZUhhZERldGFjaGVkTm9kZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0cmVlSGFkRGV0YWNoZWROb2Rlcykge1xuICAgICAgICB1cGRhdGVOb2RlQ29sb3JzKHRyZWUubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZU5vZGVDb3VudGVycygpO1xuICAgIHVwZGF0ZUJvbnVzZXMoKTtcbi8vICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbiAgXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2V0dGluZ3Mtc2hvdy10b29sdGlwcy1idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICBcbn0pO1xuIiwiaW1wb3J0ICogYXMgcGxhbm5lciBmcm9tICcuL3BsYW5uZXInO1xuaW1wb3J0ICogYXMgbm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgdHJlZVNvdXJjZSwgYXR0cmlidXRlVGVtcGxhdGVNYXAgfSBmcm9tICcuL3RyZWUnO1xuLy9pbXBvcnQgeyBOb2RlLCBzZWxlY3ROb2RlLCBoaWdobGlnaHROb2RlLCBtYXJrQXNBdHRhY2hlZFJlY3Vyc2l2ZWx5LCB1cGRhdGVOb2RlQ29sb3IsIG5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24sIHNhZmVUb0Rlc2VsZWN0IH0gZnJvbSAnLi9ub2RlJztcbiJdLCJuYW1lcyI6WyJ0cmVlU291cmNlIiwibmFtZSIsImF0dHJpYnV0ZVRlbXBsYXRlTWFwIiwiYXR0cmlidXRlIiwiaGlnaGxpZ2h0ZWROb2Rlc0FycmF5IiwiZGV0YWNoZWROb2Rlc0NvdW50ZXIiLCJOb2RlIiwibmV3TmFtZSIsIm5ld0F0dHJpYnV0ZSIsIm5ld1ZhbHVlIiwibmV3VmFsdWVUZW1wbGF0ZSIsIm5ld0lkIiwibmV3TGVmdENoaWxkSWQiLCJuZXdDZW50ZXJDaGlsZElkIiwibmV3UmlnaHRDaGlsZElkIiwic2VsZWN0ZWQiLCJoaWdobGlnaHRlZCIsInZhbHVlIiwidmFsdWVUZW1wbGF0ZSIsImlkIiwibGVmdENoaWxkSWQiLCJjZW50ZXJDaGlsZElkIiwicmlnaHRDaGlsZElkIiwicGFyZW50cyIsImNoaWxkcmVuIiwiaW5EZXRhY2hlZFN1YlRyZWVWYWx1ZSIsImluRGV0YWNoZWRTdWJUcmVlIiwibWFya0FzQXR0YWNoZWQiLCJtYXJrQXNEZXRhY2hlZCIsInNlbGVjdE5vZGUiLCJub2RlIiwiY2hpbGROb2RlIiwicGFyZW50Tm9kZSIsImNoaWxkIiwiY2hpbGRQYXJlbnROb2RlIiwicGFyZW50IiwicHJvcGFnYXRlQXR0YWNobWVudCIsInByb3BhZ2F0ZURldGFjaG1lbnQiLCJoaWdobGlnaHROb2RlIiwicHVzaCIsIm1hcmtBc0F0dGFjaGVkUmVjdXJzaXZlbHkiLCJjdXJyZW50Tm9kZXMiLCJuZXh0TGV2ZWxOb2RlcyIsImN1cnJlbnROb2RlIiwiY29uY2F0IiwibGVuZ3RoIiwidXBkYXRlTm9kZUNvbG9yIiwibW9kZSIsInNhZmVUb0Rlc2VsZWN0IiwiYWxsb3dGcmVlTm9kZVNlbGVjdGlvbiIsIm5vZGVBdmFpbGFibGVGb3JTZWxlY3Rpb24iLCJsb2ciLCJwYXJlbnRJc1NlbGVjdGVkIiwic2V0Tm9kZUVsZW1lbnRDb2xvcnMiLCJzdGF0ZSIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYm9yZGVyRWxlbWVudCIsInJlbW92ZSIsInJlbW92ZU5vZGVDbGFzc2VzIiwibm9kZUVsZW1lbnQiLCJkaXNwbGF5QWxsQm9udXNlcyIsImRldGFjaGVkTm9kZXNDb3VudGVyVXBkYXRlZCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1heFNraWxsTm9kZXMiLCJjYmlsbHNQZXJOb2RlIiwieHBQZXJOb2RlIiwiU2tpbGxUcmVlIiwiYWN0aXZlVHJlZU5hbWUiLCJza2lsbFRyZWVzIiwiYnVpbGRTa2lsbFRyZWVzIiwidHJlZURlZiIsInNraWxsVHJlZSIsIm5vZGVzIiwibm9kZURlZiIsInBhcnNlRmxvYXQiLCJub2RlTmFtZVRvSWQiLCJyb290Tm9kZSIsImJ1aWxkRGVwZW5kZW5jZXMiLCJub2Rlc0xpc3QiLCJjaGlsZHJlblF1YW50aXR5IiwidW5kZWZpbmVkIiwic3Vibm9kZSIsInNldEFjdGl2ZVRyZWVOYW1lIiwiZ2V0QWN0aXZlVHJlZU5hbWUiLCJnZXRUcmVlIiwidHJlZU5hbWUiLCJ0cmVlcyIsInRyZWUiLCJnZXRUcmVlcyIsImdldE5vZGUiLCJub2RlSWQiLCJnZXROb2RlQ291bnQiLCJub2RlQ291bnQiLCJnZXRTZWxlY3RlZE5vZGVzIiwic2VsZWN0ZWROb2RlcyIsImNoaWxkcmVuT2YiLCJjaGlsZE5vZGVzIiwicGFyZW50c09mIiwicGFyZW50Tm9kZXMiLCJwb3RlbnRpYWxQYXJlbnQiLCJwdXNoSWZEZWZpbmVkIiwiY29sbGVjdGlvbiIsImJ1aWxkVUkiLCJpbmRleCIsInRleHRDb250ZW50IiwidG9Mb3dlckNhc2UiLCJjbGljayIsImJ1aWxkVGFiIiwidGFiSGVpZ2h0IiwidG9wT2Zmc2V0IiwidGFiRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHJpbmdUb0NzcyIsInN0eWxlIiwidG9wIiwiY291bnRlckVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImVsIiwiYWZ0ZXIiLCJidWlsZFRyZWVEaXNwbGF5IiwidHJlZUVsZW1lbnQiLCJ0cmVlTmFtZVRvSWQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImxlZnRtb3N0Tm9kZUVsZW1lbnQiLCJyaWdodG1vc3ROb2RlRWxlbWVudCIsIm5vZGVGcmFtZUVsZW1lbnQiLCJidWlsZE5vZGVFbGVtZW50IiwicmVsYXRpdmVDaGlsZFBvc3RpaW9uIiwiZ2V0UmVsYXRpdmVDaGlsZFBvc2l0aW9uIiwicGFyZW50RWxlbWVudCIsInBhcmVudFRvcCIsImRpbWVuc2lvbkFzTnVtYmVyIiwicGFyZW50TGVmdCIsImxlZnQiLCJsZWZ0UG9zaXRpb24iLCJlIiwibm9kZVdpZHRoIiwicGFkZGluZyIsInRyZWVXaWR0aCIsIndpZHRoIiwibmV3TGVmdCIsImxlZnRDaGlsZEVsZW1lbnQiLCJjZW50ZXJDaGlsZEVsZW1lbnQiLCJyaWdodENoaWxkRWxlbWVudCIsImhleFRvcEVsZW1lbnQiLCJub2RlVGV4dEVsZW1lbnQiLCJub2RlVmFsdWVFbGVtZW50IiwiaGV4Qm90dG9tRWxlbWVudCIsImdldFZhbHVlVGVtcGxhdGUiLCJhcHBlbmQiLCJkcmF3TGluZUJldHdlZW5Ob2RlcyIsImNoaWxkRWxlbWVudCIsImxpbmVFbGVtZW50IiwicGFyZW50WCIsInBhcmVudFkiLCJjaGlsZFgiLCJjaGlsZFkiLCJtaWRYIiwibWlkWSIsImFuZ2xlIiwiTWF0aCIsImF0YW4yIiwiUEkiLCJ0cmFuc2Zvcm0iLCJjaGlsZElkIiwibm9kZUNsaWNrZWQiLCJtdWx0aVNlbGVjdGlvbkhhcHBlbmVkIiwiY3RybEtleSIsImhpZ2hsaWdodGVkTm9kZSIsIm5vZGVIb3ZlcmVkIiwiYW5vdGhlck5vZGUiLCJub2RlVW5Ib3ZlcmVkIiwidXBkYXRlTm9kZUNvbG9ycyIsImF0dGVtcHROb2RlRGVzZWxlY3Rpb24iLCJ1cGRhdGVOb2RlQ291bnRlcnMiLCJ0b3RhbE5vZGVzU2VsZWN0ZWQiLCJ0b3RhbENvdW50ZXIiLCJjb2xvciIsInRhYiIsIm5vZGVzU2VsZWN0ZWQiLCJub2Rlc1RvdGFsIiwidG90YWxDYmlsbENvc3QiLCJ0b0xvY2FsZVN0cmluZyIsInRvdGFsWHBDb3N0IiwiaW5uZXJIVE1MIiwidXBkYXRlQm9udXNlcyIsImJvbnVzZXMiLCJib251c0ZvckF0dHJpYnV0ZSIsImdldEJvbnVzRm9yQXR0cmlidXRlIiwiYm9udXMiLCJib251c0Rpc3BsYXlFbGVtZW50IiwiYm9udXNBdHRyaWJ1dGVUb0lkIiwib2Zmc2V0SGVpZ2h0IiwiZm9udFNpemUiLCJtYXBwaW5nIiwidGVtcGxhdGUiLCJzcGxpdCIsImNoYW5nZVNraWxsVHJlZSIsInRyZWVEaXNwbGF5V2lkdGgiLCJ0b3RhbFdpZHRoIiwiZ2V0VGFiRm9yVHJlZU5hbWUiLCJub2RlTmFtZSIsInN0cmluZyIsInJlcGxhY2UiLCJjYW52YXMiLCJ0cmVlSFRNTCIsImRyYXdEb2N1bWVudCIsInJlc2V0VHJlZSIsInNlbGVjdEFsbE5vZGVzIiwiYXZhaWxhYmxlTm9kZXMiLCJsb2FkRnJvbVJlbW90ZUlkIiwicmVnZXgiLCJyZW1vdGVJZCIsImV4ZWMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsImpzb24iLCJzZXJpYWxpemVUcmVlcyIsImhlYWRlcnMiLCJnZXQiLCJwdXNoUmVtb3RlSWRUb1VSTCIsImVycm9yIiwibWVzc2FnZSIsInNlcmlhbGl6ZWRUcmVlcyIsInNlcmlhbGl6ZWRUcmVlIiwic2VyaWFsaXplTm9kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzIiwiaW1wb3J0VHJlZXMiLCJzZXJpYWxpemVkTm9kZXMiLCJzZXJpYWxpemVkTm9kZSIsInJlbW90ZVVSTCIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHVzaFN0YXRlIiwicmV2ZXJ0VVJMIiwic2V0TW9kYWxDbG9zZWFiaWxpdHkiLCJjbG9zZWFiaWxpdHkiLCJzZXRBdHRyaWJ1dGUiLCJ0b1N0cmluZyIsImNsb3NlYWJsZSIsImdldEF0dHJpYnV0ZSIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiZGltZW5zaW9uIiwic2xpY2UiLCJzZXRGcmVlTm9kZVNlbGVjdGlvbiIsImlzRnJlZSIsInRleHQiLCJ1cGRhdGVUcmVlSW50ZWdyaXR5IiwiY2hhbmdlQm9udXNNb2RlIiwidHJlZUhhZERldGFjaGVkTm9kZXMiXSwibWFwcGluZ3MiOiI7OztBQUFBOztBQUVBLEFBQU8sSUFBTUEsYUFBYTs7Ozs7O0FBTXhCO1FBQ1EsU0FEUjtTQUVTLENBQ0wsRUFBRUMsTUFBTSxTQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2UsU0FIZjtrQkFJZ0I7R0FMWCxFQU9MLEVBQUVBLE1BQU0sU0FBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLFNBSGY7a0JBSWdCO0dBWFgsRUFhTCxFQUFFQSxNQUFNLFNBQVI7ZUFDYSxjQURiO1dBRVMsR0FGVDtpQkFHZSxTQUhmO2tCQUlnQjtHQWpCWCxFQW1CTCxFQUFFQSxNQUFNLFNBQVI7ZUFDYSxjQURiO1dBRVMsR0FGVDtpQkFHZSxZQUhmO21CQUlpQixrQkFKakI7a0JBS2dCO0dBeEJYLEVBMEJMLEVBQUVBLE1BQU0sU0FBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO21CQUdpQjtHQTdCWixFQStCTCxFQUFFQSxNQUFNLFNBQVI7ZUFDYSxjQURiO1dBRVMsR0FGVDtpQkFHZSxZQUhmO21CQUlpQixnQkFKakI7a0JBS2dCO0dBcENYLEVBc0NSLEVBQUVBLE1BQU0sWUFBUjtlQUNnQixpQkFEaEI7V0FFWSxNQUZaO2lCQUdrQjtHQXpDVixFQTJDUixFQUFFQSxNQUFNLFlBQVI7ZUFDZ0IsaUJBRGhCO1dBRVksR0FGWjtrQkFHbUI7R0E5Q1gsRUFnRFIsRUFBRUEsTUFBTSxZQUFSO2VBQ2dCLGlCQURoQjtXQUVZLEdBRlo7aUJBR2tCO0dBbkRWLEVBcURMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtrQkFHZ0I7R0F4RFgsRUEwREwsRUFBRUEsTUFBTSxZQUFSO2VBQ2EsaUJBRGI7V0FFUyxNQUZUO2lCQUdlLFNBSGY7bUJBSWlCLGtCQUpqQjtrQkFLZ0I7R0EvRFgsRUFpRUwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLHFCQURiO1dBRVMsS0FGVDtpQkFHZTtHQXBFVixFQXNFTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7bUJBR2lCO0dBekVaLEVBMkVMLEVBQUVBLE1BQU0sZ0JBQVI7ZUFDYSxpQkFEYjtXQUVTLEtBRlQ7a0JBR2dCO0dBOUVYLEVBZ0ZMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtpQkFHZSxZQUhmO21CQUlpQixjQUpqQjtrQkFLZ0I7R0FyRlgsRUF1RkwsRUFBRUEsTUFBTSxTQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2U7R0ExRlYsRUE0RkwsRUFBRUEsTUFBTSxZQUFSO2VBQ2EsaUJBRGI7V0FFUyxNQUZUO2lCQUdlLGtCQUhmO2tCQUlnQjtHQWhHWCxFQWtHTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2UsWUFIZjtrQkFJZ0I7R0F0R1gsRUF3R0wsRUFBRUEsTUFBTSxTQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7a0JBR2dCO0dBM0dYLEVBNkdMLEVBQUVBLE1BQU0sU0FBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2tCQUdnQjtHQWhIWCxFQWtITCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EsZ0JBRGI7V0FFUyxLQUZUO2lCQUdlO0dBckhWLEVBdUhMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtpQkFHZSxZQUhmO2tCQUlnQjtHQTNIWCxFQTZITCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2UsVUFIZjttQkFJaUIsa0JBSmpCO2tCQUtnQjtHQWxJWCxFQW9JTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2UsVUFIZjtrQkFJZ0I7R0F4SVgsRUEwSUwsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsWUFEYjtXQUVTLEdBRlQ7a0JBR2dCO0dBN0lYLEVBK0lSLEVBQUVBLE1BQU0sVUFBUjtlQUNnQixjQURoQjtXQUVZLEdBRlo7aUJBR2tCLFlBSGxCO2tCQUltQjtHQW5KWCxFQXFKTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2UsWUFIZjtrQkFJZ0I7R0F6SlgsRUEySkwsRUFBRUEsTUFBTSxZQUFSO2VBQ2EsaUJBRGI7V0FFUyxHQUZUO2lCQUdlO0dBOUpWLEVBZ0tMLEVBQUVBLE1BQU0sVUFBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLFVBSGY7a0JBSWdCO0dBcEtYLEVBc0tMLEVBQUVBLE1BQU0sVUFBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLGtCQUhmO2tCQUlnQjtHQTFLWCxFQTRLTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLEdBRlQ7a0JBR2dCO0dBL0tYLEVBaUxMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtpQkFHZSxZQUhmO21CQUlpQixnQkFKakI7a0JBS2dCO0dBdExYLEVBd0xMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxnQkFEYjtXQUVTO0dBMUxKLEVBNExMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtpQkFHZTtHQS9MVixFQWlNTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2Usa0JBSGY7bUJBSWlCLGtCQUpqQjtrQkFLZ0I7R0F0TVgsRUF3TUwsRUFBRUEsTUFBTSxVQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2UsWUFIZjtrQkFJZ0I7R0E1TVgsRUE4TUwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGdCQURiO1dBRVMsTUFGVDttQkFHaUI7R0FqTlosRUFtTkwsRUFBRUEsTUFBTSxVQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2UscUJBSGY7a0JBSWdCO0dBdk5YLEVBeU5MLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGlCQURiO1dBRVMsTUFGVDtpQkFHZSxZQUhmO21CQUlpQixrQkFKakI7a0JBS2dCO0dBOU5YLEVBZ09SLEVBQUVBLE1BQU0sWUFBUjtlQUNnQixpQkFEaEI7V0FFWSxNQUZaO2tCQUdtQjtHQW5PWCxFQXFPUixFQUFFQSxNQUFNLGFBQVI7ZUFDZ0IsaUJBRGhCO1dBRVksTUFGWjtrQkFHbUI7R0F4T1gsRUEwT1IsRUFBRUEsTUFBTSxrQkFBUjtlQUNnQixxQkFEaEI7V0FFWSxLQUZaO2tCQUdtQjtHQTdPWCxFQStPUixFQUFFQSxNQUFNLFlBQVI7ZUFDZ0IsaUJBRGhCO1dBRVksTUFGWjtpQkFHa0Isa0JBSGxCO21CQUlvQjtHQW5QWixFQXFQUixFQUFFQSxNQUFNLGdCQUFSO2VBQ2dCLGNBRGhCO1dBRVksR0FGWjtrQkFHbUI7R0F4UFgsRUEwUFIsRUFBRUEsTUFBTSxxQkFBUjtlQUNnQixnQkFEaEI7V0FFWSxHQUZaO2lCQUdrQjtHQTdQVixFQStQUixFQUFFQSxNQUFNLFlBQVI7ZUFDZ0IsaUJBRGhCO1dBRVksTUFGWjttQkFHb0IsYUFIcEI7a0JBSW1CO0dBblFYLEVBcVFSLEVBQUVBLE1BQU0sZ0JBQVI7ZUFDZ0IsaUJBRGhCO1dBRVksS0FGWjtpQkFHa0I7R0F4UVYsRUEwUVIsRUFBRUEsTUFBTSxhQUFSO2VBQ2dCLGlCQURoQjtXQUVZLE1BRlo7aUJBR2tCO0dBN1FWLEVBK1FSLEVBQUVBLE1BQU0sZ0JBQVI7ZUFDZ0IsY0FEaEI7V0FFWTtHQWpSSixFQW1SUixFQUFFQSxNQUFNLGtCQUFSO2VBQ2dCLGdCQURoQjtXQUVZLE1BRlo7a0JBR21CO0dBdFJYLEVBd1JSLEVBQUVBLE1BQU0sYUFBUjtlQUNnQixpQkFEaEI7V0FFWSxNQUZaO2lCQUdrQixVQUhsQjtrQkFJbUI7R0E1UlgsRUE4UlIsRUFBRUEsTUFBTSxrQkFBUjtlQUNnQixnQkFEaEI7V0FFWSxNQUZaO2lCQUdrQjtHQWpTVixFQW1TUixFQUFFQSxNQUFNLHFCQUFSO2VBQ2dCLGdCQURoQjtXQUVZO0dBclNKLEVBdVNSLEVBQUVBLE1BQU0sYUFBUjtlQUNnQixpQkFEaEI7V0FFWSxNQUZaO2lCQUdrQixhQUhsQjtrQkFJbUI7R0EzU1gsRUE2U1IsRUFBRUEsTUFBTSxVQUFSO2VBQ2dCLGNBRGhCO1dBRVksR0FGWjtpQkFHa0IsYUFIbEI7a0JBSW1CO0dBalRYLEVBbVRSLEVBQUVBLE1BQU0sWUFBUjtlQUNnQixpQkFEaEI7V0FFWSxHQUZaO2lCQUdrQixhQUhsQjtrQkFJbUI7R0F2VFgsRUF5VFIsRUFBRUEsTUFBTSxhQUFSO2VBQ2dCLGlCQURoQjtXQUVZLE1BRlo7aUJBR2tCLGFBSGxCO2tCQUltQjtHQTdUWCxFQStUUixFQUFFQSxNQUFNLGFBQVI7ZUFDZ0IsaUJBRGhCO1dBRVk7R0FqVUosRUFtVVIsRUFBRUEsTUFBTSxhQUFSO2VBQ2dCLGlCQURoQjtXQUVZLE1BRlo7bUJBR29CO0dBdFVaLEVBd1VSLEVBQUVBLE1BQU0sYUFBUjtlQUNnQixpQkFEaEI7V0FFWSxNQUZaO2lCQUdrQixrQkFIbEI7bUJBSW9CLGtCQUpwQjtrQkFLbUI7R0E3VVgsRUErVVIsRUFBRUEsTUFBTSxhQUFSO2VBQ2dCLGlCQURoQjtXQUVZLE1BRlo7bUJBR29CLGFBSHBCO2tCQUltQjtHQW5WWCxFQXFWTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSxpQkFEYjtXQUVTLE1BRlQ7aUJBR2U7R0F4VlYsRUEwVkwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGdCQURiO1dBRVM7R0E1VkosRUE4VkwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGdCQURiO1dBRVM7R0FoV0osRUFrV0wsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsWUFEYjtXQUVTO0dBcFdKLEVBc1dMLEVBQUVBLE1BQU0sYUFBUjtlQUNhLGlCQURiO1dBRVM7R0F4V0osRUEwV0wsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGdCQURiO1dBRVM7R0E1V0osRUE4V0wsRUFBRUEsTUFBTSxhQUFSO2VBQ2EsaUJBRGI7V0FFUztHQWhYSjtDQVJlOzs7Ozs7QUFpWXhCO1FBQ1EsVUFEUjtTQUVTLENBQ0wsRUFBRUEsTUFBTSxxQkFBUjtlQUNhLHdCQURiO1dBRVMsR0FGVDtpQkFHZSxvQkFIZjtrQkFJZ0I7R0FMWCxFQU9OLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxhQURkO1dBRVUsSUFGVjttQkFHa0IscUJBSGxCO2tCQUlpQjtHQVhYLEVBYU4sRUFBRUEsTUFBTSxnQkFBUjtlQUNjLG1CQURkO1dBRVUsTUFGVjtpQkFHZ0Isb0JBSGhCO21CQUlrQjtHQWpCWixFQW1CTixFQUFFQSxNQUFNLG9CQUFSO2VBQ2Msb0JBRGQ7V0FFVSxLQUZWO2lCQUdnQixxQkFIaEI7a0JBSWlCO0dBdkJYLEVBeUJOLEVBQUVBLE1BQU0scUJBQVI7ZUFDYyx3QkFEZDtXQUVVLEdBRlY7aUJBR2dCLG1CQUhoQjttQkFJa0I7R0E3QlosRUErQk4sRUFBRUEsTUFBTSxxQkFBUjtlQUNjLHdCQURkO1dBRVUsR0FGVjttQkFHa0Isb0JBSGxCO2tCQUlpQjtHQW5DWCxFQXFDTixFQUFFQSxNQUFNLG1CQUFSO2VBQ2MsT0FEZDtXQUVVLEtBRlY7aUJBR2dCLG9CQUhoQjttQkFJa0Isb0JBSmxCO2tCQUtpQjtHQTFDWCxFQTRDTixFQUFFQSxNQUFNLG9CQUFSO2VBQ2Msb0JBRGQ7V0FFVSxLQUZWO2lCQUdnQixvQkFIaEI7bUJBSWtCLHFCQUpsQjtrQkFLaUI7R0FqRFgsRUFtRFIsRUFBRUEsTUFBTSxvQkFBUjtlQUNnQixhQURoQjtXQUVZLElBRlo7aUJBR2tCLG1CQUhsQjtrQkFJbUI7R0F2RFgsRUF5RE4sRUFBRUEsTUFBTSxnQkFBUjtlQUNjLG1CQURkO1dBRVUsTUFGVjtpQkFHZ0Isb0JBSGhCO2tCQUlpQjtHQTdEWCxFQStETixFQUFFQSxNQUFNLG9CQUFSO2VBQ2MsYUFEZDtXQUVVLElBRlY7aUJBR2dCLG9CQUhoQjtrQkFJaUI7R0FuRVgsRUFxRU4sRUFBRUEsTUFBTSxvQkFBUjtlQUNjLGFBRGQ7V0FFVSxJQUZWO2lCQUdnQixxQkFIaEI7a0JBSWlCO0dBekVYLEVBMkVOLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYyxPQURkO1dBRVUsS0FGVjtrQkFHaUI7R0E5RVgsRUFnRk4sRUFBRUEsTUFBTSxvQkFBUjtlQUNjLG9CQURkO1dBRVUsS0FGVjtpQkFHZ0IscUJBSGhCO21CQUlrQjtHQXBGWixFQXNGTixFQUFFQSxNQUFNLG9CQUFSO2VBQ2Msb0JBRGQ7V0FFVSxLQUZWO21CQUdrQjtHQXpGWixFQTJGTixFQUFFQSxNQUFNLHFCQUFSO2VBQ2Msd0JBRGQ7V0FFVSxHQUZWO21CQUdrQixvQkFIbEI7a0JBSWlCO0dBL0ZYLEVBaUdOLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYyxPQURkO1dBRVUsS0FGVjtpQkFHZ0I7R0FwR1YsRUFzR04sRUFBRUEsTUFBTSxxQkFBUjtlQUNjLHdCQURkO1dBRVUsR0FGVjtpQkFHZ0IsbUJBSGhCO2tCQUlpQjtHQTFHWCxFQTRHTixFQUFFQSxNQUFNLHFCQUFSO2VBQ2Msd0JBRGQ7V0FFVSxHQUZWO2lCQUdnQixvQkFIaEI7a0JBSWlCO0dBaEhYLEVBa0hOLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYyxPQURkO1dBRVU7R0FwSEosRUFzSE4sRUFBRUEsTUFBTSxtQkFBUjtlQUNjLE9BRGQ7V0FFVSxLQUZWO2tCQUdpQjtHQXpIWCxFQTJITixFQUFFQSxNQUFNLG9CQUFSO2VBQ2Msb0JBRGQ7V0FFVSxLQUZWO2lCQUdnQixxQkFIaEI7a0JBSWlCO0dBL0hYLEVBaUlOLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxvQkFEZDtXQUVVLEtBRlY7aUJBR2dCO0dBcElWLEVBc0lOLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxvQkFEZDtXQUVVO0dBeElKLEVBMElOLEVBQUVBLE1BQU0scUJBQVI7ZUFDYyx3QkFEZDtXQUVVLEdBRlY7aUJBR2dCLG1CQUhoQjttQkFJa0I7R0E5SVosRUFnSk4sRUFBRUEsTUFBTSxxQkFBUjtlQUNjLHdCQURkO1dBRVUsR0FGVjttQkFHa0IscUJBSGxCO2tCQUlpQjtHQXBKWCxFQXNKTixFQUFFQSxNQUFNLG1CQUFSO2VBQ2MsT0FEZDtXQUVVLEtBRlY7a0JBR2lCO0dBekpYLEVBMkpOLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxvQkFEZDtXQUVVLEtBRlY7aUJBR2dCO0dBOUpWLEVBZ0tOLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxvQkFEZDtXQUVVLEtBRlY7aUJBR2dCLG1CQUhoQjtrQkFJaUI7R0FwS1gsRUFzS04sRUFBRUEsTUFBTSxxQkFBUjtlQUNjLG9CQURkO1dBRVUsS0FGVjtpQkFHZ0Isb0JBSGhCO2tCQUlpQjtHQTFLWCxFQTRLTixFQUFFQSxNQUFNLG1CQUFSO2VBQ2MsT0FEZDtXQUVVO0dBOUtKLEVBZ0xOLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYyxhQURkO1dBRVUsSUFGVjtpQkFHZ0IsbUJBSGhCO2tCQUlpQjtHQXBMWCxFQXNMTixFQUFFQSxNQUFNLG1CQUFSO2VBQ2MsT0FEZDtXQUVVO0dBeExKLEVBMExOLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYyxPQURkO1dBRVU7R0E1TEosRUE4TE4sRUFBRUEsTUFBTSxvQkFBUjtlQUNjLE9BRGQ7V0FFVTtHQWhNSjtDQW5ZZTs7Ozs7O0FBNGtCeEI7UUFDUSxVQURSO1NBRVMsQ0FDTCxFQUFFQSxNQUFNLGlCQUFSO2VBQ2EsY0FEYjtXQUVTLEtBRlQ7aUJBR2UsYUFIZjtrQkFJZ0I7R0FMWCxFQU9MLEVBQUVBLE1BQU0sYUFBUjtlQUNhLGlCQURiO1dBRVMsR0FGVDtpQkFHZSxjQUhmO2tCQUlnQjtHQVhYLEVBYUwsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsY0FEYjtXQUVTLEtBRlQ7aUJBR2UsaUJBSGY7a0JBSWdCO0dBakJYLEVBbUJMLEVBQUVBLE1BQU0sY0FBUjtlQUNhLGNBRGI7V0FFUyxLQUZUO2lCQUdlLGVBSGY7a0JBSWdCO0dBdkJYLEVBeUJMLEVBQUVBLE1BQU0saUJBQVI7ZUFDYSxjQURiO1dBRVMsS0FGVDtpQkFHZSxhQUhmO2tCQUlnQjtHQTdCWCxFQStCTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSxpQkFEYjtXQUVTLEdBRlQ7aUJBR2UsY0FIZjtrQkFJZ0I7R0FuQ1gsRUFxQ0wsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsbUJBRGI7V0FFUztHQXZDSixFQXlDTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSxpQkFEYjtXQUVTLEdBRlQ7aUJBR2UsaUJBSGY7bUJBSWlCO0dBN0NaLEVBK0NMLEVBQUVBLE1BQU0sY0FBUjtlQUNhLGNBRGI7V0FFUyxLQUZUO21CQUdpQixpQkFIakI7a0JBSWdCO0dBbkRYLEVBcURMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLFlBRGI7V0FFUztHQXZESixFQXlETCxFQUFFQSxNQUFNLGlCQUFSO2VBQ2EsY0FEYjtXQUVTLEtBRlQ7aUJBR2UsY0FIZjtrQkFJZ0I7R0E3RFgsRUErREwsRUFBRUEsTUFBTSxpQkFBUjtlQUNhLGNBRGI7V0FFUyxLQUZUO2lCQUdlLGlCQUhmO2tCQUlnQjtHQW5FWCxFQXFFTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSxjQURiO1dBRVMsS0FGVDtpQkFHZSxlQUhmO2tCQUlnQjtHQXpFWCxFQTJFTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSxpQkFEYjtXQUVTLEdBRlQ7aUJBR2UsZUFIZjtrQkFJZ0I7R0EvRVgsRUFpRkwsRUFBRUEsTUFBTSxpQkFBUjtlQUNhLGNBRGI7V0FFUyxLQUZUO2lCQUdlLGVBSGY7a0JBSWdCO0dBckZYLEVBdUZMLEVBQUVBLE1BQU0saUJBQVI7ZUFDYSxjQURiO1dBRVMsS0FGVDtpQkFHZSxpQkFIZjtrQkFJZ0I7R0EzRlgsRUE2RkwsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsbUJBRGI7V0FFUyxLQUZUO2tCQUdnQjtHQWhHWCxFQWtHTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxtQkFEYjtXQUVTLEtBRlQ7a0JBR2dCO0dBckdYLEVBdUdMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLHVCQURiO1dBRVMsR0FGVDtpQkFHZSxlQUhmO2tCQUlnQjtHQTNHWCxFQTZHTCxFQUFFQSxNQUFNLGlCQUFSO2VBQ2EsY0FEYjtXQUVTLEtBRlQ7aUJBR2U7R0FoSFYsRUFrSEwsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsY0FEYjtXQUVTLEtBRlQ7aUJBR2U7R0FySFYsRUF1SEwsRUFBRUEsTUFBTSxhQUFSO2VBQ2EsaUJBRGI7V0FFUyxHQUZUO2tCQUdnQjtHQTFIWCxFQTRITCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSx1QkFEYjtXQUVTLEdBRlQ7aUJBR2U7R0EvSFYsRUFpSUwsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsdUJBRGI7V0FFUyxHQUZUO2tCQUdnQjtHQXBJWCxFQXNJTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxZQURiO1dBRVMsR0FGVDtpQkFHZTtHQXpJVixFQTJJTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSxjQURiO1dBRVMsS0FGVDtpQkFHZSxlQUhmO2tCQUlnQjtHQS9JWCxFQWlKTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSxjQURiO1dBRVMsS0FGVDtpQkFHZSxlQUhmO2tCQUlnQjtHQXJKWCxFQXVKTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxZQURiO1dBRVMsR0FGVDtrQkFHZ0I7R0ExSlgsRUE0SkwsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsbUJBRGI7V0FFUyxLQUZUO2lCQUdlO0dBL0pWLEVBaUtMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLG1CQURiO1dBRVMsS0FGVDtrQkFHZ0I7R0FwS1gsRUFzS0wsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsWUFEYjtXQUVTLEdBRlQ7aUJBR2U7R0F6S1YsRUEyS0wsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsdUJBRGI7V0FFUyxHQUZUO2lCQUdlLGVBSGY7bUJBSWlCO0dBL0taLEVBaUxMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLHVCQURiO1dBRVMsR0FGVDttQkFHaUIsZUFIakI7a0JBSWdCO0dBckxYLEVBdUxMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLFdBRGI7V0FFUyxLQUZUO2tCQUdnQjtHQTFMWCxFQTRMTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxXQURiO1dBRVMsS0FGVDtpQkFHZTtHQS9MVixFQWlNTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxtQkFEYjtXQUVTLEtBRlQ7a0JBR2dCO0dBcE1YLEVBc01MLEVBQUVBLE1BQU0sZUFBUjtlQUNhLFlBRGI7V0FFUyxHQUZUO2lCQUdlO0dBek1WLEVBMk1MLEVBQUVBLE1BQU0sZUFBUjtlQUNhLFdBRGI7V0FFUyxLQUZUO2tCQUdnQjtHQTlNWCxFQWdOTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxXQURiO1dBRVMsS0FGVDtpQkFHZTtHQW5OVixFQXFOTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSxXQURiO1dBRVM7R0F2Tko7Q0E5a0JlOzs7Ozs7QUE4eUJ4QjtRQUNRLFdBRFI7U0FFUyxDQUNMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSx5QkFEYjtXQUVTLEdBRlQ7aUJBR2Usb0JBSGY7a0JBSWdCO0dBTFgsRUFPTCxFQUFFQSxNQUFNLG9CQUFSO2VBQ2Esb0JBRGI7V0FFUyxHQUZUO21CQUdpQixvQkFIakI7a0JBSWdCO0dBWFgsRUFhTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSx5QkFEYjtXQUVTLElBRlQ7aUJBR2Usa0JBSGY7bUJBSWlCLGFBSmpCO2tCQUtnQjtHQWxCWCxFQW9CTCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EseUJBRGI7V0FFUyxHQUZUO2lCQUdlLG9CQUhmO2tCQUlnQjtHQXhCWCxFQTBCTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSx3QkFEYjtXQUVTLEdBRlQ7aUJBR2U7R0E3QlYsRUErQkwsRUFBRUEsTUFBTSxvQkFBUjtlQUNhLG9CQURiO1dBRVMsR0FGVDttQkFHaUIsb0JBSGpCO2tCQUlnQjtHQW5DWCxFQXFDTCxFQUFFQSxNQUFNLGFBQVI7ZUFDYSx5QkFEYjtXQUVTLElBRlQ7aUJBR2Usa0JBSGY7bUJBSWlCLGFBSmpCO2tCQUtnQjtHQTFDWCxFQTRDTCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EseUJBRGI7V0FFUyxHQUZUO2lCQUdlLG9CQUhmO2tCQUlnQjtHQWhEWCxFQWtETCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSx3QkFEYjtXQUVTLEdBRlQ7aUJBR2U7R0FyRFYsRUF1REwsRUFBRUEsTUFBTSxvQkFBUjtlQUNhLG9CQURiO1dBRVMsR0FGVDtpQkFHZSxjQUhmO21CQUlpQixvQkFKakI7a0JBS2dCO0dBNURYLEVBOERMLEVBQUVBLE1BQU0sYUFBUjtlQUNhLHlCQURiO1dBRVMsSUFGVDtpQkFHZSxrQkFIZjttQkFJaUI7R0FsRVosRUFvRUwsRUFBRUEsTUFBTSxjQUFSO2VBQ2Esd0JBRGI7V0FFUyxHQUZUO2tCQUdnQjtHQXZFWCxFQXlFTCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EseUJBRGI7V0FFUyxHQUZUO2lCQUdlLG9CQUhmO2tCQUlnQjtHQTdFWCxFQStFTCxFQUFFQSxNQUFNLG9CQUFSO2VBQ2Esb0JBRGI7V0FFUyxHQUZUO2lCQUdlLGNBSGY7bUJBSWlCLG9CQUpqQjtrQkFLZ0I7R0FwRlgsRUFzRkwsRUFBRUEsTUFBTSxhQUFSO2VBQ2EseUJBRGI7V0FFUyxJQUZUO2lCQUdlLGtCQUhmO21CQUlpQjtHQTFGWixFQTRGTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSx3QkFEYjtXQUVTLEdBRlQ7a0JBR2dCO0dBL0ZYLEVBaUdMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSx5QkFEYjtXQUVTLEdBRlQ7aUJBR2Usb0JBSGY7a0JBSWdCO0dBckdYLEVBdUdMLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYSxvQkFEYjtXQUVTO0dBekdKLEVBMkdMLEVBQUVBLE1BQU0sYUFBUjtlQUNhLHlCQURiO1dBRVMsSUFGVDtpQkFHZTtHQTlHVixFQWdITCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSx3QkFEYjtXQUVTO0dBbEhKO0NBaHpCZTs7Ozs7O0FBMjZCeEI7UUFDUSxZQURSO1NBRVMsQ0FDTCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EsZUFEYjtXQUVTLEdBRlQ7aUJBR2UsbUJBSGY7a0JBSWdCO0dBTFgsRUFPTCxFQUFFQSxNQUFNLG1CQUFSO2VBQ2EsY0FEYjtXQUVTLElBRlQ7bUJBR2lCLGNBSGpCO2tCQUlnQjtHQVhYLEVBYUwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGVBRGI7V0FFUyxNQUZUO2lCQUdlLG9CQUhmO21CQUlpQjtHQWpCWixFQW1CTCxFQUFFQSxNQUFNLG9CQUFSO2VBQ2EsZUFEYjtXQUVTLEdBRlQ7aUJBR2UsY0FIZjtrQkFJZ0I7R0F2QlgsRUF5QkwsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsWUFEYjtXQUVTLEdBRlQ7aUJBR2Usb0JBSGY7bUJBSWlCO0dBN0JaLEVBK0JMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxlQURiO1dBRVMsTUFGVDttQkFHaUIsbUJBSGpCO2tCQUlnQjtHQW5DWCxFQXFDTCxFQUFFQSxNQUFNLG9CQUFSO2VBQ2EsZUFEYjtXQUVTLEdBRlQ7aUJBR2UsWUFIZjttQkFJaUI7R0F6Q1osRUEyQ0wsRUFBRUEsTUFBTSxvQkFBUjtlQUNhLGVBRGI7V0FFUyxHQUZUO21CQUdpQixrQkFIakI7a0JBSWdCO0dBL0NYLEVBaURMLEVBQUVBLE1BQU0sWUFBUjtlQUNhLGtCQURiO1dBRVMsR0FGVDtrQkFHZ0I7R0FwRFgsRUFzREwsRUFBRUEsTUFBTSxjQUFSO2VBQ2EsWUFEYjtXQUVTLEdBRlQ7bUJBR2lCLGNBSGpCO2tCQUlnQjtHQTFEWCxFQTRETCxFQUFFQSxNQUFNLG1CQUFSO2VBQ2EsY0FEYjtXQUVTLElBRlQ7aUJBR2UsWUFIZjttQkFJaUI7R0FoRVosRUFrRUwsRUFBRUEsTUFBTSxZQUFSO2VBQ2Esa0JBRGI7V0FFUyxHQUZUO2lCQUdlO0dBckVWLEVBdUVMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxlQURiO1dBRVMsR0FGVDtrQkFHZ0I7R0ExRVgsRUE0RUwsRUFBRUEsTUFBTSxZQUFSO2VBQ2Esa0JBRGI7V0FFUyxHQUZUO2lCQUdlLGNBSGY7a0JBSWdCO0dBaEZYLEVBa0ZMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxlQURiO1dBRVMsR0FGVDtpQkFHZTtHQXJGVixFQXVGTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSxZQURiO1dBRVMsR0FGVDtpQkFHZSxvQkFIZjtrQkFJZ0I7R0EzRlgsRUE2RkwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLGVBRGI7V0FFUyxNQUZUO2lCQUdlLGtCQUhmO2tCQUlnQjtHQWpHWCxFQW1HTCxFQUFFQSxNQUFNLG9CQUFSO2VBQ2EsZUFEYjtXQUVTO0dBckdKLEVBdUdMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxlQURiO1dBRVMsR0FGVDtpQkFHZSxrQkFIZjtrQkFJZ0I7R0EzR1gsRUE2R0wsRUFBRUEsTUFBTSxvQkFBUjtlQUNhLGVBRGI7V0FFUztHQS9HSixFQWlITCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EsZUFEYjtXQUVTLE1BRlQ7a0JBR2dCO0dBcEhYLEVBc0hMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSxjQURiO1dBRVMsSUFGVDtpQkFHZTtHQXpIVixFQTJITCxFQUFFQSxNQUFNLGtCQUFSO2VBQ2EsZUFEYjtXQUVTLEdBRlQ7aUJBR2UsWUFIZjtrQkFJZ0I7R0EvSFgsRUFpSUwsRUFBRUEsTUFBTSxZQUFSO2VBQ2Esa0JBRGI7V0FFUztHQW5JSixFQXFJTCxFQUFFQSxNQUFNLFlBQVI7ZUFDYSxrQkFEYjtXQUVTO0dBdklKO0NBNzZCZTs7Ozs7O0FBNmpDeEI7UUFDUSxTQURSO1NBRVMsQ0FDTCxFQUFFQSxNQUFNLHlCQUFSO2VBQ2EsbUJBRGI7V0FFUyxHQUZUO2lCQUdlLGdCQUhmO2tCQUlnQjtHQUxYLEVBT0wsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLG1CQURiO1dBRVMsS0FGVDtpQkFHZSxvQkFIZjttQkFJaUIseUJBSmpCO2tCQUtnQjtHQVpYLEVBY0wsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLGdCQUhmO21CQUlpQixnQkFKakI7a0JBS2dCO0dBbkJYLEVBcUJMLEVBQUVBLE1BQU0sb0JBQVI7ZUFDYSxrQkFEYjtXQUVTO0dBdkJKLEVBeUJMLEVBQUVBLE1BQU0sZ0JBQVI7ZUFDYSxjQURiO1dBRVMsR0FGVDtpQkFHZSx5QkFIZjtrQkFJZ0I7R0E3QlgsRUErQkwsRUFBRUEsTUFBTSx5QkFBUjtlQUNhLG1CQURiO1dBRVMsR0FGVDtrQkFHZ0I7R0FsQ1gsRUFvQ0wsRUFBRUEsTUFBTSx5QkFBUjtlQUNhLG1CQURiO1dBRVMsR0FGVDttQkFHaUIseUJBSGpCO2tCQUlnQjtHQXhDWCxFQTBDTCxFQUFFQSxNQUFNLGdCQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2UsZ0JBSGY7bUJBSWlCO0dBOUNaLEVBZ0RMLEVBQUVBLE1BQU0sZUFBUjtlQUNhLGdCQURiO1dBRVM7R0FsREosRUFvREwsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLG1CQURiO1dBRVM7R0F0REosRUF3REwsRUFBRUEsTUFBTSx5QkFBUjtlQUNhLG1CQURiO1dBRVMsR0FGVDtpQkFHZSxxQkFIZjttQkFJaUI7R0E1RFosRUE4REwsRUFBRUEsTUFBTSxvQkFBUjtlQUNhLGtCQURiO1dBRVMsS0FGVDttQkFHaUIsZ0JBSGpCO2tCQUlnQjtHQWxFWCxFQW9FTCxFQUFFQSxNQUFNLHFCQUFSO2VBQ2EsbUJBRGI7V0FFUztHQXRFSixFQXdFTCxFQUFFQSxNQUFNLGdCQUFSO2VBQ2EsbUJBRGI7V0FFUyxLQUZUO2tCQUdnQjtHQTNFWCxFQTZFTCxFQUFFQSxNQUFNLGdCQUFSO2VBQ2EsY0FEYjtXQUVTLEdBRlQ7aUJBR2UscUJBSGY7bUJBSWlCLHlCQUpqQjtrQkFLZ0I7R0FsRlgsRUFvRkwsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLGdCQUhmO21CQUlpQixnQkFKakI7a0JBS2dCO0dBekZYLEVBMkZMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxnQkFEYjtXQUVTO0dBN0ZKLEVBK0ZMLEVBQUVBLE1BQU0scUJBQVI7ZUFDYSxtQkFEYjtXQUVTLElBRlQ7aUJBR2U7R0FsR1YsRUFvR0wsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLG1CQURiO1dBRVM7R0F0R0osRUF3R0wsRUFBRUEsTUFBTSxxQkFBUjtlQUNhLG1CQURiO1dBRVMsSUFGVDtrQkFHZ0I7R0EzR1gsRUE2R0wsRUFBRUEsTUFBTSxnQkFBUjtlQUNhLFdBRGI7V0FFUztHQS9HSixFQWlITCxFQUFFQSxNQUFNLHlCQUFSO2VBQ2EsbUJBRGI7V0FFUyxHQUZUO2lCQUdlLGtCQUhmO2tCQUlnQjtHQXJIWCxFQXVITCxFQUFFQSxNQUFNLGdCQUFSO2VBQ2EsbUJBRGI7V0FFUyxLQUZUO2tCQUdnQjtHQTFIWCxFQTRITCxFQUFFQSxNQUFNLGdCQUFSO2VBQ2EsV0FEYjtXQUVTO0dBOUhKLEVBZ0lMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxnQkFEYjtXQUVTO0dBbElKLEVBb0lMLEVBQUVBLE1BQU0scUJBQVI7ZUFDYSxtQkFEYjtXQUVTO0dBdElKLEVBd0lMLEVBQUVBLE1BQU0scUJBQVI7ZUFDYSxtQkFEYjtXQUVTO0dBMUlKO0NBL2pDZTs7Ozs7O0FBa3RDeEI7UUFDUSxXQURSO1NBRVMsQ0FDTCxFQUFFQSxNQUFNLG1CQUFSO2VBQ2Esa0JBRGI7V0FFUyxHQUZUO2lCQUdlLGNBSGY7a0JBSWdCO0dBTFgsRUFPTCxFQUFFQSxNQUFNLGNBQVI7ZUFDYSxjQURiO1dBRVMsSUFGVDtpQkFHZSxhQUhmO21CQUlpQixrQkFKakI7a0JBS2dCO0dBWlgsRUFjTCxFQUFFQSxNQUFNLGVBQVI7ZUFDYSwyQkFEYjtXQUVTLElBRlQ7aUJBR2UscUJBSGY7bUJBSWlCLGtCQUpqQjtrQkFLZ0I7R0FuQlgsRUFxQkwsRUFBRUEsTUFBTSxhQUFSO2VBQ2EsaUJBRGI7V0FFUyxJQUZUO2lCQUdlLFdBSGY7bUJBSWlCO0dBekJaLEVBMkJMLEVBQUVBLE1BQU0scUJBQVI7ZUFDYSx3QkFEYjtXQUVTLElBRlQ7aUJBR2Usa0JBSGY7bUJBSWlCLHFCQUpqQjtrQkFLZ0I7R0FoQ1gsRUFrQ0wsRUFBRUEsTUFBTSxlQUFSO2VBQ2EsMkJBRGI7V0FFUyxJQUZUO21CQUdpQixpQkFIakI7a0JBSWdCO0dBdENYLEVBd0NMLEVBQUVBLE1BQU0sV0FBUjtlQUNhLGNBRGI7V0FFUyxHQUZUO2lCQUdlLGFBSGY7bUJBSWlCO0dBNUNaLEVBOENMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxxQkFEYjtXQUVTLEdBRlQ7aUJBR2UsaUJBSGY7bUJBSWlCLGtCQUpqQjtrQkFLZ0I7R0FuRFgsRUFxREwsRUFBRUEsTUFBTSxrQkFBUjtlQUNhLHFCQURiO1dBRVMsR0FGVDtpQkFHZSxxQkFIZjttQkFJaUIsa0JBSmpCO2tCQUtnQjtHQTFEWCxFQTRETCxFQUFFQSxNQUFNLG1CQUFSO2VBQ2EsNEJBRGI7V0FFUyxHQUZUO21CQUdpQixtQkFIakI7a0JBSWdCO0dBaEVYLEVBa0VMLEVBQUVBLE1BQU0sYUFBUjtlQUNhLGlCQURiO1dBRVM7R0FwRUosRUFzRUwsRUFBRUEsTUFBTSxpQkFBUjtlQUNhLDRCQURiO1dBRVMsSUFGVDtrQkFHZ0I7R0F6RVgsRUEyRUwsRUFBRUEsTUFBTSxxQkFBUjtlQUNhLHdCQURiO1dBRVMsSUFGVDtpQkFHZSxrQkFIZjttQkFJaUIsa0JBSmpCO2tCQUtnQjtHQWhGWCxFQWtGTCxFQUFFQSxNQUFNLGlCQUFSO2VBQ2EsNEJBRGI7V0FFUyxJQUZUO2lCQUdlO0dBckZWLEVBdUZMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSwwQkFEYjtXQUVTO0dBekZKLEVBMkZMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSw0QkFEYjtXQUVTO0dBN0ZKLEVBK0ZMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxpQkFEYjtXQUVTO0dBakdKLEVBbUdMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxpQkFEYjtXQUVTO0dBckdKLEVBdUdMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSw0QkFEYjtXQUVTO0dBekdKLEVBMkdMLEVBQUVBLE1BQU0sa0JBQVI7ZUFDYSxrQkFEYjtXQUVTLEdBRlQ7aUJBR2UsbUJBSGY7a0JBSWdCO0dBL0dYLEVBaUhMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSxtQkFEYjtXQUVTO0dBbkhKLEVBcUhMLEVBQUVBLE1BQU0sbUJBQVI7ZUFDYSw0QkFEYjtXQUVTO0dBdkhKO0NBcHRDZSxDQUFuQjs7QUFpMUNQLEFBQU8sSUFBTUMsdUJBQXVCLENBQ2xDLEVBQUVDLFdBQVcsY0FBYjtZQUNZO0NBRnNCLEVBSWxDLEVBQUVBLFdBQVcsZ0JBQWI7WUFDWTtDQUxzQixFQU9sQyxFQUFFQSxXQUFXLGlCQUFiO1lBQ1k7Q0FSc0IsRUFVbEMsRUFBRUEsV0FBVyxpQkFBYjtZQUNZO0NBWHNCLEVBYWxDLEVBQUVBLFdBQVcscUJBQWI7WUFDWTtDQWRzQixFQWdCbEMsRUFBRUEsV0FBVyxpQkFBYjtZQUNZO0NBakJzQixFQW1CbEMsRUFBRUEsV0FBVyxPQUFiO1lBQ1k7Q0FwQnNCLEVBc0JsQyxFQUFFQSxXQUFXLG1CQUFiO1lBQ1k7Q0F2QnNCLEVBeUJsQyxFQUFFQSxXQUFXLGlCQUFiO1lBQ1k7Q0ExQnNCLEVBNEJsQyxFQUFFQSxXQUFXLGdCQUFiO1lBQ1k7Q0E3QnNCLEVBK0JsQyxFQUFFQSxXQUFXLGNBQWI7WUFDWTtDQWhDc0IsRUFrQ2xDLEVBQUVBLFdBQVcsZ0JBQWI7WUFDWTtDQW5Dc0IsRUFxQ2xDLEVBQUVBLFdBQVcsWUFBYjtZQUNZO0NBdENzQixFQXdDbEMsRUFBRUEsV0FBVyxhQUFiO1lBQ1k7Q0F6Q3NCLEVBMkNsQyxFQUFFQSxXQUFXLGdCQUFiO1lBQ1k7Q0E1Q3NCLEVBOENsQyxFQUFFQSxXQUFXLHdCQUFiO1lBQ1k7Q0EvQ3NCLEVBaURsQyxFQUFFQSxXQUFXLG9CQUFiO1lBQ1k7Q0FsRHNCLEVBb0RsQyxFQUFFQSxXQUFXLGNBQWI7WUFDWTtDQXJEc0IsRUF1RGxDLEVBQUVBLFdBQVcsY0FBYjtZQUNZO0NBeERzQixFQTBEbEMsRUFBRUEsV0FBVyx1QkFBYjtZQUNZO0NBM0RzQixFQTZEbEMsRUFBRUEsV0FBVyxxQkFBYjtZQUNZO0NBOURzQixFQWdFbEMsRUFBRUEsV0FBVyxtQkFBYjtZQUNZO0NBakVzQixFQW1FbEMsRUFBRUEsV0FBVyxpQkFBYjtZQUNZO0NBcEVzQixFQXNFbEMsRUFBRUEsV0FBVyxZQUFiO1lBQ1k7Q0F2RXNCLEVBeUVsQyxFQUFFQSxXQUFXLFdBQWI7WUFDWTtDQTFFc0IsRUE0RWxDLEVBQUVBLFdBQVcseUJBQWI7WUFDWTtDQTdFc0IsRUErRWxDLEVBQUVBLFdBQVcsd0JBQWI7WUFDWTtDQWhGc0IsRUFrRmxDLEVBQUVBLFdBQVcseUJBQWI7WUFDWTtDQW5Gc0IsRUFxRmxDLEVBQUVBLFdBQVcsb0JBQWI7WUFDWTtDQXRGc0IsRUF3RmxDLEVBQUVBLFdBQVcsZUFBYjtZQUNZO0NBekZzQixFQTJGbEMsRUFBRUEsV0FBVyxlQUFiO1lBQ1k7Q0E1RnNCLEVBOEZsQyxFQUFFQSxXQUFXLGNBQWI7WUFDWTtDQS9Gc0IsRUFpR2xDLEVBQUVBLFdBQVcsZUFBYjtZQUNZO0NBbEdzQixFQW9HbEMsRUFBRUEsV0FBVyxZQUFiO1lBQ1k7Q0FyR3NCLEVBdUdsQyxFQUFFQSxXQUFXLGtCQUFiO1lBQ1k7Q0F4R3NCLEVBMEdsQyxFQUFFQSxXQUFXLG1CQUFiO1lBQ1k7Q0EzR3NCLEVBNkdsQyxFQUFFQSxXQUFXLGtCQUFiO1lBQ1k7Q0E5R3NCLEVBZ0hsQyxFQUFFQSxXQUFXLGNBQWI7WUFDWTtDQWpIc0IsRUFtSGxDLEVBQUVBLFdBQVcsbUJBQWI7WUFDWTtDQXBIc0IsRUFzSGxDLEVBQUVBLFdBQVcsZ0JBQWI7WUFDWTtDQXZIc0IsRUF5SGxDLEVBQUVBLFdBQVcsbUJBQWI7WUFDWTtDQTFIc0IsRUE0SGxDLEVBQUVBLFdBQVcsZ0JBQWI7WUFDWTtDQTdIc0IsRUErSGxDLEVBQUVBLFdBQVcsV0FBYjtZQUNZO0NBaElzQixFQWtJbEMsRUFBRUEsV0FBVyxrQkFBYjtZQUNZO0NBbklzQixFQXFJbEMsRUFBRUEsV0FBVyxjQUFiO1lBQ1k7Q0F0SXNCLEVBd0lsQyxFQUFFQSxXQUFXLGlCQUFiO1lBQ1k7Q0F6SXNCLEVBMklsQyxFQUFFQSxXQUFXLDJCQUFiO1lBQ1k7Q0E1SXNCLEVBOElsQyxFQUFFQSxXQUFXLHdCQUFiO1lBQ1k7Q0EvSXNCLEVBaUpsQyxFQUFFQSxXQUFXLGNBQWI7WUFDWTtDQWxKc0IsRUFvSmxDLEVBQUVBLFdBQVcscUJBQWI7WUFDWTtDQXJKc0IsRUF1SmxDLEVBQUVBLFdBQVcsNEJBQWI7WUFDWTtDQXhKc0IsRUEwSmxDLEVBQUVBLFdBQVcsNEJBQWI7WUFDWTtDQTNKc0IsRUE2SmxDLEVBQUVBLFdBQVcsMEJBQWI7WUFDWTtDQTlKc0IsRUFnS2xDLEVBQUVBLFdBQVcsNEJBQWI7WUFDWTtDQWpLc0IsRUFtS2xDLEVBQUVBLFdBQVcsaUJBQWI7WUFDWTtDQXBLc0IsRUFzS2xDLEVBQUVBLFdBQVcsa0JBQWI7WUFDWTtDQXZLc0IsRUF5S2xDLEVBQUVBLFdBQVcsbUJBQWI7WUFDWTtDQTFLc0IsQ0FBN0I7O0FDajFDQSxJQUFNQyx3QkFBd0IsRUFBOUI7QUFDUCxBQUFPLElBQUlDLHVCQUF1QixDQUEzQjs7QUFFUCxBQUFPLFNBQVNDLElBQVQsQ0FBY0MsT0FBZCxFQUF1QkMsWUFBdkIsRUFBcUNDLFFBQXJDLEVBQStDQyxnQkFBL0MsRUFBaUVDLEtBQWpFLEVBQXdFQyxjQUF4RSxFQUF3RkMsZ0JBQXhGLEVBQTBHQyxlQUExRyxFQUEySDtNQUM1SEMsV0FBVyxLQUFmO01BQ0lDLGNBQWMsS0FBbEI7O09BRUtmLElBQUwsR0FBWU0sT0FBWjtPQUNLSixTQUFMLEdBQWlCSyxZQUFqQjtPQUNLUyxLQUFMLEdBQWFSLFFBQWI7T0FDS1MsYUFBTCxHQUFxQlIsZ0JBQXJCO09BQ0tTLEVBQUwsR0FBVVIsS0FBVjs7T0FFS1MsV0FBTCxHQUFtQlIsY0FBbkIsRUFDQSxLQUFLUyxhQUFMLEdBQXFCUixnQkFEckIsRUFFQSxLQUFLUyxZQUFMLEdBQW9CUixlQUZwQjtPQUdLUyxPQUFMLEdBQWUsRUFBZjtPQUNLQyxRQUFMLEdBQWdCLEVBQWhCO09BQ0tULFFBQUwsR0FBZ0JBLFFBQWhCO09BQ0tDLFdBQUwsR0FBbUJBLFdBQW5COztPQUVLUyxzQkFBTCxHQUE4QixLQUE5QjtPQUNLQyxpQkFBTCxHQUF5QixZQUFXO1dBQzNCLEtBQUtELHNCQUFaO0dBREY7T0FHS0UsY0FBTCxHQUFzQixZQUFXO1FBQzVCLEtBQUtGLHNCQUFSLEVBQWdDO1FBQzVCcEIsb0JBQUY7V0FDS29CLHNCQUFMLEdBQThCLEtBQTlCOzs7R0FISjtPQU9LRyxjQUFMLEdBQXNCLFlBQVc7UUFDNUIsQ0FBQyxLQUFLSCxzQkFBVCxFQUFpQztRQUM3QnBCLG9CQUFGO1dBQ0tvQixzQkFBTCxHQUE4QixJQUE5Qjs7O0dBSEo7Ozs7Ozs7Ozs7O0FBaUJGLEFBQU8sU0FBU0ksVUFBVCxDQUFvQlosS0FBcEIsRUFBMkJhLElBQTNCLEVBQWlDOztPQUVqQ2YsUUFBTCxHQUFnQkUsS0FBaEI7TUFDR0EsU0FBUyxLQUFaLEVBQW1CO1NBQ1pVLGNBQUw7Ozs7OzsyQkFDc0JHLEtBQUtOLFFBQTNCLDhIQUFxQztZQUE1Qk8sU0FBNEI7O1lBQy9CQSxVQUFVaEIsUUFBVixJQUFzQixDQUFDZ0IsVUFBVUwsaUJBQVYsRUFBM0IsRUFBMEQ7b0JBQzlDRSxjQUFWOzs7Ozs7a0NBQ3VCRyxVQUFVUixPQUFqQyxtSUFBMEM7a0JBQWpDUyxVQUFpQzs7a0JBQ3BDQSxXQUFXakIsUUFBWCxJQUF1QixDQUFDaUIsV0FBV04saUJBQVgsRUFBNUIsRUFBNEQ7MEJBQ2hEQyxjQUFWOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2NBSUFJLFVBQVVMLGlCQUFWLEVBQUosRUFBbUM7Z0NBQ2JLLFNBQXBCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FaUixNQWlCSztRQUNDLENBQUNELEtBQUtKLGlCQUFMLEVBQUwsRUFBK0I7Ozs7Ozs4QkFDUkksS0FBS04sUUFBMUIsbUlBQW9DO2NBQTVCTyxVQUE0Qjs7Y0FDL0JBLFdBQVVMLGlCQUFWLEVBQUgsRUFBa0M7dUJBQ3RCQyxjQUFWO2dDQUNvQkksVUFBcEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBS1FELElBQWhCOzs7Ozs7OzBCQUVrQkEsS0FBS04sUUFBdkIsbUlBQWlDO1VBQXhCUyxLQUF3Qjs7c0JBQ2ZBLEtBQWhCOzs7Ozs7OzhCQUU0QkEsTUFBTVYsT0FBbEMsbUlBQTJDO2NBQWxDVyxlQUFrQzs7Y0FDdENBLG1CQUFtQkosSUFBdEIsRUFBNEI7NEJBQ1ZJLGVBQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFLYUosS0FBS1AsT0FBeEIsbUlBQWlDO1VBQXhCWSxNQUF3Qjs7c0JBQ2ZBLE1BQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJSixTQUFTQyxtQkFBVCxDQUE2Qk4sSUFBN0IsRUFBbUM7Ozs7OzswQkFDWEEsS0FBS04sUUFBM0IsbUlBQXFDO1VBQTVCTyxTQUE0Qjs7VUFDL0JBLFVBQVVMLGlCQUFWLEVBQUosRUFBbUM7a0JBQ3ZCQyxjQUFWO3dCQUNnQkksU0FBaEI7NEJBQ29CQSxTQUFwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtOLFNBQVNNLG1CQUFULENBQTZCUCxJQUE3QixFQUFtQzs7Ozs7OzBCQUNYQSxLQUFLTixRQUEzQixtSUFBcUM7VUFBNUJPLFNBQTRCOztVQUMvQkEsVUFBVWhCLFFBQVYsSUFBc0IsQ0FBQ2dCLFVBQVVMLGlCQUFWLEVBQTNCLEVBQTBEO2tCQUM5Q0UsY0FBVjs7Ozs7O2dDQUN1QkcsVUFBVVIsT0FBakMsbUlBQTBDO2dCQUFqQ1MsVUFBaUM7O2dCQUNwQ0EsV0FBV2pCLFFBQVgsSUFBdUIsQ0FBQ2lCLFdBQVdOLGlCQUFYLEVBQTVCLEVBQTREO3dCQUNoREMsY0FBVjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUlBSSxVQUFVTCxpQkFBVixFQUFKLEVBQW1DOzBCQUNqQkssU0FBaEI7OEJBQ29CQSxTQUFwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNUixBQUFPLFNBQVNPLGFBQVQsQ0FBdUJSLElBQXZCLEVBQTZCO01BQy9CQSxJQUFILEVBQVM7U0FDRmQsV0FBTCxHQUFtQixJQUFuQjtvQkFDZ0JjLElBQWhCOzBCQUNzQlMsSUFBdEIsQ0FBMkJULElBQTNCOzs7O0FBSUosQUFBTyxTQUFTVSx5QkFBVCxDQUFtQ0MsWUFBbkMsRUFDUDtNQUNNQyxpQkFBaUIsRUFBckI7Ozs7OzsyQkFDd0JELFlBQXhCLHdJQUFzQztVQUE3QkUsV0FBNkI7O1VBQ2hDLENBQUNBLFlBQVk1QixRQUFqQixFQUEyQjs7Ozs7Ozs7K0JBR0o0QixZQUFZcEIsT0FBbkMsd0lBQTRDO2NBQW5DUyxVQUFtQzs7Y0FDdENBLFdBQVdqQixRQUFYLElBQXVCLENBQUNpQixXQUFXTixpQkFBWCxFQUE1QixFQUE0RDt3QkFDOUNDLGNBQVo7NkJBQ2lCZSxlQUFlRSxNQUFmLENBQXNCRCxZQUFZbkIsUUFBbEMsQ0FBakI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFLRmtCLGVBQWVHLE1BQWYsR0FBd0IsQ0FBNUIsRUFBK0I7OEJBQ0hILGNBQTFCOzs7Ozs7QUFNSixBQUFPLFNBQVNJLGVBQVQsQ0FBeUJoQixJQUF6QixFQUErQjtNQUNoQ2lCLE9BQU8sRUFBWDtNQUNJakIsS0FBS2QsV0FBVCxFQUNBO1dBQ1NjLEtBQUtmLFFBQUwsR0FBZ0IscUJBQWhCLEdBQXdDLHdCQUEvQztHQUZGLE1BR087UUFDRGUsS0FBS2YsUUFBVCxFQUFtQjtVQUNiaUMsZUFBZWxCLElBQWYsQ0FBSixFQUEwQjtlQUNqQixVQUFQO09BREYsTUFFTztlQUNFLFFBQVA7O0tBSkosTUFNTztVQUNBbUIsMEJBQTBCLEtBQTFCLElBQW1DQywwQkFBMEJwQixJQUExQixDQUFwQyxJQUF3RUEsS0FBS1AsT0FBTCxDQUFhc0IsTUFBYixJQUF1QixDQUFuRyxFQUFzRztlQUM3RixXQUFQO09BREYsTUFFTztlQUNFLGFBQVA7Ozs7TUFJSEUsS0FBS0YsTUFBTCxHQUFjLENBQWpCLEVBQW9COzt5QkFFR2YsSUFBckIsRUFBMkJpQixJQUEzQjtHQUZGLE1BR087WUFDR0ksR0FBUixDQUFZLDZDQUE2Q3JCLEtBQUs3QixJQUFsRCxHQUF5RCxHQUF6RCxHQUErRDZCLEtBQUtYLEVBQWhGOzs7O0FBSUosQUFBTyxTQUFTK0IseUJBQVQsQ0FBbUNwQixJQUFuQyxFQUF5QztNQUMxQ3NCLG1CQUFtQixLQUF2Qjs7Ozs7OzJCQUN1QnRCLEtBQUtQLE9BQTVCLHdJQUFxQztVQUE1QlMsVUFBNEI7O3lCQUNmQSxXQUFXakIsUUFBWCxJQUF1QixDQUFDaUIsV0FBV04saUJBQVgsRUFBekIsSUFBNEQwQixnQkFBL0U7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQUVpQkEsb0JBQXFCdEIsS0FBS1AsT0FBTCxDQUFhc0IsTUFBYixLQUF3QixDQUFoRTtTQUNPTyxnQkFBUDs7O0FBR0YsU0FBU0Msb0JBQVQsQ0FBOEJ2QixJQUE5QixFQUFvQ3dCLEtBQXBDLEVBQTJDO1dBQ2hDQyxjQUFULENBQXdCekIsS0FBS1gsRUFBN0IsRUFBaUNxQyxnQkFBakMsQ0FBa0QsZUFBbEQsRUFBbUVDLE9BQW5FLENBQTJFLFVBQVNDLE9BQVQsRUFBa0I7c0JBQ3pFQSxPQUFsQjtZQUNRQyxTQUFSLENBQWtCQyxHQUFsQixDQUFzQk4sS0FBdEI7R0FGRjtNQUlJTyxnQkFBZ0IsVUFBcEI7TUFDRy9CLEtBQUtmLFFBQUwsSUFBaUJlLEtBQUtKLGlCQUFMLEVBQXBCLEVBQThDO29CQUM1QixVQUFoQjs7V0FFTzZCLGNBQVQsQ0FBd0J6QixLQUFLWCxFQUE3QixFQUFpQ3FDLGdCQUFqQyxDQUFrRCxnQkFBbEQsRUFBb0VDLE9BQXBFLENBQTRFLFVBQVNDLE9BQVQsRUFBa0I7WUFDcEZDLFNBQVIsQ0FBa0JHLE1BQWxCLENBQXlCLFVBQXpCO1lBQ1FILFNBQVIsQ0FBa0JHLE1BQWxCLENBQXlCLFVBQXpCO1lBQ1FILFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCQyxhQUF0QjtHQUhGOzs7QUFPRixBQUFPLFNBQVNiLGNBQVQsQ0FBd0JsQixJQUF4QixFQUE4QjtNQUMvQmtCLGlCQUFpQixJQUFyQjs7Ozs7OzJCQUNrQmxCLEtBQUtOLFFBQXZCLHdJQUFpQztVQUF4QlMsS0FBd0I7O1VBQzNCQSxNQUFNbEIsUUFBVixFQUFvQjs7O2FBR2JBLFFBQUwsR0FBZ0IsS0FBaEI7eUJBQ2lCbUMsMEJBQTBCakIsS0FBMUIsS0FBb0NlLGNBQXJEO2FBQ0tqQyxRQUFMLEdBQWdCLElBQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FHR2lDLGNBQVA7OztBQUdGLFNBQVNlLGlCQUFULENBQTJCQyxXQUEzQixFQUF3QztjQUMxQkwsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIsVUFBN0I7Y0FDWUgsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIsV0FBN0I7Y0FDWUgsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIsUUFBN0I7Y0FDWUgsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIsYUFBN0I7Y0FDWUgsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIscUJBQTdCO2NBQ1lILFNBQVosQ0FBc0JHLE1BQXRCLENBQTZCLHdCQUE3Qjs7O0FDbE9LLElBQUliLHlCQUF5QixJQUE3QjtBQUNQLElBQUlnQixvQkFBb0IsS0FBeEI7O0FBRUEsQUFBTyxTQUFTQywyQkFBVCxHQUF1QztNQUN4QzdELHVCQUF1QixDQUEzQixFQUE4QjthQUNuQmtELGNBQVQsQ0FBd0IsZ0NBQXhCLEVBQTBESSxTQUExRCxDQUFvRUcsTUFBcEUsQ0FBMkUsTUFBM0U7R0FERixNQUVPO2FBQ0lQLGNBQVQsQ0FBd0IsZ0NBQXhCLEVBQTBESSxTQUExRCxDQUFvRUMsR0FBcEUsQ0FBd0UsTUFBeEU7Ozs7QUFJSk8sU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVc7O01BRW5EQyxnQkFBZ0IsRUFBcEI7TUFDSUMsZ0JBQWdCLEtBQXBCO01BQ0lDLFlBQVksR0FBaEI7O01BRUlDLFlBQWEsWUFBVzs7UUFFdEJDLGlCQUFpQnpFLFdBQVcsQ0FBWCxFQUFjQyxJQUFuQztRQUNJeUUsYUFBYUMsZ0JBQWdCM0UsVUFBaEIsQ0FBakI7O2FBRVMyRSxlQUFULENBQXlCM0UsYUFBekIsRUFBcUM7VUFDL0IwRSxhQUFhLEVBQWpCOzs7Ozs7NkJBQ29CMUUsYUFBcEIsOEhBQWdDO2NBQXZCNEUsT0FBdUI7O2NBQzFCQyxZQUFZLEVBQWhCO29CQUNVNUUsSUFBVixHQUFpQjJFLFFBQVEzRSxJQUF6QjtvQkFDVTZFLEtBQVYsR0FBa0IsRUFBbEI7Ozs7OztrQ0FDb0JGLFFBQVFFLEtBQTVCLG1JQUFtQztrQkFBMUJDLE9BQTBCOzt3QkFDdkJELEtBQVYsQ0FBZ0J2QyxJQUFoQixDQUFxQixJQUFJakMsSUFBSixDQUFTeUUsUUFBUTlFLElBQWpCLEVBQ1M4RSxRQUFRNUUsU0FEakIsRUFFUzZFLFdBQVdELFFBQVE5RCxLQUFuQixDQUZULEVBR1M4RCxRQUFRN0QsYUFIakIsRUFJUytELGFBQWFGLFFBQVE5RSxJQUFyQixDQUpULEVBS1M4RSxRQUFRM0QsV0FMakIsRUFNUzJELFFBQVExRCxhQU5qQixFQU9TMEQsUUFBUXpELFlBUGpCLENBQXJCOzs7Ozs7Ozs7Ozs7Ozs7OztjQVVFNEQsV0FBV0wsVUFBVUMsS0FBVixDQUFnQixDQUFoQixDQUFmOzJCQUNpQkQsVUFBVUMsS0FBM0IsRUFBa0NJLFFBQWxDO3FCQUNXM0MsSUFBWCxDQUFnQnNDLFNBQWhCOzs7Ozs7Ozs7Ozs7Ozs7OzthQUVLSCxVQUFQOzs7YUFHT1MsZ0JBQVQsQ0FBMEJDLFNBQTFCLEVBQXFDekMsV0FBckMsRUFBa0Q7O1VBRTVDMEMsbUJBQW1CLENBQXZCOztZQUVNMUMsWUFBWXZCLFdBQVosSUFBMkJrRSxTQUEvQixFQUEwQztZQUN0Q0QsZ0JBQUY7O1lBRUUxQyxZQUFZdEIsYUFBWixJQUE2QmlFLFNBQWpDLEVBQTRDO1lBQ3hDRCxnQkFBRjs7WUFFRTFDLFlBQVlyQixZQUFaLElBQTRCZ0UsU0FBaEMsRUFBMkM7WUFDdkNELGdCQUFGOzs7Ozs7Ozs7OEJBSWdCRCxTQUFwQixtSUFBK0I7Y0FBdEJHLE9BQXNCOztjQUN6QjVDLFlBQVluQixRQUFaLENBQXFCcUIsTUFBckIsSUFBK0J3QyxnQkFBbkMsRUFBcUQ7OztjQUdsREUsUUFBUXBFLEVBQVIsSUFBY3dCLFlBQVl2QixXQUExQixJQUF5Q21FLFFBQVFwRSxFQUFSLElBQWN3QixZQUFZdEIsYUFBbkUsSUFBb0ZrRSxRQUFRcEUsRUFBUixJQUFjd0IsWUFBWXJCLFlBQWpILEVBQStIO3dCQUNqSEUsUUFBWixDQUFxQmUsSUFBckIsQ0FBMEJnRCxPQUExQjtvQkFDUWhFLE9BQVIsQ0FBZ0JnQixJQUFoQixDQUFxQkksV0FBckI7OzZCQUVpQnlDLFNBQWpCLEVBQTRCRyxPQUE1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUtHQyxpQkFBVCxDQUEyQmpGLE9BQTNCLEVBQW9DO3VCQUNqQkEsT0FBakI7OzthQUdPa0YsaUJBQVQsR0FBNkI7YUFDcEJoQixjQUFQOzs7YUFHT2lCLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCOzs7Ozs7OEJBQ1JDLEtBQWpCLG1JQUF3QjtjQUFmQyxJQUFlOztjQUNsQkEsS0FBSzVGLElBQUwsR0FBWTBGLFFBQWhCLEVBQTBCO21CQUNqQkUsSUFBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUtHQyxRQUFULEdBQW9CO2FBQ1hwQixVQUFQOzs7YUFHT2dCLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCO1VBQ3JCQSxZQUFZTCxTQUFoQixFQUEyQjtlQUNsQkksUUFBUWpCLGNBQVIsQ0FBUDtPQURGLE1BRU87Ozs7OztnQ0FDWUMsVUFBakIsbUlBQTZCO2dCQUFwQm1CLElBQW9COztnQkFDdkJBLEtBQUs1RixJQUFMLElBQWEwRixRQUFqQixFQUEyQjtxQkFDbEJFLElBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBTUNFLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCOzs7Ozs7OEJBQ050QixVQUFqQixtSUFBNkI7Y0FBcEJtQixJQUFvQjs7Ozs7O2tDQUNWQSxLQUFLZixLQUF0QixtSUFBNkI7a0JBQXBCaEQsSUFBb0I7O2tCQUN2QkEsS0FBS1gsRUFBTCxJQUFXNkUsTUFBZixFQUF1Qjt1QkFDZGxFLElBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFNQ21FLFlBQVQsQ0FBc0JOLFFBQXRCLEVBQWdDO1VBQzFCTyxZQUFZLENBQWhCO1VBQ0lQLFlBQVlMLFNBQWhCLEVBQTJCO2VBQ2xCSSxRQUFRQyxRQUFSLEVBQWtCYixLQUFsQixDQUF3QmpDLE1BQS9CO09BREYsTUFFTzs7Ozs7O2dDQUNZNkIsVUFBakIsbUlBQTZCO2dCQUFwQm1CLElBQW9COzt3QkFDZkksYUFBYUosS0FBSzVGLElBQWxCLENBQVo7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBR0dpRyxTQUFQOzs7YUFHT0MsZ0JBQVQsQ0FBMEJSLFFBQTFCLEVBQW9DO1VBQzlCUyxnQkFBZ0IsRUFBcEI7O1VBRUlULFlBQVlMLFNBQWhCLEVBQTJCOzs7Ozs7Z0NBQ1JJLFFBQVFDLFFBQVIsRUFBa0JiLEtBQW5DLG1JQUEwQztnQkFBakNoRCxJQUFpQzs7Z0JBQ3BDQSxLQUFLZixRQUFULEVBQW1COzRCQUNId0IsSUFBZCxDQUFtQlQsSUFBbkI7Ozs7Ozs7Ozs7Ozs7Ozs7O09BSE4sTUFNTzs7Ozs7O2lDQUNpQjRDLFVBQXRCLHdJQUFrQztnQkFBekJHLFNBQXlCOzs0QkFDaEJ1QixjQUFjeEQsTUFBZCxDQUFxQnVELGlCQUFpQnRCLFVBQVU1RSxJQUEzQixDQUFyQixDQUFoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFHR21HLGFBQVA7OzthQUdPQyxVQUFULENBQW9CdkUsSUFBcEIsRUFBMEI7VUFDcEJ3RSxhQUFhLEVBQWpCO29CQUNjQSxVQUFkLEVBQTBCUCxRQUFRakUsS0FBS1YsV0FBYixDQUExQjtvQkFDY2tGLFVBQWQsRUFBMEJQLFFBQVFqRSxLQUFLVCxhQUFiLENBQTFCO29CQUNjaUYsVUFBZCxFQUEwQlAsUUFBUWpFLEtBQUtSLFlBQWIsQ0FBMUI7YUFDT2dGLFVBQVA7OzthQUdPQyxTQUFULENBQW1CekUsSUFBbkIsRUFBeUI7VUFDbkIwRSxjQUFjLEVBQWxCOzs7Ozs7K0JBQ2lCOUIsVUFBakIsd0lBQTZCO2NBQXBCbUIsSUFBb0I7Ozs7OzttQ0FDQ0EsS0FBS2YsS0FBakMsd0lBQXdDO2tCQUEvQjJCLGVBQStCOztrQkFDbENBLGdCQUFnQnJGLFdBQWhCLElBQStCVSxLQUFLWCxFQUFwQyxJQUEwQ3NGLGdCQUFnQnBGLGFBQWhCLElBQWlDUyxLQUFLWCxFQUFoRixJQUFzRnNGLGdCQUFnQm5GLFlBQWhCLElBQWdDUSxLQUFLWCxFQUEvSCxFQUFtSTs0QkFDckhvQixJQUFaLENBQWlCa0UsZUFBakI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUlDRCxXQUFQOzs7YUFHT0UsYUFBVCxDQUF1QkMsVUFBdkIsRUFBbUM3RSxJQUFuQyxFQUF5QztVQUNuQ0EsU0FBU3dELFNBQWIsRUFBd0I7bUJBQ1gvQyxJQUFYLENBQWdCVCxJQUFoQjs7Ozs7V0FLRzt5QkFDYzJELGlCQURkO3lCQUVjRCxpQkFGZDtlQUdJRSxPQUhKO2dCQUlLSSxRQUpMO2VBS0lDLE9BTEo7b0JBTVNFLFlBTlQ7d0JBT2FFLGdCQVBiO2lCQVFNSSxTQVJOO2tCQVNPRjtLQVRkO0dBM0pjLEVBQWhCOztXQXlLU08sT0FBVCxDQUFpQmhCLEtBQWpCLEVBQXdCO1VBQ2hCbkMsT0FBTixDQUFjLFVBQVNvQyxJQUFULEVBQWVnQixLQUFmLEVBQXNCO2VBQ3pCaEIsSUFBVCxFQUFlZ0IsS0FBZjt1QkFDaUJoQixJQUFqQjtLQUZGOzthQUtTdEMsY0FBVCxDQUF3QixZQUF4QixFQUFzQ3VELFdBQXRDLEdBQW9EekMsYUFBcEQ7YUFDU2QsY0FBVCxDQUF3QnFDLE1BQU0sQ0FBTixFQUFTM0YsSUFBVCxDQUFjOEcsV0FBZCxLQUE4QixNQUF0RCxFQUE4REMsS0FBOUQ7OztVQUdNeEMsVUFBVXNCLFFBQVYsRUFBUjs7V0FFU21CLFFBQVQsQ0FBa0JwQixJQUFsQixFQUF3QmdCLEtBQXhCLEVBQStCO1FBQ3pCSyxZQUFZLEVBQWhCLENBRDZCO1FBRXpCQyxZQUFZLEVBQWhCO1FBQ0lDLGFBQWFqRCxTQUFTa0QsYUFBVCxDQUF1QixLQUF2QixDQUFqQjtlQUNXbEcsRUFBWCxHQUFnQm1HLFlBQVl6QixLQUFLNUYsSUFBTCxHQUFZLE1BQXhCLENBQWhCO2VBQ1cwRCxTQUFYLENBQXFCQyxHQUFyQixDQUF5QixLQUF6QjtlQUNXMkQsS0FBWCxDQUFpQkMsR0FBakIsR0FBd0IsS0FBS1gsS0FBTixHQUFlLEVBQWYsR0FBb0IsSUFBM0M7ZUFDV0MsV0FBWCxHQUF5QmpCLEtBQUs1RixJQUE5Qjs7UUFFSXdILGlCQUFpQnRELFNBQVNrRCxhQUFULENBQXVCLEtBQXZCLENBQXJCO21CQUNlbEcsRUFBZixHQUFvQjBFLEtBQUs1RixJQUFMLENBQVU4RyxXQUFWLEtBQTBCLGNBQTlDO21CQUNlcEQsU0FBZixDQUF5QkMsR0FBekIsQ0FBNkIsYUFBN0I7bUJBQ2VrRCxXQUFmLEdBQTZCLFNBQVN0QyxVQUFVeUIsWUFBVixDQUF1QkosS0FBSzVGLElBQTVCLENBQXRDO2VBQ1d5SCxXQUFYLENBQXVCRCxjQUF2Qjs7ZUFFV3JELGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFlBQVc7ZUFDckNaLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDQyxPQUFsQyxDQUEwQyxVQUFVa0UsRUFBVixFQUFjO1dBQ25EaEUsU0FBSCxDQUFhRyxNQUFiLENBQW9CLFVBQXBCO09BREY7aUJBR1dILFNBQVgsQ0FBcUJDLEdBQXJCLENBQXlCLFVBQXpCO3NCQUNnQmlDLEtBQUs1RixJQUFyQjtVQUNJLENBQUNnRSxpQkFBTCxFQUF3Qjs7O0tBTjFCOzthQVdTVixjQUFULENBQXdCLHFCQUF4QixFQUErQ3FFLEtBQS9DLENBQXFEUixVQUFyRDs7O1dBR09TLGdCQUFULENBQTBCaEMsSUFBMUIsRUFBZ0M7UUFDMUJpQyxjQUFjM0QsU0FBU2tELGFBQVQsQ0FBdUIsS0FBdkIsQ0FBbEI7Z0JBQ1lsRyxFQUFaLEdBQWlCNEcsYUFBYWxDLEtBQUs1RixJQUFsQixDQUFqQjtnQkFDWTBELFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLFlBQTFCO2dCQUNZRCxTQUFaLENBQXNCQyxHQUF0QixDQUEwQixNQUExQjthQUNTTCxjQUFULENBQXdCLFlBQXhCLEVBQXNDbUUsV0FBdEMsQ0FBa0RJLFdBQWxEOzs7OztRQUtJRSxVQUFVLEVBQWQ7UUFDSUMsVUFBVSxFQUFkO1FBQ0lDLHNCQUFzQixDQUExQjtRQUNJQyx1QkFBdUIsQ0FBM0I7Ozs7Ozs7O1lBRVNyRyxJQWZxQjs7O1lBaUJ4QnNHLG1CQUFtQkMsaUJBQWlCdkcsSUFBakIsQ0FBdkI7OztZQUdJQSxRQUFRK0QsS0FBS2YsS0FBTCxDQUFXLENBQVgsQ0FBWixFQUNFc0QsaUJBQWlCNUUsZ0JBQWpCLENBQWtDLGVBQWxDLEVBQW1EQyxPQUFuRCxDQUEyRCxVQUFTQyxPQUFULEVBQWtCO2tCQUNuRUMsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsV0FBdEI7U0FERixFQURGLEtBSUs7MkJBQ2NKLGdCQUFqQixDQUFrQyxlQUFsQyxFQUFtREMsT0FBbkQsQ0FBMkQsVUFBU0MsT0FBVCxFQUFrQjtvQkFDbkVDLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGFBQXRCO1dBREY7O3lCQUllSixnQkFBakIsQ0FBa0MsZ0JBQWxDLEVBQW9EQyxPQUFwRCxDQUE0RCxVQUFTQyxPQUFULEVBQWtCO2tCQUNwRUMsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsVUFBdEI7U0FERjs7WUFJSXpCLFNBQVNMLEtBQUtQLE9BQUwsQ0FBYSxDQUFiLENBQWI7WUFDSVksVUFBVW1ELFNBQWQsRUFBeUI7Y0FDbkJnRCx3QkFBd0JDLHlCQUF5QnBHLE1BQXpCLEVBQWlDTCxLQUFLWCxFQUF0QyxDQUE1QjtjQUNJcUgsZ0JBQWdCckUsU0FBU1osY0FBVCxDQUF3QnBCLE9BQU9oQixFQUEvQixDQUFwQjs7Y0FFSXNILFlBQVlDLGtCQUFrQkYsY0FBY2pCLEtBQWQsQ0FBb0JDLEdBQXRDLENBQWhCO2NBQ0ltQixhQUFhRCxrQkFBa0JGLGNBQWNqQixLQUFkLENBQW9CcUIsSUFBdEMsQ0FBakI7Y0FDSU4seUJBQXlCLE1BQTdCLEVBQXFDOzZCQUNsQmYsS0FBakIsQ0FBdUJDLEdBQXZCLEdBQTZCaUIsWUFBWVIsT0FBWixHQUFzQixJQUFuRDs2QkFDaUJWLEtBQWpCLENBQXVCcUIsSUFBdkIsR0FBOEJELGFBQWFYLE9BQWIsR0FBdUIsSUFBckQ7V0FGRixNQUdPLElBQUlNLHlCQUF5QixPQUE3QixFQUFzQzs2QkFDMUJmLEtBQWpCLENBQXVCQyxHQUF2QixHQUE2QmlCLFlBQVlSLE9BQVosR0FBc0IsSUFBbkQ7NkJBQ2lCVixLQUFqQixDQUF1QnFCLElBQXZCLEdBQThCRCxhQUFhWCxPQUFiLEdBQXVCLElBQXJEO1dBRkssTUFHQTs2QkFDWVQsS0FBakIsQ0FBdUJDLEdBQXZCLEdBQTZCaUIsWUFBYVIsVUFBVSxDQUF2QixHQUE0QixJQUF6RDs2QkFDaUJWLEtBQWpCLENBQXVCcUIsSUFBdkIsR0FBOEJELGFBQWEsSUFBM0M7O1NBZEosTUFnQk87MkJBQ1lwQixLQUFqQixDQUF1QkMsR0FBdkIsR0FBNkIsTUFBN0I7MkJBQ2lCRCxLQUFqQixDQUF1QnFCLElBQXZCLEdBQThCLE1BQTlCOzs7WUFHRUMsZUFBZUgsa0JBQWtCTixpQkFBaUJiLEtBQWpCLENBQXVCcUIsSUFBekMsQ0FBbkI7WUFDSUMsZUFBZVgsbUJBQW5CLEVBQXdDO2dDQUNoQlcsWUFBdEI7O1lBRUVBLGVBQWVWLG9CQUFuQixFQUF5QztpQ0FDaEJVLFlBQXZCOzs7b0JBR1VuQixXQUFaLENBQXdCVSxnQkFBeEI7O3lCQUVpQmhFLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQyxVQUFTMEUsQ0FBVCxFQUFZO3NCQUN6Q2hILElBQVosRUFBa0JnSCxDQUFsQjtTQURGO3lCQUdpQjFFLGdCQUFqQixDQUFrQyxXQUFsQyxFQUErQyxVQUFTMEUsQ0FBVCxFQUFZO3NCQUM3Q2hILElBQVosRUFBa0JnSCxDQUFsQjtTQURGO3lCQUdpQjFFLGdCQUFqQixDQUFrQyxVQUFsQyxFQUE4QyxZQUFXO3dCQUN6Q3RDLElBQWQ7U0FERjs7OzZCQXhEZStELEtBQUtmLEtBQXRCLHdJQUE2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBNkR6QmlFLFlBQVksRUFBaEIsQ0E1RThCO1FBNkUxQkMsVUFBVSxFQUFkLENBN0U4Qjs7UUErRTFCQyxZQUFZZCx1QkFBdUJELG1CQUF2QixHQUE2Q2EsU0FBN0MsR0FBMERDLFVBQVUsQ0FBcEY7Z0JBQ1l6QixLQUFaLENBQWtCMkIsS0FBbEIsR0FBMEJELFlBQVksSUFBdEM7YUFDUzFGLGNBQVQsQ0FBd0J3RSxhQUFhbEMsS0FBSzVGLElBQWxCLENBQXhCLEVBQWlEdUQsZ0JBQWpELENBQWtFLGFBQWxFLEVBQWlGQyxPQUFqRixDQUF5RixVQUFVa0UsRUFBVixFQUFjO1VBQ2pHd0IsVUFBVVQsa0JBQWtCZixHQUFHSixLQUFILENBQVNxQixJQUEzQixJQUFvQyxDQUFDVixtQkFBckMsR0FBNERjLE9BQTVELEdBQXNFLElBQXBGO1NBQ0d6QixLQUFILENBQVNxQixJQUFULEdBQWdCTyxPQUFoQjtLQUZGOzs7Ozs7OzZCQUtpQnRELEtBQUtmLEtBQXRCLHdJQUE2QjtZQUFwQmhELEtBQW9COztZQUN2QjBHLGdCQUFnQnJFLFNBQVNaLGNBQVQsQ0FBd0J6QixNQUFLWCxFQUE3QixDQUFwQjtZQUNJVyxNQUFLVixXQUFMLElBQW9Ca0UsU0FBeEIsRUFBbUM7Y0FDN0I4RCxtQkFBbUJqRixTQUFTWixjQUFULENBQXdCekIsTUFBS1YsV0FBN0IsQ0FBdkI7Y0FDSWdJLG9CQUFvQixJQUF4QixFQUE4QjtvQkFDcEJqRyxHQUFSLENBQVkscUNBQXFDckIsTUFBS1YsV0FBMUMsR0FBd0QsY0FBeEQsR0FBeUVvSCxjQUFjckgsRUFBbkc7V0FERixNQUVPO2lDQUNnQnFILGFBQXJCLEVBQW9DWSxnQkFBcEMsRUFBc0R0QixXQUF0RDs7O1lBR0FoRyxNQUFLVCxhQUFMLElBQXNCaUUsU0FBMUIsRUFBcUM7Y0FDL0IrRCxxQkFBcUJsRixTQUFTWixjQUFULENBQXdCekIsTUFBS1QsYUFBN0IsQ0FBekI7Y0FDSWdJLHNCQUFzQixJQUExQixFQUFnQztvQkFDdEJsRyxHQUFSLENBQVksdUNBQXVDckIsTUFBS1QsYUFBNUMsR0FBNEQsY0FBNUQsR0FBNkVtSCxjQUFjckgsRUFBdkc7V0FERixNQUVPO2lDQUNnQnFILGFBQXJCLEVBQW9DYSxrQkFBcEMsRUFBd0R2QixXQUF4RDs7O1lBR0FoRyxNQUFLUixZQUFMLElBQXFCZ0UsU0FBekIsRUFBb0M7Y0FDOUJnRSxvQkFBb0JuRixTQUFTWixjQUFULENBQXdCekIsTUFBS1IsWUFBN0IsQ0FBeEI7Y0FDSWdJLHFCQUFxQixJQUF6QixFQUErQjtvQkFDckJuRyxHQUFSLENBQVksc0NBQXNDckIsTUFBS1IsWUFBM0MsR0FBMEQsY0FBMUQsR0FBMkVrSCxjQUFjckgsRUFBckc7V0FERixNQUVPO2lDQUNnQnFILGFBQXJCLEVBQW9DYyxpQkFBcEMsRUFBdUR4QixXQUF2RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FNQ08sZ0JBQVQsQ0FBMEJ2RyxJQUExQixFQUFnQztRQUMxQnNHLG1CQUFtQmpFLFNBQVNrRCxhQUFULENBQXVCLEtBQXZCLENBQXZCO1FBQ0lrQyxnQkFBZ0JwRixTQUFTa0QsYUFBVCxDQUF1QixLQUF2QixDQUFwQjtRQUNJbUMsa0JBQWtCckYsU0FBU2tELGFBQVQsQ0FBdUIsS0FBdkIsQ0FBdEI7UUFDSW9DLG1CQUFtQnRGLFNBQVNrRCxhQUFULENBQXVCLEtBQXZCLENBQXZCO1FBQ0lxQyxtQkFBbUJ2RixTQUFTa0QsYUFBVCxDQUF1QixLQUF2QixDQUF2Qjs7cUJBRWlCMUQsU0FBakIsQ0FBMkJDLEdBQTNCLENBQStCLGNBQS9CO2tCQUNjRCxTQUFkLENBQXdCQyxHQUF4QixDQUE0QixjQUE1QjtvQkFDZ0JELFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixjQUE5QjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixjQUEvQjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixjQUEvQjs7cUJBRWlCRCxTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsWUFBL0I7cUJBQ2lCekMsRUFBakIsR0FBc0JXLEtBQUtYLEVBQTNCOztrQkFFY3dDLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLFNBQTVCO2tCQUNjRCxTQUFkLENBQXdCQyxHQUF4QixDQUE0QixlQUE1QjtvQkFDZ0JELFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixVQUE5QjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixVQUEvQjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixXQUEvQjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixZQUEvQjtxQkFDaUJELFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixlQUEvQjs7b0JBRWdCa0QsV0FBaEIsR0FBOEJoRixLQUFLN0IsSUFBbkM7cUJBQ2lCNkcsV0FBakIsR0FBK0I2QyxpQkFBaUI3SCxLQUFLM0IsU0FBdEIsRUFBaUMsQ0FBakMsSUFBc0MyQixLQUFLYixLQUEzQyxHQUFtRDBJLGlCQUFpQjdILEtBQUszQixTQUF0QixFQUFpQyxDQUFqQyxDQUFsRjs7cUJBRWlCeUosTUFBakIsQ0FBd0JMLGFBQXhCO3FCQUNpQkssTUFBakIsQ0FBd0JKLGVBQXhCO3FCQUNpQkksTUFBakIsQ0FBd0JILGdCQUF4QjtxQkFDaUJHLE1BQWpCLENBQXdCRixnQkFBeEI7O1dBRU90QixnQkFBUDs7O1dBR095QixvQkFBVCxDQUE4QnJCLGFBQTlCLEVBQTZDc0IsWUFBN0MsRUFBMkRoQyxXQUEzRCxFQUF3RTtRQUNsRWlDLGNBQWM1RixTQUFTa0QsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtnQkFDWTFELFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLG1CQUExQjs7UUFFSW9HLFVBQVV0QixrQkFBa0JGLGNBQWNqQixLQUFkLENBQW9CcUIsSUFBdEMsQ0FBZDtRQUNJcUIsVUFBVXZCLGtCQUFrQkYsY0FBY2pCLEtBQWQsQ0FBb0JDLEdBQXRDLENBQWQ7UUFDSTBDLFNBQVN4QixrQkFBa0JvQixhQUFhdkMsS0FBYixDQUFtQnFCLElBQXJDLENBQWI7UUFDSXVCLFNBQVN6QixrQkFBa0JvQixhQUFhdkMsS0FBYixDQUFtQkMsR0FBckMsQ0FBYjs7Z0JBRVlELEtBQVosQ0FBa0IyQixLQUFsQixHQUEwQmlCLFNBQVNGLE9BQVQsR0FBbUIsRUFBbkIsR0FBd0IsSUFBbEQ7O1FBRUlHLE9BQU8sQ0FBQ0osVUFBVUUsTUFBWCxJQUFxQixDQUFoQztRQUNJRyxPQUFPLENBQUNKLFVBQVVFLE1BQVgsSUFBcUIsQ0FBaEM7O1FBRUlHLFFBQVVDLEtBQUtDLEtBQUwsQ0FBV1AsVUFBVUUsTUFBckIsRUFBNkJILFVBQVVFLE1BQXZDLElBQWlELEdBQWpELEdBQXVESyxLQUFLRSxFQUE3RCxHQUFtRSxHQUFoRjtRQUNJQyxZQUFZLFlBQWFKLEtBQWIsR0FBc0IsTUFBdEM7O2dCQUVZL0MsS0FBWixDQUFrQm1ELFNBQWxCLEdBQThCQSxTQUE5QjtnQkFDWW5ELEtBQVosQ0FBa0JDLEdBQWxCLEdBQXlCeUMsVUFBVSxFQUFYLEdBQWlCLElBQXpDO2dCQUNZMUMsS0FBWixDQUFrQnFCLElBQWxCLEdBQTBCb0IsVUFBVSxFQUFYLEdBQWlCLElBQTFDOztnQkFFWXRDLFdBQVosQ0FBd0JxQyxXQUF4Qjs7O1dBR094Qix3QkFBVCxDQUFrQ3BHLE1BQWxDLEVBQTBDd0ksT0FBMUMsRUFBbUQ7UUFDN0N4SSxPQUFPZixXQUFQLElBQXNCdUosT0FBMUIsRUFBbUM7YUFDMUIsTUFBUDtLQURGLE1BRU8sSUFBSXhJLE9BQU9kLGFBQVAsSUFBd0JzSixPQUE1QixFQUFxQzthQUNuQyxRQUFQO0tBREssTUFFQSxJQUFJeEksT0FBT2IsWUFBUCxJQUF1QnFKLE9BQTNCLEVBQW9DO2FBQ2xDLE9BQVA7O1dBRUssK0NBQVA7OztXQUlPQyxXQUFULENBQXFCOUksSUFBckIsRUFBMkJnSCxDQUEzQixFQUE4QjtRQUN4QitCLHlCQUF5QixLQUE3QjtRQUNJL0ksS0FBS2YsUUFBVCxFQUFtQjtVQUNkLENBQUNrQyxzQkFBSixFQUE0QjsrQkFDSG5CLElBQXZCO09BREYsTUFFTztZQUNEZ0gsRUFBRWdDLE9BQUYsSUFBYTFLLHNCQUFzQnlDLE1BQXRCLEdBQStCLENBQWhELEVBQW1EOzs7Ozs7bUNBQ3JCekMscUJBQTVCLHdJQUFtRDtrQkFBMUMySyxlQUEwQzs7eUJBQ3RDLEtBQVgsRUFBa0JBLGVBQWxCOzs7Ozs7Ozs7Ozs7Ozs7OzttQ0FFdUIsSUFBekI7U0FKRixNQU1FO3FCQUNXLEtBQVgsRUFBa0JqSixJQUFsQjs7O0tBWE4sTUFjTztVQUNEbUIsc0JBQUosRUFBNEI7WUFDdEI2RixFQUFFZ0MsT0FBTixFQUFlO2NBQ1YxSyxzQkFBc0J5QyxNQUF0QixHQUErQixDQUFsQyxFQUFxQzs7Ozs7O3FDQUNQekMscUJBQTVCLHdJQUFtRDtvQkFBMUMySyxnQkFBMEM7Ozs7OzJCQUl0QyxJQUFYLEVBQWlCQSxnQkFBakI7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQUV1QixJQUF6Qjs7U0FSSixNQVdLO2NBQ0FqSixLQUFLUCxPQUFMLENBQWFzQixNQUFiLEdBQXNCLENBQXpCLEVBQTRCO2lCQUNyQmpCLGNBQUw7Ozs7OztxQ0FDdUJFLEtBQUtQLE9BQTVCLHdJQUFxQztvQkFBNUJTLFVBQTRCOztvQkFDL0JBLFdBQVdqQixRQUFYLElBQXVCLENBQUNpQixXQUFXTixpQkFBWCxFQUE1QixFQUE0RDt1QkFDckRDLGNBQUw7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBS0ssSUFBWCxFQUFpQkcsSUFBakI7O09BdEJKLE1Bd0JPLElBQUlvQiwwQkFBMEJwQixJQUExQixLQUFvQzBDLFVBQVUyQixnQkFBVixHQUE2QnRELE1BQTdCLEdBQXNDd0IsYUFBOUUsRUFBOEY7bUJBQ3hGLElBQVgsRUFBaUJ2QyxJQUFqQjs7Ozs7UUFLQStJLHNCQUFKLEVBQTRCOzBCQUNOckcsVUFBVWlCLGlCQUFWLEVBQXBCOzs7Ozs7Ozs7Ozs7Ozs7dUJBZWlCakIsVUFBVWlCLGlCQUFWLEVBQW5COzs7OztXQUtPdUYsV0FBVCxDQUFxQmxKLElBQXJCLEVBQTJCZ0gsQ0FBM0IsRUFBOEI7UUFDekIxSSxzQkFBc0J5QyxNQUF0QixHQUErQixDQUEvQixJQUFvQyxDQUFDaUcsRUFBRWdDLE9BQTFDLEVBQW1EOzs7a0JBR3JDaEosSUFBZDs7UUFFSTZELFdBQVduQixVQUFVaUIsaUJBQVYsRUFBZjtRQUNJRSxZQUFZTCxTQUFoQixFQUEyQjs7S0FBM0IsTUFFTztVQUNETyxPQUFPckIsVUFBVWtCLE9BQVYsQ0FBa0JDLFFBQWxCLENBQVg7Ozs7Ozs7K0JBRXdCRSxLQUFLZixLQUE3Qix3SUFBb0M7Y0FBM0JtRyxXQUEyQjs7Y0FDL0JBLFlBQVk5SyxTQUFaLElBQXlCMkIsS0FBSzNCLFNBQTlCLElBQTJDOEssWUFBWTlKLEVBQVosSUFBa0JXLEtBQUtYLEVBQXJFLEVBQXlFOzBCQUN6RDhKLFdBQWQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBTUNDLGFBQVQsQ0FBdUJwSixJQUF2QixFQUE2QjtRQUN4QjFCLHNCQUFzQnlDLE1BQXRCLElBQWdDLENBQW5DLEVBQXNDOzs7Ozs7Ozs2QkFHVnpDLHFCQUE1Qix3SUFBbUQ7WUFBMUMySyxlQUEwQzs7d0JBQ2pDL0osV0FBaEIsR0FBOEIsS0FBOUI7d0JBQ2dCK0osZUFBaEI7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUVvQmxJLE1BQXRCLEdBQStCLENBQS9COzs7V0FHT3NJLGdCQUFULENBQTBCeEYsUUFBMUIsRUFBb0M7UUFDOUJBLFlBQVlMLFNBQWhCLEVBQTJCOzs7Ozs7K0JBQ1JkLFVBQVVzQixRQUFWLEVBQWpCLHdJQUF1QztjQUE5QkQsSUFBOEI7OzJCQUNwQkEsS0FBSzVGLElBQXRCOzs7Ozs7Ozs7Ozs7Ozs7O0tBRkosTUFJTztVQUNENEYsUUFBT3JCLFVBQVVrQixPQUFWLENBQWtCQyxRQUFsQixDQUFYOzs7Ozs7K0JBQ2lCRSxNQUFLZixLQUF0Qix3SUFBNkI7Y0FBcEJoRCxNQUFvQjs7MEJBQ1hBLE1BQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBS0dzSixzQkFBVCxDQUFnQ3RKLElBQWhDLEVBQXNDO1FBQ2hDa0IsZUFBZWxCLElBQWYsQ0FBSixFQUEwQjtpQkFDYixLQUFYLEVBQWtCQSxJQUFsQjs7Ozs7Ozs7Ozs7Ozs7OztXQWdCS3VKLGtCQUFULENBQTRCMUYsUUFBNUIsRUFBc0M7UUFDaEMyRixxQkFBcUI5RyxVQUFVMkIsZ0JBQVYsR0FBNkJ0RCxNQUF0RDthQUNTVSxjQUFULENBQXdCLHdCQUF4QixFQUFrRHVELFdBQWxELEdBQWdFd0Usa0JBQWhFO1FBQ0lDLGVBQWVwSCxTQUFTWixjQUFULENBQXdCLHdCQUF4QixDQUFuQjtpQkFDYXVELFdBQWIsR0FBMkJ3RSxrQkFBM0I7UUFDR0EscUJBQXFCakgsYUFBeEIsRUFBdUM7bUJBQ3hCa0QsS0FBYixDQUFtQmlFLEtBQW5CLEdBQTJCLEtBQTNCO0tBREYsTUFFTzttQkFDUWpFLEtBQWIsQ0FBbUJpRSxLQUFuQixHQUEyQixTQUEzQjs7UUFFRTdGLFlBQVlMLFNBQWhCLEVBQTJCOzs7Ozs7K0JBQ1JkLFVBQVVzQixRQUFWLEVBQWpCLHdJQUF1QztjQUE5QkQsSUFBOEI7OzZCQUNsQkEsS0FBSzVGLElBQXhCOzs7Ozs7Ozs7Ozs7Ozs7O0tBRkosTUFJTztVQUNEd0wsTUFBTXRILFNBQVNaLGNBQVQsQ0FBd0JvQyxTQUFTb0IsV0FBVCxLQUF5QixjQUFqRCxDQUFWO1VBQ0kyRSxnQkFBZ0JsSCxVQUFVMkIsZ0JBQVYsQ0FBMkJSLFFBQTNCLEVBQXFDOUMsTUFBekQ7VUFDSThJLGFBQWFuSCxVQUFVeUIsWUFBVixDQUF1Qk4sUUFBdkIsQ0FBakI7VUFDSW1CLFdBQUosR0FBa0I0RSxnQkFBZ0IsS0FBaEIsR0FBd0JDLFVBQTFDOztRQUVFQyxpQkFBaUIsQ0FBQ04scUJBQXFCaEgsYUFBdEIsRUFBcUN1SCxjQUFyQyxDQUFvRCxPQUFwRCxJQUErRCxjQUFwRjtRQUNJQyxjQUFjLENBQUNSLHFCQUFxQi9HLFNBQXRCLEVBQWlDc0gsY0FBakMsQ0FBZ0QsT0FBaEQsSUFBMkQsV0FBN0U7YUFDU3RJLGNBQVQsQ0FBd0IscUJBQXhCLEVBQStDd0ksU0FBL0MsR0FBMkRILGlCQUFpQixPQUFqQixHQUEyQkUsV0FBdEY7OztXQUdPRSxhQUFULEdBQXlCO1FBQ25CQyxVQUFVLEVBQWQ7UUFDSXRHLFdBQVdMLFNBQWY7UUFDSSxDQUFDckIsaUJBQUwsRUFBd0I7aUJBQ1hPLFVBQVVpQixpQkFBVixFQUFYOztRQUVFWCxRQUFRTixVQUFVMkIsZ0JBQVYsQ0FBMkJSLFFBQTNCLENBQVo7Ozs7Ozs2QkFDaUJiLEtBQWpCLHdJQUF3QjtZQUFmaEQsTUFBZTs7WUFDbEJvSyxvQkFBb0JDLHFCQUFxQkYsT0FBckIsRUFBOEJuSyxPQUFLM0IsU0FBbkMsQ0FBeEI7WUFDSStMLHFCQUFxQjVHLFNBQXpCLEVBQW9DOzRCQUNoQnJFLEtBQWxCLEdBQTBCLENBQUVpTCxrQkFBa0JqTCxLQUFsQixHQUEwQixFQUEzQixHQUFrQ2EsT0FBS2IsS0FBTCxHQUFhLEVBQWhELElBQXVELEVBQWpGO1NBREYsTUFFTztrQkFDR3NCLElBQVIsQ0FBYSxFQUFDcEMsV0FBVzJCLE9BQUszQixTQUFqQixFQUE0QmMsT0FBT2EsT0FBS2IsS0FBeEMsRUFBK0NDLGVBQWVZLE9BQUtaLGFBQW5FLEVBQWI7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUdLcUMsY0FBVCxDQUF3QixpQkFBeEIsRUFBMkN3SSxTQUEzQyxHQUF1RCxJQUF2RDtZQUNRdEksT0FBUixDQUFnQixVQUFTMkksS0FBVCxFQUFnQnZGLEtBQWhCLEVBQXVCO1VBQ2pDd0Ysc0JBQXNCbEksU0FBU2tELGFBQVQsQ0FBdUIsS0FBdkIsQ0FBMUI7MEJBQ29CbEcsRUFBcEIsR0FBeUJtTCxtQkFBbUJGLE1BQU1qTSxTQUF6QixDQUF6QjswQkFDb0J3RCxTQUFwQixDQUE4QkMsR0FBOUIsQ0FBa0MsZUFBbEM7MEJBQ29Ca0QsV0FBcEIsR0FBa0NzRixNQUFNak0sU0FBTixHQUFrQixHQUFsQixHQUF3QndKLGlCQUFpQnlDLE1BQU1qTSxTQUF2QixFQUFrQyxDQUFsQyxDQUF4QixHQUErRGlNLE1BQU1uTCxLQUFyRSxHQUE2RTBJLGlCQUFpQnlDLE1BQU1qTSxTQUF2QixFQUFrQyxDQUFsQyxDQUEvRztlQUNTb0QsY0FBVCxDQUF3QixpQkFBeEIsRUFBMkNxRyxNQUEzQyxDQUFrRHlDLG1CQUFsRDtLQUxGO1FBUUlsSSxTQUFTWixjQUFULENBQXdCLGlCQUF4QixFQUEyQ2dKLFlBQTNDLEdBQTBELEdBQTlELEVBQW1FO2VBQ3hEL0ksZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDQyxPQUE1QyxDQUFvRCxVQUFVa0UsRUFBVixFQUFjO1dBQzdESixLQUFILENBQVNpRixRQUFULEdBQW1CLE1BQW5CO09BREY7Ozs7V0FNS0wsb0JBQVQsQ0FBOEJGLE9BQTlCLEVBQXVDOUwsU0FBdkMsRUFBa0Q7Ozs7Ozs2QkFDOUI4TCxPQUFsQix3SUFBMkI7WUFBbEJHLEtBQWtCOztZQUNyQkEsTUFBTWpNLFNBQU4sSUFBbUJBLFNBQXZCLEVBQWtDO2lCQUN6QmlNLEtBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FLR3pDLGdCQUFULENBQTBCeEosU0FBMUIsRUFBcUM7Ozs7Ozs2QkFDZkQsb0JBQXBCLHdJQUEwQztZQUFqQ3VNLE9BQWlDOztZQUNwQ0EsUUFBUXRNLFNBQVIsSUFBcUJBLFNBQXpCLEVBQW9DO2lCQUMzQixDQUFFc00sUUFBUUMsUUFBUixDQUFpQkMsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNkIsQ0FBN0IsQ0FBRixFQUFtQ0YsUUFBUUMsUUFBUixDQUFpQkMsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNkIsQ0FBN0IsQ0FBbkMsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBR0l4SixHQUFSLENBQVksNENBQTRDaEQsU0FBeEQ7OztXQUdPeU0sZUFBVCxDQUF5QmpILFFBQXpCLEVBQW1DO2NBQ3ZCSCxpQkFBVixDQUE0QkcsUUFBNUI7YUFDU25DLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDQyxPQUFsQyxDQUEwQyxVQUFVa0UsRUFBVixFQUFjO1NBQ25EaEUsU0FBSCxDQUFhRyxNQUFiLENBQW9CLFVBQXBCO0tBREY7WUFHUVgsR0FBUixDQUFZd0MsUUFBWjtzQkFDa0JBLFFBQWxCLEVBQTRCaEMsU0FBNUIsQ0FBc0NDLEdBQXRDLENBQTBDLFVBQTFDOzthQUVTSixnQkFBVCxDQUEwQixhQUExQixFQUF5Q0MsT0FBekMsQ0FBaUQsVUFBVWtFLEVBQVYsRUFBYztTQUMxRGhFLFNBQUgsQ0FBYUMsR0FBYixDQUFpQixNQUFqQjtLQURGO1FBR0lrRSxjQUFjM0QsU0FBU1osY0FBVCxDQUF3QndFLGFBQWFwQyxRQUFiLENBQXhCLENBQWxCO2dCQUNZaEMsU0FBWixDQUFzQkcsTUFBdEIsQ0FBNkIsTUFBN0I7UUFDSStJLG1CQUFtQm5FLGtCQUFrQlosWUFBWVAsS0FBWixDQUFrQjJCLEtBQXBDLENBQXZCO1FBQ0k0RCxhQUFjRCxtQkFBbUIsR0FBcEIsR0FBMkIsSUFBNUM7YUFDU3RKLGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNnRSxLQUF6QyxDQUErQzJCLEtBQS9DLEdBQXVENEQsVUFBdkQ7YUFDU3ZKLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDZ0UsS0FBNUMsQ0FBa0QyQixLQUFsRCxHQUEwRDRELFVBQTFEO2FBQ1N2SixjQUFULENBQXdCLFFBQXhCLEVBQWtDZ0UsS0FBbEMsQ0FBd0MyQixLQUF4QyxHQUFnRDRELFVBQWhEOzs7V0FHT0MsaUJBQVQsQ0FBMkJwSCxRQUEzQixFQUFxQztXQUM1QnhCLFNBQVNaLGNBQVQsQ0FBd0IrRCxZQUFZM0IsUUFBWixJQUF3QixNQUFoRCxDQUFQOzs7V0FHT29DLFlBQVQsQ0FBc0JwQyxRQUF0QixFQUFnQztXQUN0QjJCLFlBQVkzQixRQUFaLElBQXdCLGFBQS9COzs7V0FHTTJHLGtCQUFULENBQTRCbk0sU0FBNUIsRUFBdUM7V0FDN0JtSCxZQUFZbkgsU0FBWixJQUF5QixlQUFoQzs7O1dBR004RSxZQUFULENBQXNCK0gsUUFBdEIsRUFBZ0M7V0FDdkIxRixZQUFZMEYsUUFBWixDQUFQOzs7V0FHTzFGLFdBQVQsQ0FBcUIyRixNQUFyQixFQUE2QjtXQUNwQkEsT0FBT0MsT0FBUCxDQUFlLElBQWYsRUFBcUIsR0FBckIsRUFBMEJuRyxXQUExQixFQUFQOzs7V0FHT3hELGNBQVQsQ0FBd0IsdUJBQXhCLEVBQWlEYSxnQkFBakQsQ0FBa0UsT0FBbEUsRUFBMkUsWUFBVztRQUNoRitJLFNBQVNoSixTQUFTWixjQUFULENBQXdCLFFBQXhCLENBQWI7UUFDSTZKLFdBQVdqSixTQUFTWixjQUFULENBQXdCd0UsYUFBYXZELFVBQVVpQixpQkFBVixFQUFiLENBQXhCLENBQWY7a0JBQ2M0SCxZQUFkLENBQTJCRCxRQUEzQixFQUFxQ0QsTUFBckM7R0FIRjs7V0FNUzVKLGNBQVQsQ0FBd0IsbUJBQXhCLEVBQTZDYSxnQkFBN0MsQ0FBOEQsT0FBOUQsRUFBdUUsWUFBVztjQUN0RUksVUFBVWlCLGlCQUFWLEVBQVY7R0FERjs7V0FJU2xDLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDYSxnQkFBNUMsQ0FBNkQsT0FBN0QsRUFBc0UsWUFBVzs7Ozs7OzZCQUM5REksVUFBVXNCLFFBQVYsRUFBakIsd0lBQXVDO1lBQTlCRCxJQUE4Qjs7a0JBQzNCQSxLQUFLNUYsSUFBZjs7Ozs7Ozs7Ozs7Ozs7OztHQUZKOztXQU1Tc0QsY0FBVCxDQUF3QixvQkFBeEIsRUFBOENhLGdCQUE5QyxDQUErRCxPQUEvRCxFQUF3RSxZQUFXO21CQUNsRUksVUFBVWlCLGlCQUFWLEVBQWY7R0FERjs7V0FJUzZILFNBQVQsQ0FBbUIzSCxRQUFuQixFQUE2QjtRQUN2QkUsT0FBT3JCLFVBQVVrQixPQUFWLENBQWtCQyxRQUFsQixDQUFYOzs7Ozs7NkJBQ2lCRSxLQUFLZixLQUF0Qix3SUFBNkI7WUFBcEJoRCxNQUFvQjs7ZUFDdEJmLFFBQUwsR0FBZ0IsS0FBaEI7ZUFDS1ksY0FBTDs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBRWlCZ0UsUUFBbkI7O3FCQUVpQkEsUUFBakI7Ozs7V0FJTzRILGNBQVQsQ0FBd0I1SCxRQUF4QixFQUFrQztRQUM1QjZILGlCQUFpQm5KLGdCQUFnQkcsVUFBVTJCLGdCQUFWLEdBQTZCdEQsTUFBbEU7UUFDSWdELE9BQU9yQixVQUFVa0IsT0FBVixDQUFrQkMsUUFBbEIsQ0FBWDtRQUNJNkgsaUJBQWlCM0gsS0FBS2YsS0FBTCxDQUFXakMsTUFBNUIsSUFBc0NJLHNCQUExQyxFQUFrRTs7Ozs7OytCQUMvQzRDLEtBQUtmLEtBQXRCLHdJQUE2QjtjQUFwQmhELE1BQW9COztpQkFDdEJmLFFBQUwsR0FBZ0IsSUFBaEI7aUJBQ0tZLGNBQUw7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQUVpQmdFLFFBQW5COzt1QkFFaUJBLFFBQWpCOzs7OztXQUtLOEgsZ0JBQVQsR0FBNEI7UUFDdEJDLFFBQVEsWUFBWjtRQUNJQyxXQUFXRCxNQUFNRSxJQUFOLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JDLElBQTNCLEVBQWlDLENBQWpDLENBQWY7O1FBRUtKLFlBQVlySSxTQUFiLElBQTRCcUksWUFBWSxFQUE1QyxFQUFpRDsyQkFDMUIsS0FBckI7ZUFDU3BLLGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNJLFNBQXpDLENBQW1ERyxNQUFuRCxDQUEwRCxNQUExRDtlQUNTUCxjQUFULENBQXdCLG1CQUF4QixFQUE2Q3VELFdBQTdDLEdBQTJELG9EQUEzRDs7WUFFTSx1Q0FBdUM2RyxRQUE3QyxFQUF1RDtnQkFDN0MsS0FENkM7aUJBRTVDOzBCQUNTOztPQUhwQixFQU1DSyxJQU5ELENBTU0sVUFBU0MsUUFBVCxFQUFtQjtZQUNuQkEsU0FBU0MsRUFBYixFQUFpQjtpQkFDUkQsU0FBU0UsSUFBVCxFQUFQO1NBREYsTUFFTztrQkFDR2hMLEdBQVIsQ0FBWSxzQkFBc0I4SyxRQUFsQzs7T0FWSixFQWFDRCxJQWJELENBYU0sVUFBU0csSUFBVCxFQUFlO29CQUNQQSxLQUFLLE9BQUwsQ0FBWjs7Ozt3QkFJZ0JBLEtBQUssZ0JBQUwsQ0FBaEI7aUJBQ1M1SyxjQUFULENBQXdCLGVBQXhCLEVBQXlDSSxTQUF6QyxDQUFtREMsR0FBbkQsQ0FBdUQsTUFBdkQ7T0FuQkY7Ozs7V0F5QktMLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDYSxnQkFBNUMsQ0FBNkQsT0FBN0QsRUFBc0UsWUFBVzt5QkFDMUQsS0FBckI7YUFDU2IsY0FBVCxDQUF3QixtQkFBeEIsRUFBNkN1RCxXQUE3QyxHQUEyRCxxQ0FBM0Q7YUFDU3ZELGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNJLFNBQXpDLENBQW1ERyxNQUFuRCxDQUEwRCxNQUExRDtVQUNNLG1DQUFOLEVBQTJDO2NBQ2pDLE1BRGlDO1lBRW5Dc0ssZ0JBRm1DO2VBR2hDO3dCQUNTOztLQUpwQixFQU1HSixJQU5ILENBTVEsVUFBU0MsUUFBVCxFQUFtQjtVQUNyQlAsUUFBUSxXQUFaO1VBQ0lDLFdBQVdELE1BQU1FLElBQU4sQ0FBV0ssU0FBU0ksT0FBVCxDQUFpQkMsR0FBakIsQ0FBcUIsVUFBckIsQ0FBWCxFQUE2QyxDQUE3QyxDQUFmO2VBQ1MvSyxjQUFULENBQXdCLG1CQUF4QixFQUE2Q3VELFdBQTdDLEdBQTJEeUgsa0JBQWtCWixRQUFsQixDQUEzRDtlQUNTcEssY0FBVCxDQUF3QixlQUF4QixFQUF5Q0ksU0FBekMsQ0FBbURHLE1BQW5ELENBQTBELE1BQTFEOzJCQUNxQixJQUFyQjtLQVhGLEVBWUcsVUFBUzBLLEtBQVQsRUFBZ0I7Y0FDVHJMLEdBQVIsQ0FBWXFMLE1BQU1DLE9BQWxCOzJCQUNxQixJQUFyQjtLQWRGO0dBSkY7O1dBc0JTTCxjQUFULEdBQTBCO1FBQ3BCeEksUUFBUXBCLFVBQVVzQixRQUFWLEVBQVo7UUFDSTRJLGtCQUFrQixFQUF0QjtvQkFDZ0I5SSxLQUFoQixHQUF3QixFQUF4QjtvQkFDZ0JuQixjQUFoQixHQUFpQ0QsVUFBVWlCLGlCQUFWLEVBQWpDOzs7Ozs7NkJBQ2lCRyxLQUFqQix3SUFBd0I7WUFBZkMsSUFBZTs7WUFDbEI4SSxpQkFBaUI7Z0JBQ2I5SSxLQUFLNUYsSUFEUTtpQkFFWjtTQUZUOzs7Ozs7aUNBSWlCNEYsS0FBS2YsS0FBdEIsd0lBQTZCO2dCQUFwQmhELE1BQW9COzsyQkFDWmdELEtBQWYsQ0FBcUJ2QyxJQUFyQixDQUEwQnFNLGNBQWM5TSxNQUFkLENBQTFCOzs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFFYzhELEtBQWhCLENBQXNCckQsSUFBdEIsQ0FBMkJvTSxjQUEzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FFS0UsS0FBS0MsU0FBTCxDQUFlSixlQUFmLENBQVA7OztXQUdPRSxhQUFULENBQXVCOU0sSUFBdkIsRUFBNkI7UUFDdkJpTixVQUFKO1FBQ0lqTixLQUFLZixRQUFULEVBQW1CO1VBQ2IsQ0FBSjtLQURGLE1BRU87VUFDRCxDQUFKOztXQUVLO1VBQ0RlLEtBQUtYLEVBREo7U0FFRjROO0tBRkw7OztXQU1PQyxXQUFULENBQXFCTixlQUFyQixFQUFzQzs7Ozs7OzZCQUNUQSxlQUEzQix3SUFBNEM7WUFBbkNDLGNBQW1DOztZQUN0QzlJLE9BQU9yQixVQUFVa0IsT0FBVixDQUFrQmlKLGVBQWUxTyxJQUFqQyxDQUFYO1lBQ0lnUCxrQkFBa0JOLGVBQWU3SixLQUFyQzs7Ozs7O2lDQUMyQm1LLGVBQTNCLHdJQUE0QztnQkFBbkNDLGNBQW1DOzs7Ozs7cUNBQ3pCckosS0FBS2YsS0FBdEIsd0lBQTZCO29CQUFwQmhELE1BQW9COztvQkFDdkJvTixlQUFlL04sRUFBZixJQUFxQlcsT0FBS1gsRUFBOUIsRUFBa0M7c0JBQzVCK04sZUFBZUgsQ0FBZixJQUFvQixDQUF4QixFQUEyQjsyQkFDcEJoTyxRQUFMLEdBQWdCLElBQWhCO21CQURGLE1BRU87MkJBQ0FBLFFBQUwsR0FBZ0IsS0FBaEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBUUh3TixpQkFBVCxDQUEyQlosUUFBM0IsRUFBcUM7UUFDL0J3QixZQUFZdEIsT0FBT0MsUUFBUCxDQUFnQnNCLE1BQWhCLEdBQXlCdkIsT0FBT0MsUUFBUCxDQUFnQnVCLFFBQXpDLEdBQW9ELEdBQXBELEdBQTBEMUIsUUFBMUU7WUFDUTJCLFNBQVIsQ0FBa0IsRUFBbEIsRUFBc0IsRUFBdEIsRUFBMEJILFNBQTFCO1dBQ09BLFNBQVA7OztXQUdPSSxTQUFULEdBQXFCO1lBQ1hELFNBQVIsQ0FBa0IsRUFBbEIsRUFBc0IsRUFBdEIsRUFBMEJ6QixPQUFPQyxRQUFQLENBQWdCc0IsTUFBaEIsR0FBeUJ2QixPQUFPQyxRQUFQLENBQWdCdUIsUUFBbkU7Ozs7V0FJT0csb0JBQVQsQ0FBOEJDLFlBQTlCLEVBQTRDO2FBQy9CbE0sY0FBVCxDQUF3QixlQUF4QixFQUF5Q21NLFlBQXpDLENBQXNELGdCQUF0RCxFQUF3RUQsYUFBYUUsUUFBYixFQUF4RTs7O1dBR0twTSxjQUFULENBQXdCLGVBQXhCLEVBQXlDYSxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUUsWUFBVztRQUN4RXdMLFlBQVl6TCxTQUFTWixjQUFULENBQXdCLGVBQXhCLEVBQXlDc00sWUFBekMsQ0FBc0QsZ0JBQXRELENBQWhCO1FBQ0lELGFBQWEsTUFBakIsRUFBeUI7ZUFDZHJNLGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNJLFNBQXpDLENBQW1EQyxHQUFuRCxDQUF1RCxNQUF2RDs7R0FISjs7V0FPU0wsY0FBVCxDQUF3QixtQkFBeEIsRUFBNkNhLGdCQUE3QyxDQUE4RCxPQUE5RCxFQUF1RSxVQUFTMEwsS0FBVCxFQUFnQjtVQUMvRUMsZUFBTjtHQURGOzs7V0FLU3JILGlCQUFULENBQTJCc0gsU0FBM0IsRUFBc0M7V0FDN0JoTCxXQUFXZ0wsVUFBVUMsS0FBVixDQUFnQixDQUFoQixFQUFtQixDQUFDLENBQXBCLENBQVgsQ0FBUDs7Ozs7V0FLTzFNLGNBQVQsQ0FBd0IsaUJBQXhCLEVBQTJDYSxnQkFBM0MsQ0FBNEQsT0FBNUQsRUFBcUUsWUFBVzthQUNyRWIsY0FBVCxDQUF3QixrQkFBeEIsRUFBNENJLFNBQTVDLENBQXNERyxNQUF0RCxDQUE2RCxNQUE3RDtHQURGO1dBR1NQLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDYSxnQkFBNUMsQ0FBNkQsT0FBN0QsRUFBc0UsWUFBVzthQUNyRWIsY0FBVCxDQUF3QixrQkFBeEIsRUFBNENJLFNBQTVDLENBQXNEQyxHQUF0RCxDQUEwRCxNQUExRDtHQURIO1dBR1NMLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDYSxnQkFBNUMsQ0FBNkQsT0FBN0QsRUFBc0UsVUFBUzBMLEtBQVQsRUFBZ0I7VUFDOUVDLGVBQU47R0FERjs7V0FJU0csb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQ0E7NkJBQzJCQSxNQUF6QjtRQUNJLENBQUNsTixzQkFBTCxFQUE2Qjs7Ozs7OytCQUNWdUIsVUFBVXNCLFFBQVYsRUFBakI7Y0FBU0QsSUFBVDs7OEJBQ3NCQSxLQUFLNUYsSUFBekI7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBRUFtUSxPQUFPLHVCQUFYO1FBQ0duTixzQkFBSCxFQUEyQjthQUNsQixrQkFBUDs7YUFFT00sY0FBVCxDQUF3QixnQ0FBeEIsRUFBMER1RCxXQUExRCxHQUF3RXNKLElBQXhFOzs7V0FHTzdNLGNBQVQsQ0FBd0IsZ0NBQXhCLEVBQTBEYSxnQkFBMUQsQ0FBMkUsT0FBM0UsRUFBb0YsVUFBUzBMLEtBQVQsRUFBZ0I7eUJBQzdFLENBQUM3TSxzQkFBdEI7VUFDTThNLGVBQU47R0FGRjs7V0FLU00sbUJBQVQsQ0FBNkIxSyxRQUE3QixFQUF1QztRQUNqQ0UsT0FBT3JCLFVBQVVrQixPQUFWLENBQWtCQyxRQUFsQixDQUFYOztTQUVLYixLQUFMLENBQVdyQixPQUFYLENBQW1CLFVBQVMzQixJQUFULEVBQWM7VUFDM0JBLEtBQUtmLFFBQVQsRUFBbUI7YUFDWmEsY0FBTDs7S0FGSjtTQUtLa0QsS0FBTCxDQUFXLENBQVgsRUFBY25ELGNBQWQ7UUFDSWtFLEtBQUtmLEtBQUwsQ0FBVyxDQUFYLEVBQWMvRCxRQUFsQixFQUE0QjtnQ0FDQThFLEtBQUtmLEtBQUwsQ0FBVyxDQUFYLEVBQWN0RCxRQUF4Qzs7O3FCQUdlbUUsUUFBakI7OztXQUdPcEMsY0FBVCxDQUF3QixpQ0FBeEIsRUFBMkRhLGdCQUEzRCxDQUE0RSxPQUE1RSxFQUFxRixVQUFTMEwsS0FBVCxFQUFnQjs7VUFFN0ZDLGVBQU47R0FGRjs7V0FLU08sZUFBVCxHQUEyQjt3QkFDTCxDQUFDck0saUJBQXJCOztRQUVJbU0sT0FBTyxrQkFBWDtRQUNHbk0saUJBQUgsRUFBc0I7YUFDYiw4QkFBUDs7YUFFT1YsY0FBVCxDQUF3QixpQ0FBeEIsRUFBMkR1RCxXQUEzRCxHQUF5RXNKLElBQXpFOzs7OztXQUtPN00sY0FBVCxDQUF3QixnQ0FBeEIsRUFBMERhLGdCQUExRCxDQUEyRSxPQUEzRSxFQUFvRixVQUFTMEwsS0FBVCxFQUFnQjs7Ozs7OzZCQUNqRnRMLFVBQVVzQixRQUFWLEVBQWpCLHdJQUF1QztZQUE5QkQsSUFBOEI7O1lBQ2pDMEssdUJBQXVCLEtBQTNCO2FBQ0t6TCxLQUFMLENBQVdyQixPQUFYLENBQW1CLFVBQVMzQixJQUFULEVBQWM7Y0FDM0JBLEtBQUtKLGlCQUFMLEVBQUosRUFBOEI7aUJBQ3ZCWCxRQUFMLEdBQWdCLEtBQWhCO2lCQUNLWSxjQUFMO21DQUN1QixJQUF2Qjs7U0FKSjtZQU9JNE8sb0JBQUosRUFBMEI7MkJBQ1AxSyxLQUFLNUYsSUFBdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQVhOOztXQW9CU3NELGNBQVQsQ0FBd0IsK0JBQXhCLEVBQXlEYSxnQkFBekQsQ0FBMEUsT0FBMUUsRUFBbUYsVUFBUzBMLEtBQVQsRUFBZ0I7VUFDM0ZDLGVBQU47R0FERjtDQWg1QkY7O0FDWEE7Ozs7In0=
