footer {
  color: #eeeeee;
  background-color: #191919;
  padding: 5px;
  text-align: center;
}

footer a:link {
  color: grey;
}

footer a:visited {
  color: darkgrey;
}

footer a:link {
  color: grey;
}

footer a:hover {
  color: lightgrey;
}


#tooltip {
  position: absolute;
  margin: 5px;
  background-color: #6dd9ffbb;
  z-index: 3;
  overflow: hidden;
  max-height: 110px;
  border-color: #003D7D;
  pointer-events: none;
}

#tooltip-name-bar {
  color: #d3f3ff;
  text-shadow: 0 0 1px black;
  background-color: #008DCDbb;
  font-size: 140%;
  padding-top: 6px;
  padding-bottom: 4px;
  border-width: 0 0 0 0;
  border-style: solid;
  border-color: inherit;
  white-space: nowrap
}

#tooltip-description {
  font-size: 120%;
  color: black;
  text-shadow: 0 0 1px white;
  padding: 5px;
  text-align: left;
}

#tooltip.full-tooltip {
  width: 200px;
  height: 110px;
  -webkit-transition: width 0.3s 0s, height 0.3s 0.3s;
  -moz-transition: width 0.3s 0s, height 0.3s 0.3s;
  -o-transition: width 0.3s 0s, height 0.3s 0.3s;
  transition: width 0.3s 0s, height 0.3s 0.3s;
  border-width: 3px 0 3px 0;
  border-style: solid;
}

#tooltip.zero-tooltip {
  width: 0px;
  height: 28px;
	max-height: 0;
}

.sidebar {
  border-color: black;
  border-style: solid;
  min-width: 150px;
  line-height: 50px;
  display: flex;
  flex-direction: column;
}

.option-button {
  color: black;
  font-size: 110%;
  text-align: center;
  background-color: grey;
  border: 1px solid #191919;
  cursor: pointer;

  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none;
}

.option-button:hover {
  color: #eeeeee;
  text-shadow: 0 0 1px white;
  background-color: #191919;
}

.solo-button {
  height: 24px;
  margin: 3px;
  width: 120px;
  line-height: 24px;
  border: 1px solid #191919;
  border-radius: 5px;
}

.duo-button {
  height: 20px;
  width: 58px;
  line-height: 21px;
}

#left-sidebar {
  border-width: 1px 0px 0px 1px;
  justify-content: flex-start;
  align-content: space-around;
}

#node-count-display {
  color: #eeeeee;
  text-shadow: 0 0 2px #eeeeee;
  background-color: #2b2d30;
  font-size: 300%;
  border-width: 0px 0px 1px 0px;
  border-color: #191919;
  border-style: solid;
}

#node-selection-counter.exceeded-max-nodes {
  color: red;
  text-shadow: 0 0 1px red;
}

#tabs-pane {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: stretch;
}

.treeTab {
  color: #eeeeee;
  background-color: #2b2d30;
  line-height: 20px;
  border-width: 0px 0px 1px 0px;
  border-style: solid;
  border-color: #191919;
  height: 40px;
  width: 150px;
  cursor: pointer;

  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Safari */
  -khtml-user-select: none; /* Konqueror HTML */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none;
}

.treeTab.selected {
  color: white;
  text-shadow: 0 0 2px black;
  background-color: transparent;
  z-index: 2;
}

#right-sidebar {
  color: #eeeeee;
  background-color: #2b2d30;
  background-color: #2b2d30;
  border-width: 1px 1px 0px 0px;
  justify-content: space-between;
  align-items: center;
}

#bonuses-header {
  font-size: 200%;
  text-decoration: underline;
  text-shadow: 0 0 1px white;
}

.bonus-tree-name {
  width: 100%;
  font-weight: bold;
  font-size: 110%;
  line-height: 25px;
  border-width: 0 0 1px 0;
  border-style: solid;
  border-color: black;
}

.bonus-tree-name.min {
  font-size: 95%;
  line-height: 20px;
}

.bonus-display {
  padding: 5px 10px 5px 10px;
  text-align: left;
  font-size: 100%;
  line-height: 10px;
}

.bonus-display:nth-child(even) {
  background-color: #191919;
}

.bonus-display:nth-child(odd) {
  color: #191919;
  background-color: lightgrey;
}

.bonus-display.min {
  font-size: 80%;
}

#bonus-sort-button {
  margin: 8px;
}

#costs-and-buttons-pane {
  height: 100%;
  width: 100%;
  background-color: #2b2d30;
  color: #eeeeee;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

#cost-totals-display {
  color: #eeeeee;
  text-shadow: 0 0 1px #eeeeee;
  font-weight: 900;
  margin: 10px 0;
  line-height: 20px;
}

#buttons-pane {
  width: 100%;
  padding-top: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

#chassis-toggles {
  display: flex;
  flex-direction: row;
  align-items: space-between;
}

#chassis-weight-toggle {
  margin: 3px 0px 3px 3px;
  padding: 2px 0px 2px 2px;
  border-radius: 5px 0px 0px 5px;
  border: 1px solid #191919;
}

#chassis-tech-toggle {
  margin: 3px 3px 3px 0px;
  padding: 2px 2px 2px 0px;
  border-width: 1px 1px 1px 0px;
  border-style: solid;
  border-color: #191919;
  border-radius: 0px 5px 5px 0px;
}

.skill-tree {
  position: relative;
  height: 900px;
}

.node {
  position: absolute;
  width: 110px;
  font-size: 110%;
  line-height: 20px;
  z-index: 1;
  cursor: pointer;
}

.hex-text {
  font-size: 90%;
  font-weight: 900;
  position: absolute;
  width: 70px;
  top: 25px;
  left: 19px;
  z-index: 1;
  background-color: none;

  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none;
}

.node .hex-text.hex-value {
  position: absolute;
  top: 65px;
  z-index: 1;
}

.hex-graphic {
  stroke-width: 15;
}

/*
  The long selector here increases the specificity enough to overcome the
  high priority defined for the per-bonus border color defined in
  attribute_colors.js
*/
 body .skill-tree .node.selected.illegal .hex-graphic {
  stroke: red;
  stroke-width: 20;
  /*
    // Adapted from Andrew Willems' work at
    // https://stackoverflow.com/a/41517797/1720976

    // If I were using SCSS or something I could probably make a SCSS function
    // that would do this based on a variable defining the side length of the
    // hex

    let polygon = nodeElement.querySelector('.hex');
    let aveDashSize = 30;
    let noneFlag = undefined;

    const c = polygon.getAttribute('points').replace(/,| +/g, ' ')
      .trim().split(' ').map(n => +n); // extract points' coordinates from polygon
    c.push(c[0], c[1]); // repeat the 1st point's coordinates at the end
    const d = noneFlag ? [0, 0] : [0]; // if noneFlag, prepend extra zero
    for (let s = 0; s < c.length - 2; s += 2) { // s is line segment number * 2
      const dx = c[s] - c[s + 2];
      const dy = c[s + 1] - c[s + 3];
      const segLen = Math.sqrt(dx * dx + dy * dy);
      const n = Math.floor(0.5 + segLen / aveDashSize / 2);
      const len = segLen / n / 2; // calculate # of dashes & dash length
      d.push((d.pop() + len) / 2); // join prev seg's last dash, this seg's 1st dash
      (i => {
        while (i--) {
          d.push(len, len)
        }
      })(n); // fill out line with gaps & dashes
    }
    console.log(d.join(' '));
    polygon.setAttribute('stroke-dasharray', d.join(' '));
  */
  stroke-dasharray: 12.50694251650303 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.00694251650303 25 25 25 25 25 25.00694251650303 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.00694251650303 25 25 25 25 25 25.00694251650303 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606 25.01388503300606;
}

.node .hex-graphic {
  fill: #2b2d30;
  stroke: #191919;
}

.node.selected .hex-graphic {
  fill: #00b5f5;
  stroke: #005c7d;
}

.node.mouse-over .hex-graphic {
  stroke: #2f2f2f;
  -webkit-filter: drop-shadow(0px 0px 8px white);
  filter:         drop-shadow(0px 0px 8px white);
}

.node.mouse-over.selected .hex-graphic {
  stroke: #008DCD;
  -webkit-filter: drop-shadow(0px 0px 8px #50FFFF);
  filter:         drop-shadow(0px 0px 8px #50FFFF);
}

.node.mouse-over.illegal .hex-graphic {
  -webkit-filter: drop-shadow(0px 0px 8px red);
  filter:         drop-shadow(0px 0px 8px red);
}

.node.selected .hex-text { color: black; }
.node .hex-text { color: white; }

.node-connect-line {
  position: absolute;
  height: 10px;
  background: #191919;
  z-index: 0;
  transform-origin: left center;
}
.node-connect-line.selected { background: white; }
.node-connect-line.illegal { background: red; }

#modal-overlay {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 98;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

#modal-overlay.hide {
  display: none;
}

#modal-window {
  width: 600px;
  color: white;
  background-color: black;
  z-index: 99;
  padding: 20px;
  border: 1px solid #888;
  border-radius: 15px;
}

#permalink-display {
  font-size: 140%;
  background-color: #43464b;
  border-radius: 5px;
  padding: 9px 6px 6px 6px;
  cursor: text;
}

.trees-view {
  width: 3400px;
  background: linear-gradient(to bottom right, #43464b, grey, #43464b);
  text-align: center;
  display: flex;
  flex-flow: row wrap;
}

.labeled-tree {
  display: flex;
  flex-direction: column;
}

.tree-label {
  height: 50px;
  line-height: 50px;
  width: 100%;
  font-size: 200%;
  color: black;
  text-decoration: underline;
  text-align: center;
}

body {
  background-color: #fff;
  color: #333;
  font-size: 14px;
  line-height: 18px;
  font-family: "Lato", sans-serif;
  display: flex;
}

#pane {
  position: relative;
  display: flex;
  flex-direction: column;
  text-align: center;
}

#main {
  background: linear-gradient(to bottom right, #43464b, grey, #43464b);
  border: 1px solid black;
  display: flex;
  flex-direction: row;
}

.hide {
  display: none;
}

